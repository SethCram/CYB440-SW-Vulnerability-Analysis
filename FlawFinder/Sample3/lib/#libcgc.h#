#ifndef _LIBCGC_H
#define _LIBCGC_H

#define STDIN 0
#define STDOUT 1
#define STDERR 2

#define	NULL ((void *)0)

typedef long unsigned int size_t;
typedef long signed int ssize_t;

#define SSIZE_MAX	2147483647
#define SIZE_MAX	4294967295
#define	FD_SETSIZE	1024

typedef long int _fd_mask;

#define	_NFDBITS (8 * sizeof(_fd_mask))

typedef struct {
	_fd_mask _fd_bits[FD_SETSIZE / _NFDBITS];
} fd_set;

#define	FD_ZERO(set)							\
	do {								\
		int __i;						\
		for (__i = 0; __i < (FD_SETSIZE / _NFDBITS); __i++)	\
			(set)->_fd_bits[__i] = 0;				\
	} while (0)
#define	FD_SET(b, set) \
	((set)->_fd_bits[b / _NFDBITS] |= (1 << (b & (_NFDBITS - 1))))
#define	FD_CLR(b, set) \
	((set)->_fd_bits[b / _NFDBITS] &= ~(1 << (b & (_NFDBITS - 1))))
#define	FD_ISSET(b, set) \
	((set)->_fd_bits[b / _NFDBITS] & (1 << (b & (_NFDBITS - 1))))

struct timeval {
	int tv_sec;
	int tv_usec;
};

#define	EBADF		1
#define	EFAULT		2
#define	EINVAL		3
#define	ENOMEM		4
#define	ENOSYS		5
#define	EPIPE		6

#ifdef LIBCGC_IMPL

// Maximum number of binaries running for one challenge
# define MAX_NUM_CBS 10

// STD(IN/OUT/ERR) + a socketpair for every binary
// All fds used by the binaries should be less than this
# define EXPECTED_MAX_FDS 3 + (2 * MAX_NUM_CBS)


typedef struct {
  void* addr;
  unsigned long len;
  unsigned long prot;
  unsigned long flags;
  unsigned long fd;
  unsigned long offset;  
} mmap_arg_struct;

#define PROT_READ   0x01
#define PROT_WRITE  0x02
#define PROT_EXEC   0x04
#define PROT_NONE   0x00
#define MAP_ANONYMOUS 0x20
#define MAP_PRIVATE 0x02 
#define MAP_FAILED ((void*)-1)
#define MS_ASYNC 0x1

void cgc__terminate(unsigned int status) __attribute__((__noreturn__));
int cgc_transmit(int fd, const void *buf, size_t count);
int cgc_fsync(int fd);
int cgc_receive(int fd, void *buf, size_t count);
int cgc_fdwait(int nfds, fd_set *readfds, fd_set *writefds,
	   const struct timeval *timeout, int *readyfds);
void* cgc_mmap(mmap_arg_struct *a);
int cgc_unmap(const void *addr, size_t length);
int cgc_msync(const void *addr, int flags, size_t length);

int cgc_select(int nfds, fd_set *readfds, fd_set *writefds,
	       fd_set *except_fds,
               const struct timeval *timeout);
static int cgc_copy_fd_set(const fd_set *cgc_fds, fd_set *os_fds, int *num_fds);
static void cgc_copy_os_fd_set(const fd_set *os_fds, fd_set *cgc_fds);
static int cgc_check_timeout(const struct timeval *timeout);

			     
#else

void _terminate(unsigned int status) __attribute__((__noreturn__));
int transmit(int fd, const void *buf, size_t count, size_t *tx_bytes);
int receive(int fd, void *buf, size_t count, size_t *rx_bytes);
int fdwait(int nfds, fd_set *readfds, fd_set *writefds,
	   const struct timeval *timeout, int *readyfds);
int allocate(size_t length, int is_X, void **addr);
int deallocate(void *addr, size_t length);
			     int random(void *buf, size_t count, size_t *rnd_bytes);
#endif

typedef struct { long _b[8]; } jmp_buf[1];
int setjmp(jmp_buf) __attribute__((__returns_twice__));
void longjmp(jmp_buf, int) __attribute__((__noreturn__));

float sinf(float); double sin(double); long double sinl(long double);
float cosf(float); double cos(double); long double cosl(long double);
float tanf(float); double tan(double); long double tanl(long double);
float logf(float); double log(double); long double logl(long double);
float rintf(float); double rint(double); long double rintl(long double);
float sqrtf(float); double sqrt(double); long double sqrtl(long double);
float fabsf(float); double fabs(double); long double fabsl(long double);
float log2f(float); double log2(double); long double log2l(long double);
float exp2f(float); double exp2(double); long double exp2l(long double);
float expf(float); double exp(double); long double expl(long double);
float log10f(float); double log10(double); long double log10l(long double);
float powf(float, float);
double pow(double, double);
long double powl(long double, long double);
float atan2f(float, float);
double atan2(double, double);
long double atan2l(long double, long double);
float remainderf(float, float);
double remainder(double, double);
long double remainderl(long double, long double);
float scalbnf(float, int);
double scalbn(double, int);
long double scalbnl(long double, int);
float scalblnf(float, long int);
double scalbln(double, long int);
long double scalblnl(long double, long int);
float significandf(float);
double significand(double);
long double significandl(long double);

#endif /* _LIBCGC_H */
